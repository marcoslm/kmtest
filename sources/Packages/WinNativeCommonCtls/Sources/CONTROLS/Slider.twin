[WindowsControl("/miscellaneous/ICONS??/Slider??.png")]
[ClassId("FE755F8E-4EF9-42A4-A88B-B876EF5B4450")]
[InterfaceId("BD91F6FC-5074-4D76-B43A-502BB9D51656")]
[COMCreatable(False)]
[EventsUseDispInterface]
Class Slider
	
	#Region "INHERITANCE"

        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlFocusableNoFont Via _BaseControl = New WinNativeFormsBASE.BaseControlFocusableNoFont(ControlTypeConstants.vbSlider)
        
    #End Region
            
    #Region "STATE"
        Enum TickStyleConstants
            sldBottomRight = 0
            sldTopLeft = 1
            sldBoth = 2
            sldNoTicks = 3
        End Enum

        Enum TextPositionConstants
            sldAboveLeft = 0
            sldBelowRight = 1
        End Enum
        
        Public Enum OrientationConstants
            ccOrientationHorizontal = 0
            ccOrientationVertical = 1
        End Enum
    
        [Description("")]
            Public BorderStyle As VBRUN.ControlBorderStyleConstants = ControlBorderStyleConstants.vbNoBorder
        
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public BackColor As OLE_COLOR = VBRUN.SystemColorConstants.vbButtonFace

        [CustomDesigner("designer_RestrictedOLEDropMode")]
            Public OLEDropMode As VBRUN.OLEDropConstants
            
        [Description("Opacity, given as a percentage, 0 - 100.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
            Public Opacity As Double = 100
        
        [CustomDesigner("designer_SpectrumWindowsOrClear")]
        [Description("A color, when set, that will appear fully transparent in the window.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
            Public TransparencyKey As OLE_COLOR = -1
        
            
        Private WithEvents RootWindowElement As WindowsControls.WindowElement
        Private OLEDragDropHandler As WinNativeFormsBASE.OLEDragDropHandler
        
        [CustomDesigner("designer_MultiLineText")]
        [Serialize(True, "ToolTipText")]
            Private ToolTipTextINIT As String

        [Serialize(True, "Min")]
            Private Min_INIT As Long = 0
        [Serialize(True, "Max")]
            Private Max_INIT As Long = 10
        [Serialize(True, "Value")]
            Private Value_INIT As Long = 0
        [Serialize(True, "SelStart")]
            Private SelStart_INIT As Long = 0
        [Serialize(True, "SelLength")]
            Private SelLength_INIT As Long = 0
        [Serialize(True, "SmallChange")]
            Private SmallChange_INIT As Long = 1
        [Serialize(True, "LargeChange")]
            Private LargeChange_INIT As Long = 2
            
            Private IsInitialized As Boolean
        
            Public HideThumb As Boolean = False
            Public ShowTip As Boolean = True
            Public SelectRange As Boolean = False
            Public TickFrequency As Long = 1
            Public TextPosition As TextPositionConstants = TextPositionConstants.SldAboveLeft
            Public TickStyle As TickStyleConstants = TickStyleConstants.SldBottomRight
            Public Orientation As OrientationConstants = OrientationConstants.ccOrientationHorizontal
            
        [Serialize(True, "VisualStyles")]
            Private VisualStylesINIT As Boolean = True

    #End Region

    #Region "EVENTS"
    
        [Description("")]
            Event Change()
        [Description("")]
            Event Click()
        [Description("")]
            Event GotFocus()
        [Description("")]
            Event KeyDown(KeyCode As Integer, Shift As Integer)
        [Description("")]
            Event KeyPress(KeyAscii As Integer)
        [Description("")]
            Event KeyUp(KeyCode As Integer, Shift As Integer)
        [Description("")]
            Event LostFocus()
        [Description("")]
            Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
            Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
            Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
            Event Initialize()
        [Description("")]
            Event DragDrop(Source As Control, X As Single, Y As Single)
        [Description("")]
            Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        Event OLECompleteDrag(Effect As Long)
        Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        Event OLESetData(Data As DataObject, DataFormat As Integer)
        Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)
        [Description("")]
            Event Scroll()
        Event Validate(Cancel As Boolean)
        
    #End Region
               
    #Region "MEMBERS"
        
        Private Sub HandleLoad() _
                Handles RootWindowElement.Load
            
            Dim Opacity As Any = Me.Opacity
            If ((Opacity >= 0) And (Opacity < 100)) Or (TransparencyKey <> -1) Then
                SyncOpacity
            End If
        End Sub
        
        Private Sub SyncOpacity() _ 
                Handles Opacity.OnPropertyLet, _
                        TransparencyKey.OnPropertyLet
            
            VB.CommonSyncOpacity(Me.TransparencyKey, Me.Opacity, Me.RootWindowElement.Handle)
        End Sub
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
            
            Me.InternalStateReset()     ' resets all the base class state
            Me.IsInitialized = False
            
            With ControlContext.GetSerializer
                If Not .Deserialize(Me) Then
                    If Me.PixelsHeight > Me.PixelsWidth Then
                       Me.Orientation = OrientationConstants.ccOrientationVertical
                   End If
                End If
                'IsDesignMode = .IsDesignMode
            End With
            
            With CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX)
                .Name = Me.NameINIT
                .ToolTipText = Me.ToolTipTextINIT
                .VisualStyles = Me.VisualStylesINIT
            End With
            
            Dim Opacity As Any = Me.Opacity
            If Opacity > 100 Then Me.Opacity = 100
            If Opacity < 0 Then Me.Opacity = 0
                
            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InitData.ClassName = "msctls_trackbar32"
            InitData.WindowStyles = GetStyles()
            InitData.SubClass = True
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
        End Sub
        
        Private Function GetStyles() As Long
            Dim Styles As Long
        	Styles += If(HideThumb, TBS_NOTHUMB, 0&)
            Styles += If(ShowTip, TBS_TOOLTIPS, 0&)
            Styles += If(SelectRange, TBS_ENABLESELRANGE, 0&)
            Styles += TBS_AUTOTICKS
            Styles += If(Orientation = OrientationConstants.ccOrientationHorizontal, TBS_HORZ, TBS_VERT)
            Styles += If(BorderStyle = ControlBorderStyleConstants.vbFixedSingleBorder, WinNativeFormsBASE.WS_BORDER, 0&)

            Select Case TickStyle
                Case TickStyleConstants.sldBottomRight
                    If Orientation = Orientation.ccOrientationHorizontal Then
                        Styles += TBS_BOTTOM
                    Else
                        Styles += TBS_RIGHT
                    End If
                Case TickStyleConstants.sldTopLeft
                    If Orientation = Orientation.ccOrientationHorizontal Then
                        Styles += TBS_TOP
                    Else
                        Styles += TBS_LEFT
                    End If
                Case TickStyleConstants.sldBoth
                    Styles += TBS_BOTH
                Case Else
                    Styles += TBS_NOTICKS
            End Select
            
            Return Styles
        End Function
                
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
            
            ' disconnect anything that causes a circular reference here
            If OLEDragDropHandler IsNot Nothing Then OLEDragDropHandler.Disconnect()
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub

        Private Sub Class_Terminate()
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
        End Sub
		
        Private Sub HandleCreate() _
                Handles RootWindowElement.Create

            Me.Min = Min_INIT
            Me.Max = Max_INIT
            Me.Value = Value_INIT
            Me.SelStart = SelStart_INIT
            Me.SelLength = SelLength_INIT
            Me.SmallChange = SmallChange_INIT
            Me.LargeChange = LargeChange_INIT

            SyncTickFrequency ()
            SyncTextPosition ()
            
            SyncOLEDropMode ()
            RaiseEvent Initialize()
            
            IsInitialized = True
        End Sub
        
        Private Sub HandleMouseDown(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single, ByRef SwallowMessage As Boolean) _
                Handles RootWindowElement.PreMouseDown
            
            'BeginMouseCapture(RootWindowElement)   this intereferes with dragging the slider
            RaiseEvent MouseDown(CInt(Button), CInt(ShiftState), X, Y)
        End Sub
        
        Private Sub HandleMouseMove(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseMove
                
            RaiseEvent MouseMove(CInt(Button), CInt(ShiftState), X, Y)
        End Sub
        
        Private Sub HandleMouseUp(ByVal Button As VBRUN.MouseButtonConstants, _
                                    ByVal ShiftState As VBRUN.ShiftConstants, _
                                    ByVal X As Single, ByVal Y As Single, ByRef SwallowMessage As Boolean) _
                Handles RootWindowElement.PreMouseUp
                
            Dim ScaledPixX As Double = (X / Me.ControlContext.GetScaleModePixelsMultiplierX)
            Dim ScaledPixY As Double = (Y / Me.ControlContext.GetScaleModePixelsMultiplierY)
            
            RaiseEvent MouseUp(CInt(Button), CInt(ShiftState), X, Y)
            
            'If EndMouseCapture() Then
                If IsInRect(ScaledPixX, ScaledPixY) Then
                    RaiseEvent Click()
                End If
            'End If
        End Sub
        
        Private Sub HandleGotFocus() _
                Handles RootWindowElement.GotFocus
              
            If IsInitialized = True Then
                RaiseEvent GotFocus()
            End If
        End Sub

        Private Sub HandleLostFocus() _
                Handles RootWindowElement.LostFocus
                
            RaiseEvent LostFocus()
        End Sub
        
        Private Sub HandleKeyDown(ByRef KeyCode As VBRUN.KeyCodeConstants, _
                                    ByVal ShiftState As VBRUN.ShiftConstants) _
                Handles RootWindowElement.KeyDown
        
            Dim KeyCodeInt As Integer = CInt(KeyCode)
            RaiseEvent KeyDown(KeyCodeInt, CInt(ShiftState))
            KeyCode = CType(Of VBRUN.KeyCodeConstants)(KeyCodeInt)
        End Sub
        
        Private Sub HandleKeyUp(ByRef KeyCode As VBRUN.KeyCodeConstants, _
                                    ByVal ShiftState As VBRUN.ShiftConstants) _
                Handles RootWindowElement.KeyUp
                
            Dim KeyCodeInt As Integer = CInt(KeyCode)
            RaiseEvent KeyUp(KeyCodeInt, CInt(ShiftState))
            KeyCode = CType(Of VBRUN.KeyCodeConstants)(KeyCodeInt)
        End Sub
        
        Private Sub HandleKeyPress(ByRef Key As Integer) _
                Handles RootWindowElement.KeyPress
                
            RaiseEvent KeyPress(Key)
        End Sub
                
        [Serialize(False)]
        Public Property Get Min() As Long
            Return SendMessageLng(TBM_GETRANGEMIN, 0, 0)
        End Property
        
        [Serialize(False)]
        Public Property Let Min(ByVal Value As Long)
            SendMessageLngPtr(TBM_SETRANGEMIN, 1, Value)
        End Property
        
        [Serialize(False)]
        Public Property Get Max() As Long
            Return SendMessageLng(TBM_GETRANGEMAX, 0, 0)
        End Property
        
        [Serialize(False)]
        Public Property Let Max(ByVal Value As Long)
            SendMessageLngPtr(TBM_SETRANGEMAX, 1, Value)
        End Property
                
        [Serialize(False), DefaultMember]
        Public Property Get Value() As Long
            Return SendMessageLng(TBM_GETPOS, 0, 0)
        End Property
        
        [Serialize(False), DefaultMember]
        Public Property Let Value(ByVal NewValue As Long)
            If Me.Value <> NewValue Then
                SendMessageLngPtr(TBM_SETPOS, 1, NewValue)
                If IsInitialized Then RaiseEvent Change
            End If
        End Property
        
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
        
        [Serialize(False)]
        Public Property Get Object() As Object
            Return Me
        End Property

        Private Sub HandleDragOver(ByVal Source As Object, ByVal X As Double, ByVal Y As Double, ByVal State As Long) _
                Handles RootWindowElement.DragOver
            
            If State = 3 Then
                RaiseEvent DragDrop(Source, CSng(X), CSng(Y))
            Else
                RaiseEvent DragOver(Source, CSng(X), CSng(Y), CInt(State))
            End If
        End Sub
        
        Private Sub SyncStyles() _
                Handles HideThumb.OnPropertyLet, _
                        TickStyle.OnPropertyLet, _
                        Orientation.OnPropertyLet, _
                        ShowTip.OnPropertyLet, _
                        SelectRange.OnPropertyLet
            
            Dim origStyles As Long = CLng(WinNativeFormsBASE.GetWindowLongW(RootWindowElement.Handle, WinNativeFormsBASE.WindowProperties.GWL_STYLE))
            WinNativeFormsBASE.SetWindowLongW(RootWindowElement.Handle, WinNativeFormsBASE.WindowProperties.GWL_STYLE, (origStyles And WinNativeFormsBASE.WS_CHILD) Or (origStyles And WinNativeFormsBASE.WS_VISIBLE) Or GetStyles())
        End Sub
                
        Public Property Get SelStart() As Long
        	Return SendMessageLng(TBM_GETSELSTART, 0, 0)
        End Property
        
        Public Property Let SelStart(ByVal Value As Long)
            Select Case Value
                Case Me.Min To Me.Max
                Case Else
                    Err.Raise 380
            End Select
            SendMessageLngPtr(TBM_SETSELSTART, 0, Value)
        End Property
        
        Public Property Get SelLength() As Long
        	Return SendMessageLng(TBM_GETSELEND, 0, 0) - SelStart
        End Property
        
        Public Property Let SelLength(ByVal Value As Long)
            Select Case Value
                Case Me.Min To Me.Max
                Case Else
                    Err.Raise 380
            End Select
            SendMessageLngPtr(TBM_SETSELEND, 1, SelStart + Value)
        End Property
        
        Public Property Get SmallChange() As Long
        	Return SendMessageLng(TBM_GETLINESIZE, 0, 0)
        End Property
        
        Public Property Let SmallChange(ByVal Value As Long)
            SendMessageLngPtr(TBM_SETLINESIZE, 0, Value)
        End Property
        
        Public Property Get LargeChange() As Long
        	Return SendMessageLng(TBM_GETPAGESIZE, 0, 0)
        End Property
        
        Public Property Let LargeChange(ByVal Value As Long)
            SendMessageLngPtr(TBM_SETPAGESIZE, 0, Value)
        End Property
        
        Private Sub SyncTextPosition() _
                Handles TextPosition.OnPropertyLet

            Dim tipSide As Long
            If Me.Orientation = Orientation.ccOrientationHorizontal Then
                tipSide = If(TextPosition = TextPositionConstants.sldAboveLeft, TBTS_TOP, TBTS_BOTTOM)
            Else
                tipSide = If(TextPosition = TextPositionConstants.sldAboveLeft, TBTS_LEFT, TBTS_RIGHT)
            End If
            SendMessageLngPtr(TBM_SETTIPSIDE, tipSide, 0)
        End Sub
        
        Private Sub SyncTickFrequency() _
        	    Handles TickFrequency.OnPropertyLet
                
            If TickFrequency < 0 Then
                TickFrequency = 0
            End If
            SendMessageLngPtr(TBM_SETTICFREQ, TickFrequency, 0)
        End Sub
        
        Public Sub OLEDrag()
            CommonOLEDrag(Me)
        End Sub

        Private Sub SyncOLEDropMode() _
                Handles OLEDropMode.OnPropertyLet
                
            BaseSyncOLEDropMode (Me, Me.OLEDropMode, Me.OLEDragDropHandler, False, True)
        End Sub
        
        Private Sub RootWindowElement_Scroll(ByVal ScrollType As Long, ByVal IsHorizontal As Boolean)
            'Debug.Print "RootWindowElement_Scroll", ScrollType
            Select Case ScrollType
                Case TB_THUMBTRACK, TB_THUMBPOSITION, TB_LINEDOWN, TB_LINEUP, TB_PAGEDOWN, TB_PAGEUP
                    RaiseEvent Scroll
            	Case TB_BOTTOM, TB_TOP, TB_ENDTRACK
                	RaiseEvent Change
            End Select
        End Sub
        
        Private Sub RootWindowElement_GetColors(ByVal hdc As LongPtr, BackBrushOut As LongPtr, ByVal ControlType As Long)
            BackBrushOut = Me.CreateBackBrush(Me.BackColor)
        End Sub
        
        Private Sub HandleValidate(Cancel As Boolean) _
                Handles RootWindowElement.Validate

            RaiseEvent Validate(Cancel)
        End Sub
        
        [Serialize(False)]
        Public Property Get ToolTipText() As String
            Return CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).ToolTipText
        End Property
    
        [Serialize(False)]
        Public Property Let ToolTipText(ByVal Value As String)
            CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).ToolTipText = Value
            Me.RootWindowElementBase.ToolTipChanged()
        End Property
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
    #End Region
	
End Class