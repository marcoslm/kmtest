[WindowsControl("/miscellaneous/ICONS??/ProgressBar??.png")]
[ClassId("60728020-5535-491E-BEDE-449A3CDE96EA")]
[InterfaceId("59880EA4-ED08-4DF7-8B8D-2F820FC3A395")]
[COMCreatable(False)]
[EventsUseDispInterface]
Class ProgressBar
	
	#Region "INHERITANCE"

        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlNotFocusable2 Via _BaseControl = New WinNativeFormsBASE.BaseControlNotFocusable2(ControlTypeConstants.vbProgressBar)
        
    #End Region
    
    Public Enum PrbOrientation
        PrbOrientationHorizontal = 0
        PrbOrientationVertical = 1
    End Enum
    
    Public Enum PrbScrolling
        PrbScrollingStandard = 0
        PrbScrollingSmooth = 1
        PrbScrollingMarquee = 2
    End Enum
    
    Public Enum PrbState
        PrbStateNormal = 1
        PrbStateError = 2
        PrbStatePaused = 3
    End Enum
        
    #Region "STATE"
    
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public BackColor As OLE_COLOR = VBRUN.SystemColorConstants.vbButtonFace
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public ForeColor As OLE_COLOR = VBRUN.SystemColorConstants.vbHighlight

        [Description("")]
            Public MarqueeAnimation As Boolean = False
        [Description("")]
            Public MarqueeSpeed As Long = 80
        [Description("")]
            Public State As PrbState = PrbState.PrbStateNormal
        [Description("")]
            Public SmoothReverse As Boolean = False
        [Description("")]
            Public Orientation As PrbOrientation = PrbOrientation.PrbOrientationHorizontal
        [Description("")]
            Public Scrolling As PrbScrolling = PrbScrolling.PrbScrollingStandard
        [CustomDesigner("designer_RestrictedOLEDropMode")]
            Public OLEDropMode As VBRUN.OLEDropConstants
            
        [Description("Opacity, given as a percentage, 0 - 100.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
            Public Opacity As Double = 100
        
        [CustomDesigner("designer_SpectrumWindowsOrClear")]
        [Description("A color, when set, that will appear fully transparent in the window.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
            Public TransparencyKey As OLE_COLOR = -1
        

        Private WithEvents RootWindowElement As WindowsControls.WindowElement
        Private OLEDragDropHandler As WinNativeFormsBASE.OLEDragDropHandler

        [Serialize(True, "Min")]
            Private Min_INIT As Long = 0
        [Serialize(True, "Max")]
            Private Max_INIT As Long = 100
        [Serialize(True, "Value")]
            Private Value_INIT As Long = 40
        [Serialize(True, "Step")]
            Private Step_INIT As Long = 10
            
        Private IsInitialized As Boolean
                        
    #End Region

    #Region "EVENTS"
    
        [Description("")]
            Event Change()
        [Description("")]
            Event Click()
        [Description("")]
            Event DblClick()
        [Description("")]
            Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
            Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
            Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
            Event Initialize()
        [Description("")]
            Event DragDrop(Source As Control, X As Single, Y As Single)
        [Description("")]
            Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        Event OLECompleteDrag(Effect As Long)
        Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        Event OLESetData(Data As DataObject, DataFormat As Integer)
        Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)
        
    #End Region
               
    #Region "MEMBERS"

        Private Sub HandleLoad() _
                Handles RootWindowElement.Load
            
            Dim Opacity As Any = Me.Opacity
            If ((Opacity >= 0) And (Opacity < 100)) Or (TransparencyKey <> -1) Then
                SyncOpacity
            End If
        End Sub
        
        Private Sub SyncOpacity() _ 
                Handles Opacity.OnPropertyLet, _
                        TransparencyKey.OnPropertyLet
            
            VB.CommonSyncOpacity(Me.TransparencyKey, Me.Opacity, Me.RootWindowElement.Handle)
        End Sub
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
            
            Me.InternalStateReset()     ' resets all the base class state
            Me.IsInitialized = False
            
            With ControlContext.GetSerializer
                If Not .Deserialize(Me) Then
                    ' set defaults here
                End If
                'IsDesignMode = .IsDesignMode
            End With
            
            Dim Opacity As Any = Me.Opacity
            If Opacity > 100 Then Me.Opacity = 100
            If Opacity < 0 Then Me.Opacity = 0
            
            Dim styles As Long = If(Me.Orientation = PrbOrientationVertical, PBS_VERTICAL, 0&) + _
                                    If(SmoothReverse = True, PBS_SMOOTHREVERSE, 0&)
            Select Case Me.Scrolling
                Case PrbScrollingSmooth: styles += PBS_SMOOTH
                Case PrbScrollingMarquee: styles += PBS_MARQUEE
            End Select
                    
            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InitData.ClassName = "msctls_progress32"
            InitData.WindowStyles = styles
            'InitData.ExtendedStyles = WinNativeFormsBASE.WS_EX_NOACTIVATE
            InitData.SubClass = True
            InitData.Flags = PreventActivation
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
        End Sub
                
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
            
            ' disconnect anything that causes a circular reference here
            If OLEDragDropHandler IsNot Nothing Then OLEDragDropHandler.Disconnect()
            Set Me.Font = Nothing
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub

        Private Sub Class_Terminate()
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
        End Sub
		
        Private Sub HandleCreate() _
                Handles RootWindowElement.Create

            Me.Min = Min_INIT
            Me.Max = Max_INIT
            Me.Value = Value_INIT
            Me.Step = Step_INIT
            
            SyncBackColor()
            SyncForeColor()
            SyncState()
            SyncMarquee()
            SyncOLEDropMode()
            RaiseEvent Initialize()
            
            IsInitialized = True
        End Sub
        
        Private Sub HandleMouseDoubleClick(ByVal Button As VBRUN.MouseButtonConstants, _
                                            ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseDoubleClick
                
            RaiseEvent DblClick()
        End Sub

        Private Sub HandleMouseDown(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseDown
            BeginMouseCapture(RootWindowElement)
            RaiseEvent MouseDown(CInt(Button), CInt(ShiftState), X, Y)
        End Sub
        
        Private Sub HandleMouseMove(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseMove
                
            RaiseEvent MouseMove(CInt(Button), CInt(ShiftState), X, Y)
        End Sub
        
        Private Sub HandleMouseUp(ByVal Button As VBRUN.MouseButtonConstants, _
                                    ByVal ShiftState As VBRUN.ShiftConstants, _
                                    ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseUp
                
            Dim ScaledPixX As Double = (X / Me.ControlContext.GetScaleModePixelsMultiplierX)
            Dim ScaledPixY As Double = (Y / Me.ControlContext.GetScaleModePixelsMultiplierY)
            
            RaiseEvent MouseUp(CInt(Button), CInt(ShiftState), X, Y)

            If EndMouseCapture() Then
                If IsInRect(ScaledPixX, ScaledPixY) Then
                    RaiseEvent Click()
                End If
            End If
        End Sub
        
        Private Sub SyncBackColor() _
                Handles BackColor.OnPropertyLet
            
            SendMessageLngPtr(PBM_SETBKCOLOR, 0, TranslateColor(Me.BackColor))
        End Sub

        Private Sub SyncForeColor() _
                Handles ForeColor.OnPropertyLet
            
            SendMessageLngPtr(PBM_SETBARCOLOR, 0, TranslateColor(Me.ForeColor))
        End Sub
        
        Private Sub SyncState() _
                Handles State.OnPropertyLet
            
            SendMessageLngPtr(PBM_SETSTATE, Me.State, 0)
        End Sub
        
        Private Sub SyncMarquee() _
                Handles MarqueeAnimation.OnPropertyLet, _
                        MarqueeSpeed.OnPropertyLet
                        
            SendMessageLngPtr(PBM_SETMARQUEE, If(Me.MarqueeAnimation, 1, 0), Me.MarqueeSpeed)
        End Sub
        
        [Serialize(False)]
        Public Property Get Min() As Long
            Return SendMessageLng(PBM_GETRANGE, 1, 0)
        End Property
        
        [Serialize(False)]
        Public Property Let Min(ByVal Value As Long)
            SendMessageLngPtr(PBM_SETRANGE32, Value, Me.Max)
        End Property
        
        [Serialize(False)]
        Public Property Get Max() As Long
            Return SendMessageLng(PBM_GETRANGE, 0, 0)
        End Property
        
        [Serialize(False)]
        Public Property Let Max(ByVal Value As Long)
            SendMessageLngPtr(PBM_SETRANGE32, Me.Min, Value)
        End Property
        
        [Serialize(False)]
        Public Property Get Step() As Long
            Return SendMessageLng(PBM_GETSTEP, 0, 0)
        End Property
        
        [Serialize(False)]
        Public Property Let Step(ByVal Value As Long)
            SendMessageLngPtr(PBM_SETSTEP, Me.Step, 0)
        End Property
        
        Public Sub StepIt()
            SendMessageLngPtr(PBM_STEPIT, 0, 0)
            RaiseEvent Change
        End Sub
        
        [Serialize(False), DefaultMember]
        Public Property Get Value() As Long
            Return SendMessageLng(PBM_GETPOS, 0, 0)
        End Property
        
        [Serialize(False), DefaultMember]
        Public Property Let Value(ByVal NewValue As Long)
            If Me.Value <> NewValue Then
                SendMessageLngPtr(PBM_SETPOS, NewValue, 0)
                If IsInitialized = True Then RaiseEvent Change
            End If
        End Property
        
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
        
        [Serialize(False)]
        Public Property Get Object() As Object
            Return Me
        End Property

        Private Sub HandleDragOver(ByVal Source As Object, ByVal X As Double, ByVal Y As Double, ByVal State As Long) _
                Handles RootWindowElement.DragOver
            
            If State = 3 Then
                RaiseEvent DragDrop(Source, CSng(X), CSng(Y))
            Else
                RaiseEvent DragOver(Source, CSng(X), CSng(Y), CInt(State))
            End If
        End Sub
        
        Private Sub SyncStyles() _
                Handles SmoothReverse.OnPropertyLet, _
                        Orientation.OnPropertyLet, _
                        Scrolling.OnPropertyLet
                
            Dim valueBefore As Long = Me.Value
            Dim styles As Long = WinNativeFormsBASE.GetWindowLongW(RootWindowElement.Handle, WinNativeFormsBASE.WindowProperties.GWL_STYLE)
            styles = styles And Not PBS_SMOOTHREVERSE
            styles = styles And Not PBS_VERTICAL
            styles = styles And Not PBS_SMOOTH
            styles = styles And Not PBS_MARQUEE
            If SmoothReverse = True Then styles += PBS_SMOOTHREVERSE
            If Orientation = PrbOrientationVertical Then styles += PBS_VERTICAL
            Select Case Me.Scrolling
                Case PrbScrollingSmooth: styles += PBS_SMOOTH
                Case PrbScrollingMarquee: styles += PBS_MARQUEE
            End Select
            WinNativeFormsBASE.SetWindowLongW(RootWindowElement.Handle, WinNativeFormsBASE.WindowProperties.GWL_STYLE, styles)
            Me.Value = valueBefore      ' preserve the value, as it gets auto reset
        
        End Sub
        
        Public Sub OLEDrag()
            CommonOLEDrag(Me)
        End Sub

        Private Sub SyncOLEDropMode() _
                Handles OLEDropMode.OnPropertyLet
                
            BaseSyncOLEDropMode(Me, Me.OLEDropMode, Me.OLEDragDropHandler, False, True)
        End Sub
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
        
    #End Region
	
End Class