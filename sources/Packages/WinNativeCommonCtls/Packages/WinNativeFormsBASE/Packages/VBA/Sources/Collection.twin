[InterfaceId("A4C46780-499F-101B-BB78-00AA00383CBB")]
Interface _Collection
    [DispId(0)]
    [Description("Retrieves an element from a Collection object  ." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = Collection.Item(index)  `" & vbCrLf & _
                    "### Return Type" & vbCrLf & _
                    "Variant: The function returns the item associated with the specified key or at the specified index in the collection  ." & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`index  `" & vbCrLf & _
                    "A `Variant` that specifies the position of the item in the collection. This can be a numeric index or a String key  ." & vbCrLf & _
                    "### Remarks" & vbCrLf & _
                    "The `Item` method is the default method of a `Collection` object, so you can omit the `.Item` when calling it. If an index is provided that is not a number or a string, or if it refers to an item not present in the collection, an error will occur  ." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Assuming a Collection object named 'myCollection' has been properly filled with items:" & vbCrLf & _
                    "Dim anItem As Variant" & vbCrLf & _
                    "anItem = myCollection.Item(1)  ' Retrieves the first item using a numeric index" & vbCrLf & _
                    "anItem = myCollection(""key"")   ' Retrieves the item associated with the key 'key'" & vbCrLf & _
                    "```")]
    Function Item(ByRef Index As Variant) As Variant

    [DispId(1)]
    [Description("Adds an element to a Collection object  ." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`Collection.Add(Item, [Key], [Before], [After])  `" & vbCrLf & _
                    "### Return Type" & vbCrLf & _
                    "Void: This method does not return a value  ." & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Item  `" & vbCrLf & _
                    "A `Variant` that specifies the item to add to the collection  ." & vbCrLf & _
                    "`Key` (Optional)" & vbCrLf & _
                    "A `String` to use as the key for the associated item. If omitted, the item cannot be retrieved by key  ." & vbCrLf & _
                    "`Before`, `After` (Optional)" & vbCrLf & _
                    "A numeric expression that specifies the position to place the new element. Either before or after the element at this position  ." & vbCrLf & _
                    "### Remarks" & vbCrLf & _
                    "You can add items with or without a key. If a key is provided, it must be unique within the collection. The `Before` and `After` parameters are mutually exclusive; if both are provided, an error occurs  ." & vbCrLf & _
                    "If neither `Before` nor `After` is specified, the new item is added to the end of the collection  ." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Assuming a Collection object named 'myCollection':" & vbCrLf & _
                    "myCollection.Add Item:=""A new item"", Key:=""NewItemKey""  ' Adds an item with a key" & vbCrLf & _
                    "myCollection.Add ""Another item""                           ' Adds an item without a key" & vbCrLf & _
                    "myCollection.Add ""Item at position"", Before:=1            ' Adds an item at the beginning" & vbCrLf & _
                    "```")]
    Sub Add(ByRef Item As Variant, Optional ByRef Key As Variant, Optional ByRef Before As Variant, Optional ByRef After As Variant)
    
    [DispId(2)]
    [Description("Gets the number of elements contained in the Collection object  ." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = Collection.Count  `" & vbCrLf & _
                    "### Return Type" & vbCrLf & _
                    "`Long`: The number of elements in the collection as a `Long` data type  ." & vbCrLf & _
                    "### Remarks" & vbCrLf & _
                    "The `Count` property returns the total number of items within the collection. It is read-only and can be used to determine the number of iterations needed in a loop that accesses each member of the collection, or to validate if the collection has any members before attempting to access them  ." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Assuming a Collection object named 'myCollection':" & vbCrLf & _
                    "Dim itemCount As Long" & vbCrLf & _
                    "itemCount = myCollection.Count" & vbCrLf & _
                    "' Now 'itemCount' holds the number of items in 'myCollection'" & vbCrLf & _
                    "```")]
    Property Get Count() As Long
    	
    [DispId(3)]
    [Description("Removes an element from a Collection object at a specific position or with a specific key  ." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`Collection.Remove(index)  `" & vbCrLf & _
                    "`Collection.Remove(key)  `" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`index`: A `Long` indicating the one-based index position of the element to remove  ." & vbCrLf & _
                    "`key`: A `String` representing the unique key associated with the element to remove  ." & vbCrLf & _
                    "### Remarks" & vbCrLf & _
                    "The `Remove` method allows you to delete an item from the collection either by its numerical index or by its unique key. If an invalid index or a non-existent key is specified, an error will occur  ." & vbCrLf & _
                    "When an item is removed, the indexes of subsequent items are decremented. This is important to consider during iteration over the collection  ." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Assuming a Collection object named 'myCollection' that already contains items:" & vbCrLf & _
                    "' To remove the first item using its index:" & vbCrLf & _
                    "myCollection.Remove(1)" & vbCrLf & _
                    "' To remove an item using its key:" & vbCrLf & _
                    "myCollection.Remove(""uniqueKey"")" & vbCrLf & _
                    "```")]
    Sub Remove(ByRef Index As Variant)
    	
    [DispId(4)]
    [Description("Removes all elements from a Collection object. After calling Clear, the Count property of the collection is set to zero  ." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`Collection.Clear  `" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "This method does not take any parameters  ." & vbCrLf & _
                    "### Return Value" & vbCrLf & _
                    "This method does not return a value  ." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Assuming we have a Collection object named 'myCollection' with items in it" & vbCrLf & _
                    "myCollection.Clear" & vbCrLf & _
                    "' myCollection is now empty, and myCollection.Count would return 0" & vbCrLf & _
                    "```" & vbCrLf & _
                    "### Remarks" & vbCrLf & _
                    "Use the Clear method to reset a Collection object to its initial, empty state. This is particularly useful when you want to reuse the object without creating a new instance.")]
    Sub Clear()
    	
    [DispId(5)]
    [Description("Determines whether an element with a specific key exists within the Collection object  ." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`Function Exists(ByVal Key As String) As Boolean  `" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Key` [String] The key associated with the item to locate in the collection  ." & vbCrLf & _
                    "### Return Value" & vbCrLf & _
                    "Returns `True` if the item with the specified key exists in the collection; otherwise, `False`  ." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Assuming we have a Collection object named 'myCollection'" & vbCrLf & _
                    "Dim itemExists As Boolean" & vbCrLf & _
                    "itemExists = myCollection.Exists(""someKey"")" & vbCrLf & _
                    "If itemExists Then" & vbCrLf & _
                    "    Debug.Print ""Item with key 'someKey' exists in the collection.""" & vbCrLf & _
                    "Else" & vbCrLf & _
                    "    Debug.Print ""Item with key 'someKey' does not exist in the collection.""" & vbCrLf & _
                    "End If" & vbCrLf & _
                    "```" & vbCrLf & _
                    "### Remarks" & vbCrLf & _
                    "The Exists method provides a convenient way to check for the presence of an item by its key without the need to iterate through the entire collection. It is particularly useful when the collection is used as a map or dictionary.")]
    Function Exists(ByVal Key As String) As Boolean
    	
    [DispId(6)]
    [Description("Provides a hint to the Collection object about the number of keyed items expected, allowing it to optimize the underlying hash table for efficiency  ." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`Property Let KeyCountHint(ByVal Hint As Long)  `" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Hint` [Long] The estimated number of keyed items that will be added to the collection  ." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Assume we have a Collection object named 'myCollection'" & vbCrLf & _
                    "' If we expect around 1000 keyed items, we provide that hint to the collection  ." & vbCrLf & _
                    "myCollection.KeyCountHint = 1000" & vbCrLf & _
                    "```" & vbCrLf & _
                    "### Remarks" & vbCrLf & _
                    "Setting the KeyCountHint is optional, but doing so can improve performance when working with large collections. It is most effective when set before any items are added to the collection. If the number of keyed items exceeds the hint, the collection will still function correctly, but there may be a performance impact  ." & vbCrLf & _
                    "### See Also" & vbCrLf & _
                    "- Collection.Add" & vbCrLf & _
                    "- Collection.Exists")]
    Property Get KeyCountHint() As Long

    [DispId(6)]
    [Description("Provides a hint to the Collection object about the number of keyed items expected, allowing it to optimize the underlying hash table for efficiency  ." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`Property Let KeyCountHint(ByVal Hint As Long)  `" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Hint` [Long] The estimated number of keyed items that will be added to the collection  ." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Assume we have a Collection object named 'myCollection'" & vbCrLf & _
                    "' If we expect around 1000 keyed items, we provide that hint to the collection  ." & vbCrLf & _
                    "myCollection.KeyCountHint = 1000" & vbCrLf & _
                    "```" & vbCrLf & _
                    "### Remarks" & vbCrLf & _
                    "Setting the KeyCountHint is optional, but doing so can improve performance when working with large collections. It is most effective when set before any items are added to the collection. If the number of keyed items exceeds the hint, the collection will still function correctly, but there may be a performance impact  ." & vbCrLf & _
                    "### See Also" & vbCrLf & _
                    "- Collection.Add" & vbCrLf & _
                    "- Collection.Exists")]
    Property Let KeyCountHint(ByVal Value As Long)
    	
    [DispId(7)]
    [Description("Sets or returns the text comparison mode used for keys in collections and dictionaries within error handling. It can be set to `vbTextCompare` for case-insensitive text comparison or `vbBinaryCompare` for case-sensitive binary comparison  ." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`Property Let KeyCompareMode(ByVal CompareMode As VbCompareMethod)  `" & vbCrLf & _
                    "`Property Get KeyCompareMode() As VbCompareMethod  `" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`CompareMode` [VbCompareMethod] The comparison mode to be used. Can be either `vbTextCompare` or `vbBinaryCompare`  ." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Set the error key comparison mode to case-insensitive  ." & vbCrLf & _
                    "Err.KeyCompareMode = vbTextCompare" & vbCrLf & vbCrLf & _
                    "' Check if a case-insensitive comparison is set  ." & vbCrLf & _
                    "If Err.KeyCompareMode = vbTextCompare Then" & vbCrLf & _
                    "    MsgBox ""Case-insensitive comparison is set for error keys.""" & vbCrLf & _
                    "End If" & vbCrLf & _
                    "```" & vbCrLf & _
                    "### Remarks" & vbCrLf & _
                    "The `KeyCompareMode` property affects how keys are compared when adding or searching for items in collections and dictionaries during error handling. By default, the comparison mode is set to `vbBinaryCompare`.")]
    Property Get KeyCompareMode() As VbCompareMethod
    
    [DispId(7)]
    [Description("Sets or returns the text comparison mode used for keys in collections and dictionaries within error handling. It can be set to `vbTextCompare` for case-insensitive text comparison or `vbBinaryCompare` for case-sensitive binary comparison  ." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`Property Let KeyCompareMode(ByVal CompareMode As VbCompareMethod)  `" & vbCrLf & _
                    "`Property Get KeyCompareMode() As VbCompareMethod  `" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`CompareMode` [VbCompareMethod] The comparison mode to be used. Can be either `vbTextCompare` or `vbBinaryCompare`  ." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Set the error key comparison mode to case-insensitive  ." & vbCrLf & _
                    "Err.KeyCompareMode = vbTextCompare" & vbCrLf & vbCrLf & _
                    "' Check if a case-insensitive comparison is set  ." & vbCrLf & _
                    "If Err.KeyCompareMode = vbTextCompare Then" & vbCrLf & _
                    "    MsgBox ""Case-insensitive comparison is set for error keys.""" & vbCrLf & _
                    "End If" & vbCrLf & _
                    "```" & vbCrLf & _
                    "### Remarks" & vbCrLf & _
                    "The `KeyCompareMode` property affects how keys are compared when adding or searching for items in collections and dictionaries during error handling. By default, the comparison mode is set to `vbTextCompare`.")]
    Property Let KeyCompareMode(ByVal Value As VbCompareMethod)
    
    [DispId(8)]
    [Description("Retrieves an array of all items in the collection  ." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`Property Get Items() As Variant  `" & vbCrLf & _
                    "### Return Value" & vbCrLf & _
                    "Returns a Variant array with all the elements contained in the collection  ." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Assume 'col' is a previously created Collection object with items  ." & vbCrLf & _
                    "Dim itemsArray As Variant" & vbCrLf & _
                    "itemsArray = col.Items" & vbCrLf & vbCrLf & _
                    "' Iterate through the array of items  ." & vbCrLf & _
                    "Dim item As Variant" & vbCrLf & _
                    "For Each item In itemsArray" & vbCrLf & _
                    "    Debug.Print item" & vbCrLf & _
                    "Next item" & vbCrLf & _
                    "```" & vbCrLf & _
                    "### Remarks" & vbCrLf & _
                    "The `Items` property provides an easy way to retrieve all the elements in a collection as an array. This can be particularly useful when you need to iterate over the items without modifying the collection or when you need to pass the collection's contents to a procedure expecting an array. The lower bound of the array is zero.")]
    Function Items() As Variant()
    
    [DispId(9)]
    [Description("Retrieves a string array of all keys in the collection  ." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`Property Get Keys() As String()  `" & vbCrLf & _
                    "### Return Value" & vbCrLf & _
                    "Returns a String array with all the keys associated with items in the collection. If items do not have keys, the array will be empty  ." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Assume 'col' is a previously created Collection object with keyed items  ." & vbCrLf & _
                    "Dim keysArray() As String" & vbCrLf & _
                    "keysArray = col.Keys" & vbCrLf & vbCrLf & _
                    "' Iterate through the array of keys  ." & vbCrLf & _
                    "Dim key As String" & vbCrLf & _
                    "For Each key In keysArray" & vbCrLf & _
                    "    Debug.Print key" & vbCrLf & _
                    "Next key" & vbCrLf & _
                    "```" & vbCrLf & _
                    "### Remarks" & vbCrLf & _
                    "The `Keys` property allows for the retrieval of all keys in a collection, which can be useful for iterating over keyed items or when you need to validate the presence of specific keys. It is particularly beneficial in scenarios where the collection is used as a map or dictionary.")]
    Function Keys() As String()

    [DispId(-4),Hidden,Restricted] Function _NewEnum() As stdole.IUnknown
End Interface

[CoClassId("A4C4671C-499F-101B-BB78-00AA00383CBB")]
[CoClassCustomConstructor("_HiddenModule.CreateCollectionObject")]
[COMCreatable(True)]
CoClass Collection
    [Default] Interface _Collection
End CoClass