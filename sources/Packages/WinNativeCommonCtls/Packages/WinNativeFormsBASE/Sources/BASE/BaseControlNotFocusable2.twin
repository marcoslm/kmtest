[ClassId("5D93AFFC-1494-417B-A383-3759B983E1CF")]
[InterfaceId("D66C7E51-3D21-48A8-8E9C-6F9A5872D7E1")]
[COMCreatable(False)]
Private Class BaseControlNotFocusable2

    Implements BaseControlRectDockable Via BaseControlRectDockable
    Implements BaseFont Via BaseFont
    
    ' like BaseControlFocusable, but without TabStop

    [Serialize(False)]
        Private WithEvents RootWindowElementBaseEvents As WindowsControls.WindowElement
    [Description("Adjusts the TAB key order of this control at runtime")]
    [Serialize(True, "TabIndex")]
        Private TabIndexINIT As Long
    [Description("")]
        Public Appearance As VBRUN.AppearanceConstants = VBRUN.AppearanceConstants.vbAppear3d
    [Description("")]
    [Serialize(True, "MousePointer")]
        Private MousePointerINIT As VBRUN.MousePointerConstants = VBRUN.MousePointerConstants.vbDefault
    [Serialize(True, "MouseIcon")]
    [CustomDesigner("designer_IconBytes")]
        Private ReadOnly MouseIconINIT() As Byte
        
    [CustomDesigner("designer_MultiLineText")]
    [Serialize(True, "ToolTipText")]
        Private ToolTipTextINIT As String
        
    [Serialize(True, "VisualStyles")]
        Private ReadOnly VisualStylesINIT As Boolean = True

    [Serialize(True, "DragIcon")]
    [CustomDesigner("designer_PictureBytes")]
    [Description("")]
        Private ReadOnly DragIconINIT() As Byte
    [Serialize(True, "DragMode")]
        Private DragModeINIT As VBRUN.DragModeConstants
    
    [Description("Adjusts the visibility of this control at runtime")]
    [Serialize(True, "Visible")]
        Private VisibleINIT As Boolean = True
        [Description("")]
    [Serialize(True, "Enabled")]
        Private EnabledINIT As Boolean = True
        
    Sub New(ByVal ControlType As ControlTypeConstants)
       Set Me.BaseControlRectDockable = New BaseControlRectDockable(ControlType)
       Set Me.BaseFont = New BaseFont(Me.BaseControlRectDockable)
    End Sub
    
    Friend Sub InternalStateReset()
        Me.BaseFont.InternalStateResetFont()
        Me.BaseControlRectDockable.InternalStateReset()
    End Sub
            
    [Serialize(False)]
    [Description("")]
    Property Get Enabled() As Boolean
        Return CommonGetEnabled()
    End Property
    
    [Serialize(False)]
    [Description("")]
    Property Let Enabled(Value As Boolean)
        CommonLetEnabled(Value)
        Me.Refresh      ' Needed for Frame, otherwise the border can get drawn, even when BorderStyle is None
    End Property
    
    [Serialize(False)]
    [Description("Adjusts the visibility of this control at runtime")]
    Property Get Visible() As Boolean
        Return CommonGetVisible()
    End Property
    
    [Serialize(False)]
    [Description("Adjusts the visibility of this control at runtime")]
    Property Let Visible(Value As Boolean)
        CommonLetVisible(Value)
    End Property
    
    Friend Function CreateRootWindowElement(ByVal _ControlContext As stdole.IUnknown, _
                                                ByRef InitData As WindowCreationData) As WindowElement
        InitData.BaseControlInfoPtr = InternalBaseControlBeforeCreateRootWindow(InitData)
        With CType(Of WinNativeFormsBASE.BaseControlInfo)(InitData.BaseControlInfoPtr)
            .ToolTipText = Me.ToolTipTextINIT
            .VisualStyles = Me.VisualStylesINIT
            .MousePointer = MousePointerINIT
            .DragMode = Me.DragModeINIT
            .HasTabIndex = True
            .TabIndex = Me.TabIndexINIT
        End With
        
        Set Me.ControlContext = CType(Of WindowsControlContext)(_ControlContext) ' FIXME passed as IUnknown to prevent COM exposure of type
        InitData.WindowStyles += If(Me.EnabledINIT, 0&, WS_DISABLED) + _
                                 If(Me.VisibleINIT, WS_VISIBLE, 0&)
        Set Me.RootWindowElementBase = CType(Of WindowElement)(ControlContext.CreateWindowElement(InitData))
        Set Me.RootWindowElementBaseEvents = Me.RootWindowElementBase
        CommonLoadPictureInit(CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MouseIcon, Me.MouseIconINIT)
        CommonLoadPictureInit(CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).DragIcon, Me.DragIconINIT)
        
        Return Me.RootWindowElementBase
    End Function
    
    Friend Sub RecreateWindow(ByVal StyleFlags As Long)
    	If Me.CurrentFontHandle <> 0 Then
        	' This happens due to calling RootWindowElement.RecreateWindow
            Me.CurrentFontHandle = 0        ' the handle was destroyed as it was selected into the old HWND
        End If
        RootWindowElementBase.RecreateWindow(StyleFlags)
    End Sub
    
    Private Sub HandleCreate() _
            Handles RootWindowElementBaseEvents.Create, _
                    RootWindowElementBaseEvents.DPIChange
            
        SyncFontProperties()
        Me.Refresh()
    End Sub

    ' Private Sub OnPropertyChanged() _
    '         Handles Appearance.OnPropertyLet
                    
    '     Err.Raise 5, , "Sorry, tB does not support setting this property at runtime YET"
    ' End Sub
    
    Public Sub SetFocus()
        CommonSetFocus()
    End Sub
    
    Public Sub Refresh()
        CommonRefresh()
    End Sub
    
    [Serialize(False)]
    Public Property Get ToolTipText() As String
        Return CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).ToolTipText
    End Property
    
    [Serialize(False)]
    Public Property Let ToolTipText(ByVal Value As String)
        CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).ToolTipText = Value
        Me.RootWindowElementBase.ToolTipChanged()
    End Property
    
    [Serialize(False)]
    Public Property Get VisualStyles() As Boolean
        Return CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).VisualStyles
    End Property
        
    Public Sub Move(ByVal Left As Single, Optional ByVal Top As Variant, Optional ByVal Width As Variant, Optional ByVal Height As Variant)
        If InternalMove(Me, Left, Top, Width, Height) Then
        	Me.ControlContext.ChangedPosition()
        End If
    End Sub
    
    [Serialize(False)]
    [BindOnlyIfNoArguments]
    Public Property Get Left() As Double
        Return Me.ControlContext.GetScaledLeft
    End Property
    
    [Serialize(False)]
    [BindOnlyIfNoArguments]
    Public Property Let Left(ByVal Value As Double)
        Me.ControlContext.SetScaledLeft(Value)
    End Property
    
    [Serialize(False)]
    Public Property Get Top() As Double
        Return Me.ControlContext.GetScaledTop
    End Property
    
    [Serialize(False)]
    Public Property Let Top(ByVal Value As Double)
        Me.ControlContext.SetScaledTop(Value)
    End Property
    
    [Serialize(False)]
    Public Property Get Width() As Double
        Return Me.ControlContext.GetScaledWidth
    End Property
    
    [Serialize(False)]
    Public Property Let Width(ByVal Value As Double)
        Me.ControlContext.SetScaledWidth(Value)
    End Property
    
    [Serialize(False)]
    Public Property Get Height() As Double
        Return Me.ControlContext.GetScaledHeight
    End Property
    
    [Serialize(False)]
    Public Property Let Height(ByVal Value As Double)
        Me.ControlContext.SetScaledHeight(Value)
    End Property
    
    Public Sub Drag([TypeHint(DragConstants)] Optional ByVal Action As Variant)
        CommonDrag(Action)
    End Sub
    
    Friend Sub BaseSyncOLEDropMode(ByVal RootThis As Object, ByVal OLEDropMode As OLEDropConstants, ByRef DragDropHandler As OLEDragDropHandler, ByVal IsContainer As Boolean, ByVal AllowedAutomatic As Boolean)
        CommonSyncOLEDropMode(RootThis, OLEDropMode, DragDropHandler, ControlContext, RootWindowElementBase, IsContainer, AllowedAutomatic)
    End Sub
    
    Public Sub ZOrder([TypeHint(ZOrderConstants)] Optional ByVal Position As Variant)
        CommonZOrder(Position, Me.RootWindowElementBase.Handle)
    End Sub

    [Serialize(False)]
    Public Property Get MouseIcon() As StdPicture
        Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MouseIcon
    End Property

    [Serialize(False)]
    Public Property Set MouseIcon(Value As StdPicture)
        Set CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MouseIcon = Value
        CommonMousePointerChanged()
    End Property

    [Serialize(False)]
    Public Property Let MouseIcon(Value As StdPicture)
        Set CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MouseIcon = Value
        CommonMousePointerChanged()
    End Property
    
    [Serialize(False)]
    Public Property Get hWnd() As LongPtr
        Return CommonGetHWND()
    End Property
        
    [Serialize(False)]
    Public Property Get MousePointer() As MousePointerConstants
        Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MousePointer
    End Property
    
    [Serialize(False)]
    Public Property Let MousePointer(ByVal Value As MousePointerConstants)
        CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MousePointer = Value
        CommonMousePointerChanged()
    End Property
    
    [Serialize(False)]
    Public Property Get DragMode() As DragModeConstants
        Return CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).DragMode
    End Property
    
    [Serialize(False)]
    Public Property Let DragMode(ByVal Value As DragModeConstants)
        CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).DragMode = Value
    End Property
    
    [Serialize(False)]
    Public Property Get TabIndex() As Long
        Return CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).TabIndex
    End Property
    
    [Serialize(False)]
    Public Property Let TabIndex(ByVal Value As Long)
        CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).TabIndex = Value
    End Property
    
    [Serialize(False)]
    Public Property Get DragIcon() As StdPicture
        Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).DragIcon
    End Property

    [Serialize(False)]
    Public Property Set DragIcon(Value As StdPicture)
        Set CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).DragIcon = Value
    End Property

    [Serialize(False)]
    Public Property Let DragIcon(Value As StdPicture)
        Set CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).DragIcon = Value
    End Property
    
    Friend Function SendMessageLngPtr(ByVal msg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr
        Return WinNativeFormsBASE.SendMessageW(RootWindowElementBase.Handle, msg, wParam, lParam)
    End Function
        
    Friend Function SendMessageLng(ByVal msg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As Long
        Dim retValLngPtr As Any = WinNativeFormsBASE.SendMessageW(RootWindowElementBase.Handle, msg, wParam, lParam)
        #If Win64 Then
            Dim retValLng As Long
            GetMem4(VarPtr(retValLngPtr), retValLng)
            Return retValLng
        #Else
            Return retValLngPtr
        #End If
    End Function
    
End Class