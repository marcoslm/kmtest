[ClassId("D37D8226-9E2C-48B4-9F1D-D825E6AB9BCA")]
[InterfaceId("5C027A9E-0BD8-468E-8644-42BC31A486AC")]
[COMCreatable(False)]
Class BaseFont

        Private OuterOwner As BaseControlRectDockable
        
    [Serialize(False)]
        Friend InternalFontChangeCount As Long
    
    [Serialize(False)]
        Public WithEvents Font As StdFont
            
    [Serialize(False)]
        Friend CurrentFontHandle As LongPtr
    
    ' FIXME need a font picker, then hide these from the property sheet
        [Serialize(True, "FontBold")]
        Private FontBoldINIT As Boolean = False
        [Serialize(True, "FontItalic")]
        Private FontItalicINIT As Boolean = False
        [Serialize(True, "FontName")]
        Private FontNameINIT As String = "Segoe UI"
        [Serialize(True, "FontSize")]
        Private FontSizeINIT As Single = 8
        [Serialize(True, "FontStrikethru")]
        Private FontStrikethruINIT As Boolean = False
        [Serialize(True, "FontUnderline")]
        Private FontUnderlineINIT As Boolean = False
        
        Public Sub New(OuterOwner As BaseControlRectDockable)
        	Set Me.OuterOwner = OuterOwner
        End Sub
        
        Friend Sub InternalStateResetFont()
            InternalFontChangeCount = 0
            If Me.CurrentFontHandle <> 0 Then WindowsAPI.GDI32_DeleteObject(Me.CurrentFontHandle)
            CurrentFontHandle = 0
            Set Font = Nothing
        End Sub
        
        Friend Sub SetFontInitData(ByVal Font As StdFont)   ' used by control array initialization
            With Font
                FontBoldINIT = .Bold
                FontItalicINIT = .Italic
                FontNameINIT = .Name
                FontSizeINIT = CSng(.Size)
                FontStrikethruINIT = .Strikethrough
                FontUnderlineINIT = .Underline
            End With
        End Sub
                        
        [Serialize(False)]
        Public Property Get FontBold() As Boolean
            Return Me.Font.Bold
        End Property
        [Serialize(False)]
        Public Property Let FontBold(ByVal Value As Boolean)
            Me.Font.Bold = Value
        End Property
        
        [Serialize(False)]
        Public Property Get FontItalic() As Boolean
            Return Me.Font.Italic
        End Property
        [Serialize(False)]
        Public Property Let FontItalic(ByVal Value As Boolean)
            Me.Font.Italic = Value
        End Property
        
        [Serialize(False)]
        Public Property Get FontName() As String
            Return Me.Font.Name
        End Property
        [Serialize(False)]
        Public Property Let FontName(ByVal Value As String)
            Me.Font.Name = Value
        End Property
        
        [Serialize(False)]
        Public Property Get FontSize() As Single
            Return CSng(Me.Font.Size)
        End Property
        [Serialize(False)]
        Public Property Let FontSize(ByVal Value As Single)
            Me.Font.Size = Value
        End Property
        
        [Serialize(False)]
        Public Property Get FontStrikethru() As Boolean
            Return Me.Font.Strikethrough
        End Property
        [Serialize(False)]
        Public Property Let FontStrikethru(ByVal Value As Boolean)
            Me.Font.Strikethrough = Value
        End Property
        
        [Serialize(False)]
        Public Property Get FontUnderline() As Boolean
            Return Me.Font.Underline
        End Property
        [Serialize(False)]
        Public Property Let FontUnderline(ByVal Value As Boolean)
            Me.Font.Underline = Value
        End Property
    
        Sub Class_Terminate()
    '    Debug.Print "*** DELETING FONT HANDLE: " & Me.CurrentFontHandle
            If Me.CurrentFontHandle <> 0 Then WindowsAPI.GDI32_DeleteObject(Me.CurrentFontHandle)
            CurrentFontHandle = 0
        End Sub
        
        Friend Sub InternalSyncFontNow()
            SyncFontProperties()
        End Sub
         
        Private Sub SyncFont() _
               Handles Font.OnPropertySet

            Dim oldFontHandle As LongPtr = Me.CurrentFontHandle
            If Me.Font IsNot Nothing Then Me.CurrentFontHandle = WindowsAPI.USER32_SetFont(OuterOwner.RootWindowElementBase, CType(Of IFont)(Me.Font))
            If oldFontHandle <> 0 Then WindowsAPI.GDI32_DeleteObject(oldFontHandle)
        End Sub
    
        Private Sub Font_FontChanged(ByVal PropertyName As String) _
                Handles Font.FontChanged
            
            SyncFont
            InternalFontChangeCount += 1
        End Sub
        
        Friend Sub InitializeOLEFont()
            Dim NewFont As StdFont = New StdFont
            With NewFont
                .Bold = Me.FontBoldINIT
                .Italic = Me.FontItalicINIT
                .Name = Me.FontNameINIT
                .Size = Me.FontSizeINIT
                .Strikethrough = Me.FontStrikethruINIT
                .Underline = Me.FontUnderlineINIT
            End With
            Dim font As Any = CType(Of IFont)(NewFont)
            font.SetRatio(OuterOwner.RootWindowElementBase.DPI, 2540)
            Set Me.Font = NewFont
        End Sub
    
        Friend Function GetFontMetrics() As TEXTMETRIC
            If Me.Font Is Nothing Then
                InitializeOLEFont
            End If
        
            Dim font As Any = CType(Of IFont)(Me.Font)
            Dim hdc As LongPtr = WindowsAPI.GDI32_CreateCompatibleDC()
            font.SetRatio(OuterOwner.RootWindowElementBase.DPI, 2540)
            Dim oldFont As LongPtr = WindowsAPI.GDI32_SelectObject(hdc, font.hFont)
            WindowsAPI.GDI32_GetTextMetrics(hdc, GetFontMetrics)
            WindowsAPI.GDI32_SelectObject(hdc, oldFont)
            WindowsAPI.GDI32_DeleteDC(hdc)
        End Function
    
        Friend Sub SyncFontProperties()
            If Me.Font Is Nothing Then
                InitializeOLEFont
            End If
            SyncFont()
        End Sub
        
End Class