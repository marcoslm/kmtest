Private Module BorderOptionsConstants

    Type BorderOption
        Size As Long
        Padding As Long
        Color As OLE_COLOR
    End Type
    
    Type BorderOptions
        Left As BorderOption
        Top As BorderOption
        Right As BorderOption
        Bottom As BorderOption
    End Type
        
    Public Sub DrawRect(hdc As LongPtr, x1 As Long, y1 As Long, x2 As Long, y2 As Long, Color As OLE_COLOR)
        Dim borderColor As Long = TranslateColor(Color)
        Dim pen As LongPtr

        Dim brush As LongPtr = WinNativeFormsBASE.CreateSolidBrush(borderColor)
        rect.Left = x1
        rect.Top = y1
        rect.Right = x2
        rect.Bottom = y2
        Dim rect As WinNativeFormsBASE.RECT
        WinNativeFormsBASE.FillRect(hdc, rect, brush)
        
        WinNativeFormsBASE.DeleteObject(brush)
    End Sub
    
    Public Sub CalcBorderTotalSizes(ByRef options As BorderOptions, ByVal UnitPixelScale As Double, ByRef outBorderHSize As Long, ByRef outBorderVSize As Long)
        With options
            Dim BorderLeftSize As Long = CLng(.Left.Size * UnitPixelScale) + CLng(.Left.Padding * UnitPixelScale)
            Dim BorderTopSize As Long = CLng(.Top.Size * UnitPixelScale) + CLng(.Top.Padding * UnitPixelScale)
            Dim BorderRightSize As Long = CLng(.Right.Size * UnitPixelScale) + CLng(.Right.Padding * UnitPixelScale)
            Dim BorderBottomSize As Long = CLng(.Bottom.Size * UnitPixelScale) + CLng(.Bottom.Padding * UnitPixelScale)
        End With
        outBorderHSize = BorderLeftSize + BorderRightSize
        outBorderVSize = BorderTopSize + BorderBottomSize
    End Sub

    Public Sub DrawBorderOptionsAndReduceRect(ByRef options As BorderOptions, ByVal hdc As LongPtr, rect As WinNativeFormsBASE.RECT, ByVal UnitPixelScale As Double)
        ' we use FillRect rather than drawing lines, as that produces better results than GDI line drawing
        ' due to the way GDI draws lines from a central pen position
                    
        Dim BorderLeftSize As Long = CLng(options.Left.Size * UnitPixelScale)
        Dim BorderTopSize As Long = CLng(options.Top.Size * UnitPixelScale)
        Dim BorderRightSize As Long = CLng(options.Right.Size * UnitPixelScale)
        Dim BorderBottomSize As Long = CLng(options.Bottom.Size * UnitPixelScale)
                    
        If BorderLeftSize < 0 Then BorderLeftSize = 0
        If BorderTopSize < 0 Then BorderTopSize = 0
        If BorderRightSize < 0 Then BorderRightSize = 0
        If BorderBottomSize < 0 Then BorderBottomSize = 0
        
        Dim BorderPaddingLeft As Long = CLng(options.Left.Padding * UnitPixelScale)
        Dim BorderPaddingTop As Long = CLng(options.Top.Padding * UnitPixelScale)
        Dim BorderPaddingRight As Long = CLng(options.Right.Padding * UnitPixelScale)
        Dim BorderPaddingBottom As Long = CLng(options.Bottom.Padding * UnitPixelScale)
        
        If BorderPaddingLeft < 0 Then BorderPaddingLeft = 0
        If BorderPaddingTop < 0 Then BorderPaddingTop = 0
        If BorderPaddingRight < 0 Then BorderPaddingRight = 0
        If BorderPaddingBottom < 0 Then BorderPaddingBottom = 0
                
        Dim width As Long = rect.Right - rect.Left
        Dim height As Long = rect.Bottom - rect.Top
                        
        If BorderLeftSize > width Then
            BorderLeftSize = width
        End If
        If BorderRightSize > width Then
            BorderRightSize = width
        End If
        If BorderTopSize > height Then
            BorderTopSize = height
        End If
        If BorderBottomSize > height Then
            BorderBottomSize = height
        End If
                    
        DrawRect(hdc, rect.Left, rect.Top, rect.Left + BorderLeftSize, rect.Bottom, options.Left.Color)
        DrawRect(hdc, rect.Right - BorderRightSize, rect.Top, rect.Right, rect.Bottom, options.Right.Color)
        DrawRect(hdc, rect.Left, rect.Top, rect.Right, rect.Top + BorderTopSize, options.Top.Color)
        DrawRect(hdc, rect.Left, rect.Bottom - BorderBottomSize, rect.Right, rect.Bottom, options.Bottom.Color)
                    
        rect.Left += BorderLeftSize + BorderPaddingLeft
        rect.Right -= BorderRightSize + BorderPaddingRight
        rect.Top += BorderTopSize + BorderPaddingTop
        rect.Bottom -= BorderBottomSize + BorderPaddingBottom
                    
        If rect.Right < rect.Left Then
            rect.Right = rect.Left
        End If
                    
        If rect.Bottom < rect.Top Then
            rect.Bottom = rect.Top
        End If
    End Sub
    
End Module

[COMCreatable(False)]
' Wrappers for the UDT members.  UDTs used for general efficiency, but expose a class if accessed at runtime.
Class BorderOptionClass
    Private OwnerControl As Control         ' hold a reference to this to ensure BorderOptionPtr doesn't go out of scope
    Private BorderOptionPtr As LongPtr
    
    Sub New(OwnerControl As Control, ByVal BorderOptionPtr As LongPtr)
        Set Me.OwnerControl = OwnerControl
        Me.BorderOptionPtr = BorderOptionPtr
    End Sub
    
    Property Get Size() As Long
        Return CType(Of BorderOption)(BorderOptionPtr).Size
    End Property
    
    Property Let Size(Value As Long)
        CType(Of BorderOption)(BorderOptionPtr).Size = Value
        Me.OwnerControl.Refresh
    End Property
    
    Property Get Padding() As Long
        Return CType(Of BorderOption)(BorderOptionPtr).Padding
    End Property
    
    Property Let Padding(Value As Long)
        CType(Of BorderOption)(BorderOptionPtr).Padding = Value
        Me.OwnerControl.Refresh
    End Property
    
    Property Get Color() As OLE_COLOR
        Return CType(Of BorderOption)(BorderOptionPtr).Color
    End Property
    
    Property Let Color(Value As OLE_COLOR)
        CType(Of BorderOption)(BorderOptionPtr).Color = Value
        Me.OwnerControl.Refresh
    End Property
End Class
    
[COMCreatable(False)]
' Wrappers for the UDT members.  UDTs used for general efficiency, but expose a class if accessed at runtime.
Class BorderOptionsClass
    Private OwnerControl As Control     ' hold a reference to this to ensure LeftPtr etc doesn't go out of scope
    Private LeftPtr As LongPtr
    Private TopPtr As LongPtr
    Private RightPtr As LongPtr
    Private BottomPtr As LongPtr
    
    Sub New(OwnerControl As Control, ByRef BorderOptions As BorderOptions)
        Set Me.OwnerControl = OwnerControl
        Me.LeftPtr = VarPtr(BorderOptions.Left)
        Me.TopPtr = VarPtr(BorderOptions.Top)
        Me.RightPtr = VarPtr(BorderOptions.Right)
        Me.BottomPtr = VarPtr(BorderOptions.Bottom)
    End Sub
    
    Property Get Left() As BorderOptionClass
        Return New BorderOptionClass(OwnerControl, LeftPtr)
    End Property
    
    Property Get Top() As BorderOptionClass
        Return New BorderOptionClass(OwnerControl, TopPtr)
    End Property
    
    Property Get Right() As BorderOptionClass
        Return New BorderOptionClass(OwnerControl, RightPtr)
    End Property
    
    Property Get Bottom() As BorderOptionClass
        Return New BorderOptionClass(OwnerControl, BottomPtr)
    End Property
End Class