Module InternalStuff
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function CreateGlobalObject Lib "<hiddenmodule>" Alias "#29" () As stdole.IUnknown
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetApphInstance Lib "<hiddenmodule>" Alias "#58" () As LongPtr

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppThreadID Lib "<hiddenmodule>" Alias "#59" () As Long
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppPath Lib "<hiddenmodule>" Alias "#60" () As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppEXEName Lib "<hiddenmodule>" Alias "#61" () As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppIsInIDE Lib "<hiddenmodule>" Alias "#62" () As Boolean
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppMajor Lib "<hiddenmodule>" Alias "#63" () As Integer
            
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppMinor Lib "<hiddenmodule>" Alias "#64" () As Integer
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppRevision Lib "<hiddenmodule>" Alias "#65" () As Integer
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppBuild Lib "<hiddenmodule>" Alias "#66" () As Integer
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppModulePath Lib "<hiddenmodule>" Alias "#67" () As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppComments Lib "<hiddenmodule>" Alias "#68" () As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppCompanyName Lib "<hiddenmodule>" Alias "#69" () As String

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppFileDescription Lib "<hiddenmodule>" Alias "#70" () As String
        
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppLegalCopyright Lib "<hiddenmodule>" Alias "#71" () As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppLegalTrademarks Lib "<hiddenmodule>" Alias "#72" () As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppProductName Lib "<hiddenmodule>" Alias "#73" () As String

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppLastBuildPath Lib "<hiddenmodule>" Alias "#74" () As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppPrevInstance Lib "<hiddenmodule>" Alias "#75" () As Boolean
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppTitle Lib "<hiddenmodule>" Alias "#76" () As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Sub LetAppTitle Lib "<hiddenmodule>" Alias "#77" (ByVal Value As String)
                
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppHelpFile Lib "<hiddenmodule>" Alias "#78" () As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Sub LetAppHelpFile Lib "<hiddenmodule>" Alias "#79" (ByVal Value As String)
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GetAppLogMode Lib "<hiddenmodule>" Alias "#80" () As LogModeConstants
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Sub ClipboardClear Lib "<hiddenmodule>" Alias "#81" ()
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function ClipboardGetData Lib "<hiddenmodule>" Alias "#82" ([TypeHint(ClipboardConstants)] ByVal Format As Variant) As stdole.StdPicture
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Sub ClipboardSetData Lib "<hiddenmodule>" Alias "#83" (ByVal Picture As stdole.StdPicture, [TypeHint(ClipboardConstants)] Optional ByVal Format As Variant)
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function ClipboardGetText Lib "<hiddenmodule>" Alias "#84" ([TypeHint(ClipboardConstants)] Optional ByVal Format As Variant) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Sub ClipboardSetText Lib "<hiddenmodule>" Alias "#85" (ByVal Str As String, [TypeHint(ClipboardConstants)] Optional ByVal Format As Variant)
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function ClipboardGetFormat Lib "<hiddenmodule>" Alias "#86" ([TypeHint(ClipboardConstants)] ByVal Format As Integer) As Boolean
    
    
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Property Get ScreenGetHeight Lib "<hiddenmodule>" Alias "#87" () As Single
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Property Get ScreenGetFontCount Lib "<hiddenmodule>" Alias "#88" () As Integer
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Property Get ScreenGetFonts Lib "<hiddenmodule>" Alias "#89" (ByVal Index As Integer) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Property Get ScreenGetActiveForm Lib "<hiddenmodule>" Alias "#90" () As Form
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Property Get ScreenGetActiveControl Lib "<hiddenmodule>" Alias "#91" () As Control
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    [TypeHint(MousePointerConstants)]
    Public DeclareWide PtrSafe Property Get ScreenGetMousePointer Lib "<hiddenmodule>" Alias "#92" () As Integer
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Sub ScreenLetMousePointer Lib "<hiddenmodule>" Alias "#93" ([TypeHint(MousePointerConstants)] ByVal Value As Integer)
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function ScreenGetTwipsPerPixelX Lib "<hiddenmodule>" Alias "#94" () As Single
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function ScreenGetTwipsPerPixelY Lib "<hiddenmodule>" Alias "#95" () As Single
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Sub ScreenLetMouseIcon Lib "<hiddenmodule>" Alias "#96" (ByVal Value As StdPicture)
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Property Get ScreenGetMouseIcon Lib "<hiddenmodule>" Alias "#97" () As StdPicture
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Sub ScreenSetMouseIcon Lib "<hiddenmodule>" Alias "#98" (ByVal Value As StdPicture)
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Property Get ScreenGetWidth Lib "<hiddenmodule>" Alias "#99" () As Single

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Property Get FormsGetCount Lib "<hiddenmodule>" Alias "#100" () As Long
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Property Get FormsGetItem Lib "<hiddenmodule>" Alias "#101" (ByVal Index As Long) As Form
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Property Get FormsAdd Lib "<hiddenmodule>" Alias "#102" (ByVal Name As String) As Form

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GlobalLoadResPicture Lib "<hiddenmodule>" Alias "#103" (ByVal id As Variant, [TypeHint(LoadResConstants)] ByVal restype As Integer, Optional ByVal width As Long = 0, Optional ByVal height As Long) As stdole.IPictureDisp

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GlobalLoadResData Lib "<hiddenmodule>" Alias "#104" (ByVal id As Variant, ByVal Type As Variant) As Variant
        
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GlobalLoadResString Lib "<hiddenmodule>" Alias "#105" (ByVal id As Long) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GlobalLoadResIdList Lib "<hiddenmodule>" Alias "#106" (ByVal Type As Variant) As Variant

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function GlobalLoadPicture Lib "<hiddenmodule>" Alias "#107" (Optional ByVal FileName As Variant, [TypeHint(LoadPictureSizeConstants)] Optional ByVal Size As Variant, [TypeHint(LoadPictureColorConstants)] Optional ByVal ColorDepth As Variant, Optional ByVal X As Variant, Optional ByVal Y As Variant) As stdole.IPictureDisp
        
    ' [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    ' [Description("")]
    ' [Hidden, Restricted]
    ' [Unimplemented]
    ' Public DeclareWide PtrSafe Function GlobalGetPrinter Lib "<hiddenmodule>" Alias "#108" () As Printer
        
    ' [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    ' [Description("")]
    ' [Hidden, Restricted]
    ' [Unimplemented]
    ' Public DeclareWide PtrSafe Sub GlobalLetPrinter Lib "<hiddenmodule>" Alias "#109" (ByVal rhs As Printer)
    
    ' [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    ' [Description("")]
    ' [Hidden, Restricted]
    ' [Unimplemented]
    ' Public DeclareWide PtrSafe Property Get GlobalGetPrinters Lib "<hiddenmodule>" Alias "#110" () As Object
        
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    [SpecialCompilerBinding(1)]
    Public DeclareWide PtrSafe Sub GlobalLoad Lib "<hiddenmodule>" Alias "#111" (ByVal object As Object)

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    [SpecialCompilerBinding(2)]
    Public DeclareWide PtrSafe Sub GlobalUnload Lib "<hiddenmodule>" Alias "#112" (ByVal object As Object)
                    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function FormsNewEnum Lib "<hiddenmodule>" Alias "#113" () As stdole.IUnknown
                        
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    [Hidden, Restricted]
    Public DeclareWide PtrSafe Function IsFileFormatHLP Lib "<hiddenmodule>" Alias "#114" (ByRef FilePath As String) As Boolean
                            
End Module

Private Module Miscellaneous

    Private DeclareWide PtrSafe Function StringFromGUID2 Lib "ole32" (ByRef rguid As WinNativeFormsBASE.GUID2, ByVal lpsz As LongPtr, ByVal cchMax As Long) As Long

    Public Function GuidToString(guid As WinNativeFormsBASE.GUID2) As String
        Dim retVal As String = String$(38, " ")
        StringFromGUID2(guid, StrPtr(retVal), 39)
        Return retVal
    End Function

    Public Type ACCEL
        fVirt As Byte                ' Also called the flags field 
        key As Integer
        cmd As Integer
    End Type
    
    Public Enum DISPID_AMBIENT
        DISPID_AUTOSIZE = -500
        DISPID_BACKCOLOR = -501
        DISPID_BACKSTYLE = -502
        DISPID_BORDERCOLOR = -503
        DISPID_BORDERSTYLE = -504
        DISPID_BORDERWIDTH = -505
        DISPID_DRAWMODE = -507
        DISPID_DRAWSTYLE = -508
        DISPID_DRAWWIDTH = -509
        DISPID_FILLCOLOR = -510
        DISPID_FILLSTYLE = -511
        DISPID_FONT = -512
        DISPID_FORECOLOR = -513
        DISPID_ENABLED = -514
        DISPID_HWND = -515
        DISPID_TABSTOP = -516
        DISPID_TEXT = -517
        DISPID_CAPTION = -518
        DISPID_BORDERVISIBLE = -519
        DISPID_APPEARANCE = -520
        DISPID_MOUSEPOINTER = -521
        DISPID_MOUSEICON = -522
        DISPID_PICTURE = -523
        DISPID_VALID = -524
        DISPID_READYSTATE = -525
        DISPID_LISTINDEX = -526
        DISPID_SELECTED = -527
        DISPID_LIST = -528
        DISPID_COLUMN = -529
        DISPID_LISTCOUNT = -531
        DISPID_MULTISELECT = -532
        DISPID_MAXLENGTH = -533
        DISPID_PASSWORDCHAR = -534
        DISPID_SCROLLBARS = -535
        DISPID_WORDWRAP = -536
        DISPID_MULTILINE = -537
        DISPID_NUMBEROFROWS = -538
        DISPID_NUMBEROFCOLUMNS = -539
        DISPID_DISPLAYSTYLE = -540
        DISPID_GROUPNAME = -541
        DISPID_IMEMODE = -542
        DISPID_ACCELERATOR = -543
        DISPID_ENTERKEYBEHAVIOR = -544
        DISPID_TABKEYBEHAVIOR = -545
        DISPID_SELTEXT = -546
        DISPID_SELSTART = -547
        DISPID_SELLENGTH = -548

        DISPID_REFRESH = -550
        DISPID_DOCLICK = -551
        DISPID_ABOUTBOX = -552
        DISPID_ADDITEM = -553
        DISPID_CLEAR = -554
        DISPID_REMOVEITEM = -555

        DISPID_CLICK = -600
        DISPID_DBLCLICK = -601
        DISPID_KEYDOWN = -602
        DISPID_KEYPRESS = -603
        DISPID_KEYUP = -604
        DISPID_MOUSEDOWN = -605
        DISPID_MOUSEMOVE = -606
        DISPID_MOUSEUP = -607
        DISPID_ERROREVENT = -608
        DISPID_READYSTATECHANGE = -609
        DISPID_CLICK_VALUE = -610
        DISPID_RIGHTTOLEFT = -611
        DISPID_TOPTOBOTTOM = -612
        DISPID_THIS = -613

        DISPID_AMBIENT_BACKCOLOR = -701
        DISPID_AMBIENT_DISPLAYNAME = -702
        DISPID_AMBIENT_FONT = -703
        DISPID_AMBIENT_FORECOLOR = -704
        DISPID_AMBIENT_LOCALEID = -705
        DISPID_AMBIENT_MESSAGEREFLECT = -706
        DISPID_AMBIENT_SCALEUNITS = -707
        DISPID_AMBIENT_TEXTALIGN = -708
        DISPID_AMBIENT_USERMODE = -709
        DISPID_AMBIENT_UIDEAD = -710
        DISPID_AMBIENT_SHOWGRABHANDLES = -711
        DISPID_AMBIENT_SHOWHATCHING = -712
        DISPID_AMBIENT_DISPLAYASDEFAULT = -713
        DISPID_AMBIENT_SUPPORTSMNEMONICS = -714
        DISPID_AMBIENT_AUTOCLIP = -715
        DISPID_AMBIENT_APPEARANCE = -716
        DISPID_AMBIENT_CODEPAGE = -725
        DISPID_AMBIENT_PALETTE = -726
        DISPID_AMBIENT_CHARSET = -727
        DISPID_AMBIENT_TRANSFERPRIORITY = -728
        DISPID_AMBIENT_RIGHTTOLEFT = -732
        DISPID_AMBIENT_TOPTOBOTTOM = -733
        
        DISPID_NAME = -800
        DISPID_DELETE = -801
        DISPID_OBJECT = -802
        DISPID_PARENT = -803

        DISPID_FONT_NAME = 0
        DISPID_FONT_SIZE = 2
        DISPID_FONT_BOLD = 3
        DISPID_FONT_ITALIC = 4
        DISPID_FONT_UNDER = 5
        DISPID_FONT_STRIKE = 6
        DISPID_FONT_WEIGHT = 7
        DISPID_FONT_CHARSET = 8
        DISPID_FONT_CHANGED = 9

        DISPID_PICT_HANDLE = 0
        DISPID_PICT_HPAL = 2
        DISPID_PICT_TYPE = 3
        DISPID_PICT_WIDTH = 4
        DISPID_PICT_HEIGHT = 5
        DISPID_PICT_RENDER = 6
    End Enum
    
    Public Enum OLEMISC
        OLEMISC_RECOMPOSEONRESIZE = &H1
        OLEMISC_ONLYICONIC = &H2
        OLEMISC_INSERTNOTREPLACE = &H4
        OLEMISC_STATIC = &H8
        OLEMISC_CANTLINKINSIDE = &H10
        OLEMISC_CANLINKBYOLE1 = &H20
        OLEMISC_ISLINKOBJECT = &H40
        OLEMISC_INSIDEOUT = &H80
        OLEMISC_ACTIVATEWHENVISIBLE = &H100
        OLEMISC_RENDERINGISDEVICEINDEPENDENT = &H200
        OLEMISC_INVISIBLEATRUNTIME = &H400
        OLEMISC_ALWAYSRUN = &H800
        OLEMISC_ACTSLIKEBUTTON = &H1000
        OLEMISC_ACTSLIKELABEL = &H2000
        OLEMISC_NOUIACTIVATE = &H4000
        OLEMISC_ALIGNABLE = &H8000&
        OLEMISC_SIMPLEFRAME = &H10000
        OLEMISC_SETCLIENTSITEFIRST = &H20000
        OLEMISC_IMEMODE = &H40000
        OLEMISC_IGNOREACTIVATEWHENVISIBLE = &H80000
        OLEMISC_WANTSTOMENUMERGE = &H100000
        OLEMISC_SUPPORTSMULTILEVELUNDO = &H200000
    End Enum
    
    Public Enum BorderStyles
        BDR_RAISEDOUTER = 1
        BDR_SUNKENOUTER = 2
        BDR_RAISEDINNER = 4
        BDR_SUNKENINNER = 8
        
        BDR_OUTER = (BDR_RAISEDOUTER Or BDR_SUNKENOUTER)
        BDR_INNER = (BDR_RAISEDINNER Or BDR_SUNKENINNER)
        BDR_RAISED = (BDR_RAISEDOUTER Or BDR_RAISEDINNER)
        BDR_SUNKEN = (BDR_SUNKENOUTER Or BDR_SUNKENINNER)
        
        EDGE_RAISED = (BDR_RAISEDOUTER Or BDR_RAISEDINNER)
        EDGE_SUNKEN = (BDR_SUNKENOUTER Or BDR_SUNKENINNER)
        EDGE_ETCHED = (BDR_SUNKENOUTER Or BDR_RAISEDINNER)
        EDGE_BUMP = (BDR_RAISEDOUTER Or BDR_SUNKENINNER)
    End Enum
    
    Public Enum BorderFlags
        BF_LEFT = 1
        BF_TOP = 2
        BF_RIGHT = 4
        BF_BOTTOM = 8
        BF_DIAGONAL = 16
        
        BF_MIDDLE = &H0800&
        BF_SOFT = &H1000&
        BF_ADJUST = &H2000&
        BF_FLAT = &H4000&
        BF_MONO = &H8000&

        BF_TOPLEFT = BF_TOP Or BF_LEFT
        BF_TOPRIGHT = BF_TOP Or BF_RIGHT
        BF_BOTTOMLEFT = BF_BOTTOM Or BF_LEFT
        BF_BOTTOMRIGHT = BF_BOTTOM Or BF_RIGHT
        BF_RECT = BF_LEFT Or BF_TOP Or BF_RIGHT Or BF_BOTTOM
        
        BF_DIAGONAL_ENDTOPRIGHT = BF_DIAGONAL Or BF_TOP Or BF_RIGHT
        BF_DIAGONAL_ENDTOPLEFT = BF_DIAGONAL Or BF_TOP Or BF_LEFT
        BF_DIAGONAL_ENDBOTTOMLEFT = BF_DIAGONAL Or BF_BOTTOM Or BF_LEFT
        BF_DIAGONAL_ENDBOTTOMRIGHT = BF_DIAGONAL Or BF_BOTTOM Or BF_RIGHT
    End Enum
        
    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function USER32_CreateAcceleratorTableW Lib "user32" Alias "CreateAcceleratorTableW" (ByRef paccel As ACCEL, ByVal cCount As Long) As LongPtr
    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function USER32_DestroyAcceleratorTable Lib "user32" Alias "DestroyAcceleratorTable" (ByVal accelPtr As LongPtr) As Long
    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function USER32_BringWindowToTop Lib "user32" Alias "BringWindowToTop" (ByVal hwnd As LongPtr) As Long

    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function GDI32_RoundRect Lib "gdi32" Alias "RoundRect" (ByVal hdc As LongPtr, ByVal left As Long, ByVal top As Long, ByVal right As Long, ByVal bottom As Long, ByVal width As Long, ByVal Height As Long) As Long
    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function GDI32_Rectangle Lib "gdi32" Alias "Rectangle" (ByVal hdc As LongPtr, ByVal left As Long, ByVal top As Long, ByVal right As Long, ByVal bottom As Long) As Long
    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function GDI32_Ellipse Lib "gdi32" Alias "Ellipse" (ByVal hdc As LongPtr, ByVal left As Long, ByVal top As Long, ByVal right As Long, ByVal bottom As Long) As Long
    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function GDI32_CreatePen Lib "gdi32" Alias "CreatePen" (ByVal iStyle As Long, ByVal cWidth As Long, ByVal color As Long) As LongPtr
    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function GDI32_SetROP2 Lib "gdi32" Alias "SetROP2" (ByVal hdc As LongPtr, ByVal rop2 As Long) As Long
    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function GDI32_CreateHatchBrush Lib "gdi32" Alias "CreateHatchBrush" (ByVal iHatch As Long, ByVal color As Long) As LongPtr
    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function GDI32_GetStockObject Lib "gdi32" Alias "GetStockObject" (ByVal i As Long) As LongPtr
    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function GDI32_Polygon Lib "gdi32" Alias "Polygon" (ByVal hdc As LongPtr, ByRef points As Any, ByVal CountOfPoints As Long) As Long
    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function GDI32_MoveToEx Lib "gdi32" Alias "MoveToEx" (ByVal hdc As LongPtr, ByVal x As Long, ByVal y As Long, ByVal lppt As LongPtr) As Long
    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function GDI32_LineTo Lib "gdi32" Alias "LineTo" (ByVal hdc As LongPtr, ByVal x As Long, ByVal y As Long) As Long

    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function GDI32_CreateRectRgn Lib "gdi32" Alias "CreateRectRgn" (ByVal left As Long, ByVal top As Long, ByVal right As Long, ByVal bottom As Long) As Long
    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function GDI32_CreateRoundRectRgn Lib "gdi32" Alias "CreateRoundRectRgn" (ByVal left As Long, ByVal top As Long, ByVal right As Long, ByVal bottom As Long, ByVal w As Long, ByVal h As Long) As Long
    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function GDI32_CreateEllipticRgn Lib "gdi32" Alias "CreateEllipticRgn" (ByVal left As Long, ByVal top As Long, ByVal right As Long, ByVal bottom As Long) As Long
    [UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function GDI32_CreatePolygonRgn Lib "gdi32" Alias "CreatePolygonRgn" (ByRef points As Any, ByVal CountOfPoints As Long, ByVal iMode As Long) As Long
    
    Public Const HS_HORIZONTAL As Long = 0
    Public Const HS_VERTICAL As Long = 1
    Public Const HS_FDIAGONAL As Long = 2
    Public Const HS_BDIAGONAL As Long = 3
    Public Const HS_CROSS As Long = 4
    Public Const HS_DIAGCROSS As Long = 5

    Public Const NULL_BRUSH As Long = 5

    Public Const PS_SOLID As Long = 0
    Public Const PS_DASH As Long = 1
    Public Const PS_DOT As Long = 2
    Public Const PS_DASHDOT As Long = 3
    Public Const PS_DASHDOTDOT As Long = 4
    Public Const PS_NULL As Long = 5
    Public Const PS_INSIDEFRAME As Long = 6

    Type PointerUDTLong
        Value As Long
    End Type
    Private Sub WriteMemLongInner(ByRef PointerUDTLong As PointerUDTLong, ByVal value As Long)
        PointerUDTLong.Value = value
    End Sub
    Public Sub WriteMemLong(ByVal valuePointer As LongPtr, ByVal value As Long)
        If valuePointer <> 0 Then
            WriteMemLongInner(valuePointer, value)
        End If
    End Sub

    Type PointerUDT
        Value As LongPtr
    End Type
    Private Sub SetOutParamToNothingInner(ByRef PointerUDT As PointerUDT)
        PointerUDT.Value = 0
    End Sub
    Public Sub SetOutParamToNothing(ByVal valuePointer As LongPtr)
        Dim nothingObject As LongPtr = 0
        If valuePointer <> 0 Then
            SetOutParamToNothingInner(valuePointer)
        End If
    End Sub
    
    Private globalEmptyString As String ' = ""   FIXME not working in compiled builds
    Public Function StrPtrSafe(ByRef s As String) As LongPtr
        Dim retVal As LongPtr = StrPtr(s)
        If retVal = 0 Then retVal = StrPtr(globalEmptyString)
        If retVal = 0 Then
            globalEmptyString = ""
            retVal = StrPtr(globalEmptyString)
        End If
        Return retVal
    End Function
    
    Public Sub SyncBorderStyle(objControl As Control)
        
        Dim styles As Long = WinNativeFormsBASE.GetWindowLongW(CLngPtr(objControl.hwnd), WinNativeFormsBASE.WindowProperties.GWL_STYLE)
        Dim exStyles As Long = WinNativeFormsBASE.GetWindowLongW(CLngPtr(objControl.hwnd), WinNativeFormsBASE.WindowProperties.GWL_EXSTYLE)
        
        styles = styles And Not WinNativeFormsBASE.WS_BORDER
        exStyles = exStyles And Not WinNativeFormsBASE.WS_EX_CLIENTEDGE
        
        If objControl.BorderStyle = ControlBorderStyleConstants.vbFixedSingleBorder Then
            If objControl.Appearance = AppearanceConstants.vbAppear3d Then
                exStyles += WinNativeFormsBASE.GeneralConsts.WindowExtendedStyles.WS_EX_CLIENTEDGE
            Else
                styles += WinNativeFormsBASE.GeneralConsts.WindowStyles.WS_BORDER
            End If
        End If
        
        WinNativeFormsBASE.SetWindowLongW(CLngPtr(objControl.hwnd), WinNativeFormsBASE.WindowProperties.GWL_STYLE, styles)
        WinNativeFormsBASE.SetWindowLongW(CLngPtr(objControl.hwnd), WinNativeFormsBASE.WindowProperties.GWL_EXSTYLE, exStyles)
        
        'this is needed to ensure windows cached stuff is updated after changing GWL_STYLE
        WinNativeFormsBASE.SetWindowPos(CLngPtr(objControl.hwnd), 0&, 0, 0, 0, 0, WinNativeFormsBASE.SetWindowPosFlags.SWP_NOSIZE Or WinNativeFormsBASE.SetWindowPosFlags.SWP_NOMOVE Or WinNativeFormsBASE.SetWindowPosFlags.SWP_NOZORDER Or WinNativeFormsBASE.SetWindowPosFlags.SWP_FRAMECHANGED Or WinNativeFormsBASE.SetWindowPosFlags.SWP_NOACTIVATE)
    End Sub
    
    Public Function GetShiftState() As ShiftConstants
        If IsKeyPressed(vbKeyShift) Then GetShiftState += vbShiftMask
        If IsKeyPressed(vbKeyMenu) Then GetShiftState += vbAltMask
        If IsKeyPressed(vbKeyControl) Then GetShiftState += vbCtrlMask
    End Function
    
    Public Function IsKeyPressed(ByVal KeyCode As KeyCodeConstants) As Boolean
        Return WinNativeFormsBASE.GetAsyncKeyState(KeyCode) And &H8000&
    End Function

    Public Function CLngHandle(ByVal handle As LongPtr) As Long
        [_HiddenModule].GetMem4(VarPtr(handle), CLngHandle)
    End Function

    Public Function CommonGetFormWidth(ByRef WindowElement As WindowElement) As Double
        Dim newRect As WinNativeFormsBASE.RECT
        WinNativeFormsBASE.GetWindowRect(WindowElement.Handle, newRect)
        Return WindowElement.ScaleX(newRect.Right - newRect.Left, vbPixels, vbTwips)
    End Function
    
    Public Sub CommonSetFormWidth(ByRef WindowElement As WindowElement, BaseControlInfo As WinNativeFormsBASE.BaseControlInfo, ControlContext As WindowsControls.WindowsControlContext, ValueTwips As Double)
        ' Adjust Value to make it CLIENT width
        Dim widthDiff As Double
        Dim rectWindow As WinNativeFormsBASE.RECT
        Dim rectClient As WinNativeFormsBASE.RECT
        Dim hwnd As LongPtr = WindowElement.Handle
        WinNativeFormsBASE.GetWindowRect(hwnd, rectWindow)
        WinNativeFormsBASE.GetClientRect(hwnd, rectClient)
        widthDiff = WindowElement.ScaleX(((rectWindow.Right - rectWindow.Left) - (rectClient.Right - rectClient.Left)), vbPixels, vbScaledPixels)
        
        BaseControlInfo.PixelsWidth = WindowElement.ScaleX(CSng(ValueTwips), vbTwips, vbScaledPixels) - widthDiff
        ControlContext.ChangedPosition()
    End Sub
    
    Public Function CommonGetFormHeight(ByRef WindowElement As WindowElement) As Double
        Dim newRect As WinNativeFormsBASE.RECT
        WinNativeFormsBASE.GetWindowRect(WindowElement.Handle, newRect)
        Return WindowElement.ScaleY(newRect.Bottom - newRect.Top, vbPixels, vbTwips)
    End Function
    
    Public Sub CommonSetFormHeight(ByRef WindowElement As WindowElement, BaseControlInfo As WinNativeFormsBASE.BaseControlInfo, ControlContext As WindowsControls.WindowsControlContext, ValueTwips As Double)
        ' Adjust Value to make it CLIENT width
        Dim heightDiff As Double
        Dim rectWindow As WinNativeFormsBASE.RECT
        Dim rectClient As WinNativeFormsBASE.RECT
        Dim hwnd As LongPtr = WindowElement.Handle
        WinNativeFormsBASE.GetWindowRect(hwnd, rectWindow)
        WinNativeFormsBASE.GetClientRect(hwnd, rectClient)
        heightDiff = WindowElement.ScaleY(((rectWindow.Bottom - rectWindow.Top) - (rectClient.Bottom - rectClient.Top)), vbPixels, vbScaledPixels)
        
        BaseControlInfo.PixelsHeight = WindowElement.ScaleY(CSng(ValueTwips), vbTwips, vbScaledPixels) - heightDiff
        ControlContext.ChangedPosition()
    End Sub
    
    Public Sub CommonSyncScrollBarV(ByRef WindowElement As WindowsControls.WindowElement, ByVal RangeMax As Long)
        If WindowElement IsNot Nothing Then
            Dim scrollPageSize As Long = WinNativeFormsBASE.WindowsAPI.USER32_GetListVisibleCount(WindowElement)
            WinNativeFormsBASE.WindowsAPI.USER32_SetScrollRange(WindowElement, 0, RangeMax - 1, WinNativeFormsBASE.SB_VERT)   ' FIXME combine the two SetScroll* calls
            WinNativeFormsBASE.WindowsAPI.USER32_SetScrollPageSize(WindowElement, scrollPageSize, WinNativeFormsBASE.SB_VERT)
        End If
    End Sub
    
    Public Function CommonGetComboBoxStringByIndex(ByRef WindowElement As WindowsControls.WindowElement, ByVal Index As Long) As String
        ' FIXME error if out of range
        ' Note Index is limited to 32767 due to Win95/98/ME support (see docs for LB_GETTEXT)
        ' FIXME In the official matching _ListBox interface, we need to change Index to Integer
        Dim itemLength As Long = CLng(WinNativeFormsBASE.USER32_SendMessage(WindowElement, ComboBoxMessages.CB_GETLBTEXTLEN, Index, 0))
        Dim outValue As String = WinNativeFormsBASE.OLEAUT32_AllocateBSTR(vbNullString, itemLength)
        Dim realLength As Long = CLng(WinNativeFormsBASE.USER32_SendMessage(WindowElement, ComboBoxMessages.CB_GETLBTEXT, Index, StrPtr(outValue)))
        If realLength < itemLength Then outValue = VBA.Left$(outValue, realLength) ' for completeness, see docs for LB_GETTEXTLEN
        Return outValue
    End Function
    
    Public Function CommonGetListBoxStringByIndex(ByRef WindowElement As WindowsControls.WindowElement, ByVal Index As Long) As String
        ' FIXME error if out of range
        ' Note Index is limited to 32767 due to Win95/98/ME support (see docs for LB_GETTEXT)
        ' FIXME In the official matching _ListBox interface, we need to change Index to Integer
        Dim itemLength As Long = CLng(WinNativeFormsBASE.USER32_SendMessage(WindowElement, ListBoxMessages.LB_GETTEXTLEN, Index, 0))
        Dim outValue As String = WinNativeFormsBASE.OLEAUT32_AllocateBSTR(vbNullString, itemLength)
        Dim realLength As Long = CLng(WinNativeFormsBASE.USER32_SendMessage(WindowElement, ListBoxMessages.LB_GETTEXT, Index, StrPtr(outValue)))
        If realLength < itemLength Then outValue = VBA.Left$(outValue, realLength) ' for completeness, see docs for LB_GETTEXTLEN
        Return outValue
    End Function
    
    Public Sub CommonGetScreenCursorPos(ByRef WindowElement As WindowsControls.WindowElement, ByRef out As POINT)
        WinNativeFormsBASE.GetCursorPos(out)
        WinNativeFormsBASE.ScreenToClient(WindowElement.Handle, out)
    End Sub
    
    Public Sub CommonFillRect(ByVal hdc As LongPtr, ByRef rect As WinNativeFormsBASE.RECT, ByVal Color As OLE_COLOR)
        Dim brush As LongPtr = WinNativeFormsBASE.WindowsAPI.GDI32_CreateSolidBrushColor(TranslateColor(Color))
        WinNativeFormsBASE.WindowsAPI.USER32_FillRectangle(hdc, rect, brush)
        WinNativeFormsBASE.WindowsAPI.GDI32_DeleteObject(brush)
    End Sub
    
    Public Sub CommonTextOut(ByVal hdc As LongPtr, ByVal itemText As String, ByVal Color As OLE_COLOR, ByVal X As Long, ByVal Y As Long)
        Dim oldTextColor As Long = WinNativeFormsBASE.WindowsAPI.GDI32_SetTextForeColor(hdc, TranslateColor(Color))
        Dim oldBkMode As Long = WinNativeFormsBASE.WindowsAPI.GDI32_SetBackMode(hdc, 1)
        WinNativeFormsBASE.WindowsAPI.GDI32_TextOut(hdc, X, Y, itemText)
        WinNativeFormsBASE.WindowsAPI.GDI32_SetBackMode(hdc, oldBkMode)
        WinNativeFormsBASE.WindowsAPI.GDI32_SetTextForeColor(hdc, oldTextColor)
    End Sub
    
    Public Function CommonListboxAddOrInsert(ByRef WindowElement As WindowsControls.WindowElement, ByVal Value As String, Optional ByVal Index As Variant) As Long
        Dim strPointer As Any = StrPtrSafe(Value)
        If IsMissing(Index) Then
            Return CLng(WinNativeFormsBASE.USER32_SendMessage(WindowElement, ListBoxMessages.LB_ADDSTRING, 0, strPointer))()
        Else
            ' FIXME error when Index is out of range
            Return CLng(WinNativeFormsBASE.USER32_SendMessage(WindowElement, ListBoxMessages.LB_INSERTSTRING, CLng(Index), strPointer))
        End If
    End Function
    
    Public Function CommonComboboxAddOrInsert(ByRef WindowElement As WindowsControls.WindowElement, ByVal Value As String, Optional ByVal Index As Variant) As Long
        Dim strPointer As Any = StrPtrSafe(Value)
        If IsMissing(Index) Then
            Return CLng(WinNativeFormsBASE.USER32_SendMessage(WindowElement, ComboBoxMessages.CB_ADDSTRING, 0, strPointer))()
        Else
            ' FIXME error when Index is out of range
            Return CLng(WinNativeFormsBASE.USER32_SendMessage(WindowElement, ComboBoxMessages.CB_INSERTSTRING, CLng(Index), strPointer))
        End If
    End Function
    
    Public Sub CommonRedrawEraseInvalidate(ByRef WindowElement As WindowsControls.WindowElement)
        WinNativeFormsBASE.WindowsAPI.USER32_RedrawWindow(WindowElement, 0, 0, WinNativeFormsBASE.RDW_ERASE Or WinNativeFormsBASE.RDW_INVALIDATE)
    End Sub
    
    Public Sub CommonRedrawChildren(Ctl As Control)
        ' FIXME need better method.
        Dim Ctrl As Control
        For Each Ctrl In Ctl.Parent.Controls
            On Error Resume Next
                Dim isContainedByUs As Boolean = False
                isContainedByUs = Ctrl.Container Is Ctl
                If isContainedByUs Then
                    WinNativeFormsBASE.WindowsAPI.RedrawWindow(CLngPtr(Ctrl.Hwnd), 0, 0, WinNativeFormsBASE.RDW_ERASE Or WinNativeFormsBASE.RDW_INVALIDATE Or WinNativeFormsBASE.RDW_ERASENOW Or WinNativeFormsBASE.RDW_UPDATENOW Or WinNativeFormsBASE.RDW_FRAME)
                End If
        Next
        On Error GoTo 0
    End Sub
    
    Public Sub CommonHandleRedirectedPictureInterface(ByRef iid As WinNativeFormsBASE.GUID2, ByRef out As stdole.IUnknown, ByRef Ctl As Control)
        Dim guidString As String = GuidToString(iid)
            
        ' We should really implement the interfaces properly, but for now this will do
        If guidString = "{7BF80980-BF32-101A-8BBB-00AA00300CAB}" Then       ' IPicture  FIXME shit
            Dim iPicture As Any = CType(Of IPicture)(Ctl.Picture)
            [_HiddenModule].PutMemPtr(VarPtr(out), ObjPtr(iPicture))
            [_HiddenModule].vbaObjAddref(ObjPtr(iPicture))
        ElseIf guidString = "{7BF80981-BF32-101A-8BBB-00AA00300CAB}" Then       ' IPictureDisp FIXME shit
            Dim iPictureDisp As Any = CType(Of IPictureDisp)(Ctl.Picture)
            [_HiddenModule].PutMemPtr(VarPtr(out), ObjPtr(iPictureDisp))
            [_HiddenModule].vbaObjAddref(ObjPtr(iPictureDisp))
        End If
    End Sub
    
    Public Sub CommonInitFontRatio(ByRef NewFont As StdFont, ByRef WindowElement As WindowsControls.WindowElement)
        Dim font As IFont = NewFont
        font.SetRatio If(WindowElement IsNot Nothing, WindowElement.DPI, 96&), 2540
    End Sub
    
    Public Sub CommonSyncOpacity(ByVal TransparencyKey As OLE_COLOR, ByVal Opacity As Double, ByVal hWnd As LongPtr)
        Dim TransparencyColorIsSet As Boolean = TransparencyKey <> -1
        Dim OpacityIsSet As Boolean = (Opacity >= 0) And (Opacity < 100)

        Dim TransparentColor As Long
        If TransparencyColorIsSet Then
            TransparentColor = TranslateColor(TransparencyKey)
        End If
                
        Const LWA_ALPHA As Long = 2
        Const LWA_COLORKEY As Long = 1
        Dim oldStyles As Long = WinNativeFormsBASE.GetWindowLongW(hWnd, WinNativeFormsBASE.WindowProperties.GWL_EXSTYLE)
        
        Dim ChangeExStyle As Boolean
        Dim NewExStyle As Long
        If OpacityIsSet Or TransparencyColorIsSet Then
            If (oldStyles And WinNativeFormsBASE.WS_EX_LAYERED) = 0 Then
                ChangeExStyle = True
                NewExStyle = oldStyles Or WinNativeFormsBASE.WS_EX_LAYERED
            End If
        Else
            If (oldStyles And WinNativeFormsBASE.WS_EX_LAYERED) <> 0 Then
                ChangeExStyle = True
                NewExStyle = oldStyles - WinNativeFormsBASE.WS_EX_LAYERED
            End If
            TransparentColor = 0
            Opacity = 100
        End If
            
        
        If ChangeExStyle Then WinNativeFormsBASE.SetWindowLongW(hWnd, WinNativeFormsBASE.WindowProperties.GWL_EXSTYLE, NewExStyle)
        WinNativeFormsBASE.SetLayeredWindowAttributes(hWnd, TransparentColor, CByte(255 * Opacity / 100), If(OpacityIsSet, LWA_ALPHA, 0&) Or If(TransparencyColorIsSet, LWA_COLORKEY, 0&))
    End Sub
    
    Public Type TEXTMETRICW
        tmHeight As Long
        tmAscent As Long
        tmDescent As Long
        tmInternalLeading As Long
        tmExternalLeading As Long
        tmAveCharWidth As Long
        tmMaxCharWidth As Long
        tmWeight As Long
        tmOverhang As Long
        tmDigitizedAspectX As Long
        tmDigitizedAspectY As Long
        tmFirstChar As Integer
        tmLastChar As Integer
        tmDefaultChar As Integer
        tmBreakChar As Integer
        tmItalic As Byte
        tmUnderlined As Byte
        tmStruckOut As Byte
        tmPitchAndFamily As Byte
        tmCharSet As Byte
    End Type
    
    Public Sub CommonGetFontMetrics(ByVal font As IFont, ByRef WindowElement As WindowsControls.WindowElement, ByRef out As TEXTMETRICW)
        Dim hdc As LongPtr = WinNativeFormsBASE.WindowsAPI.GDI32_CreateCompatibleDC()
        font.SetRatio If(WindowElement IsNot Nothing, WindowElement.DPI, 96&), 2540
        Dim oldFont As LongPtr = WinNativeFormsBASE.WindowsAPI.GDI32_SelectObject(hdc, font.hFont)
        WinNativeFormsBASE.WindowsAPI.GDI32_GetTextMetrics(hdc, out)
        WinNativeFormsBASE.WindowsAPI.GDI32_SelectObject(hdc, oldFont)
        WinNativeFormsBASE.WindowsAPI.GDI32_DeleteDC(hdc)
    End Sub
    
    Public Function CommonListBoxGetItemIndexFromXY(ByRef WindowElement As WindowsControls.WindowElement, ByRef ControlContext As WindowsControls.WindowsControlContext, ByVal X As Single, ByVal Y As Single) As Long
        Dim point As WinNativeFormsBASE.POINT
        Dim Index As Long
        Dim UnitPixelScale As Any = WindowElement.UnitPixelScale
        point.X = CLng((X * UnitPixelScale) / ControlContext.GetScaleModePixelsMultiplierX)
        point.Y = CLng((Y * UnitPixelScale) / ControlContext.GetScaleModePixelsMultiplierY)
        WinNativeFormsBASE.WindowsAPI.USER32_ClientPointToScreen(WindowElement, point)
        Return WinNativeFormsBASE.WindowsAPI.USER32_ListBoxIndexFromPoint(WindowElement, point, 0)
    End Function
    
    Public Sub CommonCursorPosRelativeToWindow(ByVal Handle As LongPtr, ByRef mousePoint As POINT)
        WinNativeFormsBASE.GetCursorPos(mousePoint)
        WinNativeFormsBASE.ScreenToClient(Handle, mousePoint)
    End Sub
    
    Public Function CommonDragDetect(ByRef WindowElement As WindowsControls.WindowElement) As Boolean
        Dim mousePoint As POINT
        CommonCursorPosRelativeToWindow(WindowElement.Handle, mousePoint)
                    
        Return WinNativeFormsBASE.DragDetect(WindowElement.Handle, CInt(mousePoint.x And &HFFFF&), CInt(mousePoint.y And &HFFFF&)) <> 0
    End Function
    
    Public Function CommonDragDetectLightweight(ByRef WindowElement As WindowsControls.WindowElement) As Boolean
        Dim mousePoint As POINT
        CommonCursorPosRelativeToWindow(WindowElement.ContainerHWND, mousePoint)
                    
        Return WinNativeFormsBASE.DragDetect(WindowElement.ContainerHWND, CInt(mousePoint.x And &HFFFF&), CInt(mousePoint.y And &HFFFF&)) <> 0
    End Function
    
    Public Function CommonListBoxPreMouseDownHandleOLEDragDetect(ByRef WindowElement As WindowsControls.WindowElement, ByRef ControlContext As WindowsControls.WindowsControlContext, ByRef MouseDownNeedsManualRelease As Boolean, ByVal ListIndex As Long, ByVal X As Single, ByVal Y As Single) As Long
        Dim itemIndex As Long = CommonListBoxGetItemIndexFromXY(WindowElement, ControlContext, X, Y)
        If itemIndex <> -1 Then
            ' The list of selected items hasn't yet been updated to reflect the click
            ' so we only do OLEDrag when we know the click is on the currently selected/focused item
            ' (VB6 does same)
            If itemIndex = ListIndex Then
                Dim mousePoint As POINT
                CommonCursorPosRelativeToWindow(WindowElement.Handle, mousePoint)
                    
                If WinNativeFormsBASE.DragDetect(WindowElement.Handle, CInt(mousePoint.x And &HFFFF&), CInt(mousePoint.y And &HFFFF&)) <> 0 Then
                    Return itemIndex
                Else
                    MouseDownNeedsManualRelease = True
                End If
            End If
        End If
        Return -1
    End Function
    
    Public Function CommonGetSelectedItemsAsDelimitedString(ByRef WindowElement As WindowsControls.WindowElement, Optional rootPath As String) As String
        Dim count As Long = CLng(WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(WindowElement, ListBoxMessages.LB_GETSELCOUNT, 0, 0))
        If count = 0 Then Exit Function
            
        Dim itemIndices() As Long
        ReDim itemIndices(count - 1)
        count = CLng(WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(WindowElement, ListBoxMessages.LB_GETSELITEMS, count, VarPtr(itemIndices(0))))

        Dim selIndex As Long
        For selIndex = 0 To count - 1
            If selIndex > 0 Then CommonGetSelectedItemsAsDelimitedString &= vbCrLf
            CommonGetSelectedItemsAsDelimitedString &= rootPath & CommonGetListBoxStringByIndex(WindowElement, itemIndices(selIndex))
        Next
    End Function
    
    Public Sub CommonRaiseViewChanged(Container As Object)
        On Error Resume Next
        With CType(Of TbCommonContainerPrivate)(Container)
            .RaiseViewChanged()
        End With
    End Sub
    
    Public Sub CommonRaiseChange(Container As Object)
        On Error Resume Next
        With CType(Of TbCommonContainerPrivate)(Container)
            .RaiseChange()
        End With
    End Sub
    
    Public Sub CommonRaisePaint(Container As Object)
        On Error Resume Next
        With CType(Of TbCommonContainerPrivate)(Container)
            .RaisePaint()
        End With
    End Sub
    
    Public Sub CommonRaiseResize(Container As Object)
        On Error Resume Next
        With CType(Of TbCommonContainerPrivate)(Container)
            .RaiseResize()
        End With
    End Sub
    
    Public Sub CommonRebuildMenus(Container As Object)
        'On Error Resume Next
        With CType(Of TbCommonContainerPrivate)(Container)
            .RebuildMenus()
        End With
    End Sub
    
    Public Function CommonGetInternalMenuDataPtr(Menu As Menu) As LongPtr
        Return CType(Of TbMenuPrivate)(Menu).GetMenuDataPtr()
    End Function
    
    Public Sub CommonResizeWindowless(ByVal containerHwnd As LongPtr, ByVal adjustAmount As Long, ByVal oldLeft As Long, ByVal oldTop As Long, ByVal oldWidth As Long, ByVal oldHeight As Long, _
                                    ByVal newLeft As Long, ByVal newTop As Long, ByVal newWidth As Long, ByVal newHeight As Long)
            
        ' FIXME passing around so many args is inefficient            
        Dim rect As WinNativeFormsBASE.RECT
        If oldWidth <> 0 And oldHeight <> 0 Then
            rect.Left = oldLeft - adjustAmount
            rect.Top = oldTop - adjustAmount
            rect.Right = oldLeft + oldWidth + adjustAmount
            rect.Bottom = oldTop + oldHeight + adjustAmount
            WinNativeFormsBASE.WindowsAPI.InvalidateRect(containerHwnd, rect, 1)
        End If

        If newWidth <> 0 And newHeight <> 0 Then
            rect.Left = newLeft - adjustAmount
            rect.Top = newTop - adjustAmount
            rect.Right = newLeft + newWidth + adjustAmount
            rect.Bottom = newTop + newHeight + adjustAmount
            WinNativeFormsBASE.WindowsAPI.InvalidateRect(containerHwnd, rect, 1)
        End If
            
        'Debug.Print "***LINE*** HandleResizeWindowless - newLeft: " & newLeft & ", newWidth: " & newWidth
        'Debug.Print "***LINE*** HandleResizeWindowless - newTop: " & newTop & ", newHeight: " & newHeight
    End Sub
    
    Public Function CommonHandleVerticalScroll(ByRef WindowElement As WindowsControls.WindowElement, ByVal ScrollType As WinNativeFormsBASE.SCROLLNOTIFY, ByVal RangeMax As Long) As Boolean
        Dim OldValue As Long = WinNativeFormsBASE.WindowsAPI.USER32_GetScrollValue(WindowElement, WinNativeFormsBASE.SB_VERT)
        Dim NewValue As Long
        Select Case ScrollType
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_TOP
                NewValue = 0
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_BOTTOM
                NewValue = 0
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_LINEUP
                NewValue = OldValue - 1
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_LINEDOWN
                NewValue = OldValue + 1
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_PAGEUP
                NewValue = OldValue - WinNativeFormsBASE.WindowsAPI.USER32_GetScrollPageSize(WindowElement, WinNativeFormsBASE.SB_VERT)
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_PAGEDOWN
                NewValue = OldValue + WinNativeFormsBASE.WindowsAPI.USER32_GetScrollPageSize(WindowElement, WinNativeFormsBASE.SB_VERT)
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_THUMBPOSITION
                NewValue = OldValue
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_THUMBTRACK
                NewValue = WinNativeFormsBASE.WindowsAPI.USER32_GetScrollValueHot(WindowElement, WinNativeFormsBASE.SB_VERT)
            Case Else
                Exit Function
        End Select
             
        If NewValue < 0 Then
            NewValue = 0
        End If

        If NewValue > RangeMax Then
            NewValue = RangeMax
        End If

        If NewValue <> OldValue Then
            WinNativeFormsBASE.WindowsAPI.USER32_SetScrollValue(WindowElement, NewValue, WinNativeFormsBASE.SB_VERT)
            Return True
        End If
    End Function
    
    Public Function CommonHandleScrollControl(ByRef Control As Control, ByRef WindowElement As WindowsControls.WindowElement, ByVal ScrollType As WinNativeFormsBASE.SCROLLNOTIFY) As Boolean
        Dim RaiseAnEvent As Boolean
        Dim NewValue As Long
        Dim oldValue As Any = Control.Value
        Select Case ScrollType
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_TOP         ' same as SB_LEFT
                NewValue = CLng(Control.Min)
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_BOTTOM      ' same as SB_RIGHT
                NewValue = CLng(Control.Max)
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_LINEUP      ' same as SB_LINELEFT
                NewValue = CLng(oldValue - Control.SmallChange)
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_LINEDOWN    ' same as SB_LINERIGHT
                NewValue = CLng(oldValue + Control.SmallChange)
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_PAGEUP      ' same as SB_PAGELEFT
                NewValue = CLng(oldValue - Control.LargeChange)
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_PAGEDOWN    ' same as SB_PAGERIGHT
                NewValue = CLng(oldValue + Control.LargeChange)
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_THUMBPOSITION
                NewValue = WinNativeFormsBASE.WindowsAPI.USER32_GetScrollValue(WindowElement)
                RaiseAnEvent = True
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_THUMBTRACK
                NewValue = WinNativeFormsBASE.WindowsAPI.USER32_GetScrollValueHot(WindowElement)
            Case WinNativeFormsBASE.SCROLLNOTIFY.SB_ENDSCROLL
                Exit Function
            Case Else
                Exit Function
        End Select
            
        If oldValue <> NewValue Then
            WinNativeFormsBASE.WindowsAPI.USER32_SetScrollValue(WindowElement, NewValue)
            Return True
        End If
        Return RaiseAnEvent
    End Function
    
    Public Function CommonBorderStyleToPenType(ByVal BorderStyle As BorderStyleConstants) As Long
        Dim penType As Long
        ' FIXME could use a const array lookup here
        Select Case BorderStyle
            Case vbTransparent: penType = PS_NULL
            Case vbBSSolid: penType = PS_SOLID
            Case vbBSDot: penType = PS_DOT
            Case vbBSDash: penType = PS_DASH
            Case vbBSDashDot: penType = PS_DASHDOT
            Case vbBSDashDotDot: penType = PS_DASHDOTDOT
            Case vbBSInsideSolid: penType = PS_INSIDEFRAME
            Case Else
                Err.Raise 5
        End Select
        Return penType
    End Function
    
    [UseGetLastError(False), DLLStackCheck(False)]
    Private DeclareWide PtrSafe Function CreateSolidBrush Lib "gdi32" (ByVal Color As Long) As LongPtr
    
    Public Function CommonFillStyleToBrush(ByVal FillStyle As FillStyleConstants, ByVal Transparent As Boolean, ByVal backColor As Long, ByVal fillColor As Long) As LongPtr
        Dim fillBrush As LongPtr
        Dim hatchType As Long = -1
        Select Case FillStyle
            Case vbFSTransparent: 
                If Transparent Then
                    fillBrush = GDI32_GetStockObject(NULL_BRUSH)
                Else
                    fillBrush = WinNativeFormsBASE.WindowsAPI.GDI32_CreateSolidBrushColor(backColor)
                End If
            Case vbFSSolid: fillBrush = CreateSolidBrush(fillColor)
            Case vbCross: hatchType = HS_CROSS
            Case vbDiagonalCross: hatchType = HS_DIAGCROSS
            Case vbDownwardDiagonal: hatchType = HS_FDIAGONAL
            Case vbHorizontalLine: hatchType = HS_HORIZONTAL
            Case vbUpwardDiagonal: hatchType = HS_BDIAGONAL
            Case vbVerticalLine: hatchType = HS_VERTICAL
        End Select
        
        If hatchType <> -1 Then
            fillBrush = GDI32_CreateHatchBrush(hatchType, fillColor)
        End If
        Return fillBrush
    End Function
    
    ' Private DeclareWide PtrSafe Function CreatePatternBrush Lib "gdi32" (ByVal hbmp As LongPtr) As LongPtr
    ' [UseGetLastError(False), DLLStackCheck(False)]
    ' Private DeclareWide PtrSafe Function InternalCreateBitmap Lib "gdi32" Alias "CreateBitmap" (ByVal nWidth As Long, ByVal nHeight As Long, ByVal nPlanes As Long, ByVal nBitCount As Long, ByVal lpBits As LongPtr) As LongPtr
    
    ' Public Function CommonFillStyleToBrushEx(ByVal hdc As LongPtr, ByRef rect As WinNativeFormsBASE.RECT, ByVal IsReportMode As Boolean, ByVal FillStyle As FillStyleConstantsEx, ByVal Transparent As Boolean, ByVal backColor As Long, ByVal fillColor As Long, ByVal fillColorAlt As Long) As LongPtr
    
    '     If FillStyle >= 8 Then
    '         If Not IsReportMode Then
    '             Dim gradientHDC As Any = WinNativeFormsBASE.CreateCompatibleDC(hdc)
    '             Dim tempBmp As LongPtr = WinNativeFormsBASE.CreateCompatibleBitmap(hdc, rect.Right, rect.Bottom)
    '             Dim origBitmap As LongPtr = WinNativeFormsBASE.SelectObject(gradientHDC, tempBmp)
                        
    '             GradientFillRect(gradientHDC, rect, fillColor, fillColorAlt, If(FillStyle = 8, True, False))
                        
    '             ' Dim bmpData() As Long
    '             ' ReDim bmpData(X + (Width - 1), Y + (Height - 1))
    '             ' Dim __x As Long
    '             ' While __x < Width
    '             '     Dim __y As Long = 0
    '             '     While __y < Height
    '             '         bmpData(X + __x, Y + __y) = RGB(0, 0, CInt(__y/ Height * 254))
    '             '         __y += 1
    '             '     Wend
    '             '     __x += 1
    '             ' Wend
    '             ' Dim tempBmp As LongPtr = InternalCreateBitmap(X + Width, Y + Height, 1, 32, VarPtr(bmpData(0, 0)))
                
    '             WinNativeFormsBASE.SelectObject(gradientHDC, origBitmap)
    '             WinNativeFormsBASE.DeleteObject(gradientHDC)
    '             Dim retVal As Any = CreatePatternBrush(tempBmp)
    '             WinNativeFormsBASE.DeleteObject(tempBmp)
    '             Return retVal
    '         Else
    '             Return CommonFillStyleToBrush(FillStyleConstants.vbFSSolid, Transparent, backColor, fillColor)
    '         End If
    '     Else
    '         Return CommonFillStyleToBrush(CType(Of FillStyleConstants)(FillStyle), Transparent, backColor, fillColor)
    '     End If
        
    ' End Function
    
    Function IsControlArrayElement(control As Control) As Boolean
        On Error GoTo NotControlArray
        control.Index
        Return True
    NotControlArray:
        Return False
    End Function
    
    Public Function CommonGetAlign(ctl As Control) As VBRUN.AlignConstants
        Select Case ctl.Dock
            Case vbDockLeft: Return VBRUN.AlignConstants.vbAlignLeft
            Case vbDockTop: Return VBRUN.AlignConstants.vbAlignTop
            Case vbDockRight: Return VBRUN.AlignConstants.vbAlignRight
            Case vbDockBottom: Return VBRUN.AlignConstants.vbAlignBottom
        End Select
        Return VBRUN.AlignConstants.vbAlignNone
    End Function
        
    Public Sub CommonLetAlign(ctl As Control, ByVal Value As VBRUN.AlignConstants)
        Select Case Value
            Case VBRUN.AlignConstants.vbAlignLeft: ctl.Dock = vbDockLeft
            Case VBRUN.AlignConstants.vbAlignTop: ctl.Dock = vbDockTop
            Case VBRUN.AlignConstants.vbAlignRight: ctl.Dock = vbDockRight
            Case VBRUN.AlignConstants.vbAlignBottom: ctl.Dock = vbDockBottom
            Case VBRUN.AlignConstants.vbAlignNone: ctl.Dock = vbDockNone
            Case Else: Err.Raise 5
        End Select
    End Sub
End Module

' FIXME not yet supported.
[COMExtensible(True)]
[ClassId("164CBDD2-7321-11D1-A1E8-00A0C90F2731")]
[InterfaceId("164CBDD0-7321-11D1-A1E8-00A0C90F2731")]
Class VBControlExtender
    [DispId(&HEAEA0006)]
        Event GotFocus()
End Class