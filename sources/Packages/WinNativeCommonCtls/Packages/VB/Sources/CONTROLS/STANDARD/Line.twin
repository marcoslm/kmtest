[Description("A Win32 native Line")]
[WindowsControl("/miscellaneous/ICONS??/Line??.png")]
[ClassId("33AD4F88-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("769C0185-5C1E-4D3B-B37B-DB794FCAD227")]    ' FIXME implement {33AD4F89-6699-11CF-B70C-00AA0060D393} for backcompat
[COMCreatable(False)]
[EventsUseDispInterface]
[ComImport(True)]
Class Line
    
    #Region "INHERITANCE"
    
        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlWindowlessPoints Via _BaseControl = New WinNativeFormsBASE.BaseControlWindowlessPoints(ControlTypeConstants.vbShape)

    #End Region
        
    #Region "STATE"
    
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public BorderColor As OLE_COLOR = VBRUN.SystemColorConstants.vbWindowText
        [Description("")]
            Public BorderStyle As BorderStyleConstants = BorderStyleConstants.vbBSSolid
        [Description("")]
            Public BorderWidth As Long = 1
        [Description("")]
            Public DrawMode As DrawModeConstants = DrawModeConstants.vbCopyPen

            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private IsDesignMode As Boolean
            
        [NonBrowsable]
        [Serialize(True)]
            Private InternalSectionId As Long = -1
        
    #End Region

    #Region "EVENTS"
    
        [Description("")]
            Event Initialize()

    #End Region
               
    #Region "MEMBERS"
        
        #If LOG_TERMINATE Then
            Private Sub Class_Terminate()
                    Debug.Print CurrentComponentName & "." & CurrentProcedureName
            End Sub
        #End If
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
                           
            Me.InternalStateReset()     ' resets all the base class state
            With ControlContext.GetSerializer
                If Not .Deserialize(Me) Then
                    'Caption_INIT = "Line"
                End If
                IsDesignMode = .IsDesignMode
            End With
            
            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InternalBaseControlBeforeCreateRootWindow(InitData)
            InitData.InternalSectionId = InternalSectionId + 1
            InitData.Flags = RequiresWindowlessPaintingWithEvents Or _
                                NotRectangular
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
        End Sub
                
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
                
            ' disconnect anything that causes a circular reference here
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub
        
        Private Sub HandleCreate() _
                Handles RootWindowElement.Create
                
            RaiseEvent Initialize()
        End Sub

        Private Sub HandleEraseBackground(ByVal hdc As LongPtr, ByRef Handled As Boolean) _
            Handles RootWindowElement.EraseBackground
                
            Handled = True
        End Sub

        Private Sub HandlePaint(ByRef Handled As Boolean) _
                Handles RootWindowElement.Paint

            If Visible = False And Me.IsDesignMode = False Then Exit Sub

            Dim borderColor As Long = TranslateColor(Me.BorderColor)
            Dim pen As LongPtr
            Dim penType As Long = CommonBorderStyleToPenType(Me.BorderStyle)

            pen = GDI32_CreatePen(penType, Me.BorderWidth, borderColor)
            
            Dim backBrush As LongPtr = GDI32_GetStockObject(NULL_BRUSH)

            'Debug.Print "***LINE*** Paint - X1: " & (PixelsX1 * RootWindowElement.UnitPixelScale) & ", width: " & ((PixelsX2 * RootWindowElement.UnitPixelScale) - (PixelsX1 * RootWindowElement.UnitPixelScale))
            'Debug.Print "***LINE*** Paint - Y1: " & (PixelsY1 * RootWindowElement.UnitPixelScale) & ", height: " & ((PixelsY2 * RootWindowElement.UnitPixelScale) - (PixelsY1 * RootWindowElement.UnitPixelScale))

            Dim RootWindowElement As Any = Me.RootWindowElement
            Dim UnitPixelScale As Any = RootWindowElement.UnitPixelScale
            
            Dim ps As WinNativeFormsBASE.PAINTSTRUCT
            RootWindowElement.BeginPaint(ps)    ' you MUST use this method, and NOT the BeginPaint API directly
    
                Dim ps_hdc As Any = ps.hdc
                ' Dim rect As WinNativeFormsBASE.RECT
                ' Static PaintCount As Long = 0
                ' rect.Left = PixelsX1 * RootWindowElement.UnitPixelScale
                ' rect.Top = PixelsY1 * RootWindowElement.UnitPixelScale
                ' rect.Right = (PixelsX2 * RootWindowElement.UnitPixelScale)
                ' rect.Bottom = (PixelsY2 * RootWindowElement.UnitPixelScale)
                ' Dim brush As LongPtr = WinNativeFormsBASE.WindowsAPI.CreateSolidBrush(If(PaintCount = 0, vbRed, vbGreen))
                ' PaintCount += 1
                ' WinNativeFormsBASE.WindowsAPI.FillRect(ps.hdc, rect, brush)
                ' WinNativeFormsBASE.WindowsAPI.DeleteObject(brush)
                
                Dim oldBkMode As Long = WinNativeFormsBASE.WindowsAPI.GDI32_SetBackMode(ps_hdc, WinNativeFormsBASE.BackgroundModes.OPAQUE)

                Dim oldBrush As LongPtr
                Dim oldPen As LongPtr
            
                If backBrush <> 0 Then
                    oldBrush = WinNativeFormsBASE.GDI32_SelectObject(ps_hdc, backBrush)
                End If

                If pen <> 0 Then
                    oldPen = WinNativeFormsBASE.GDI32_SelectObject(ps_hdc, pen)
                End If

                GDI32_SetROP2(ps_hdc, Me.DrawMode)
                GDI32_MoveToEx(ps_hdc, CLng(PixelsX1 * UnitPixelScale), CLng(PixelsY1 * UnitPixelScale), 0)
                Dim LineToY As Long = CLng(PixelsY2 * UnitPixelScale)
                'Debug.Print "***LINE*** Paint - LineToY: " & LineToY

                GDI32_LineTo(ps_hdc, CLng(PixelsX2 * UnitPixelScale), LineToY)
            
                If pen <> 0 Then
                    WinNativeFormsBASE.GDI32_SelectObject(ps_hdc, oldPen)
                End If

                If backBrush <> 0 Then
                    WinNativeFormsBASE.GDI32_SelectObject(ps_hdc, oldBrush)
                End If

                WinNativeFormsBASE.WindowsAPI.GDI32_SetBackMode(ps_hdc, oldBkMode)

            RootWindowElement.EndPaint(ps)
            Handled = True     ' swallow up the event

            If pen <> 0 Then WinNativeFormsBASE.WindowsAPI.GDI32_DeleteObject(pen)

        End Sub
        
        Private Sub OnChangeProp() _
                Handles BorderColor.OnPropertyLet, _
                        BorderStyle.OnPropertyLet, _
                        BorderWidth.OnPropertyLet, _
                        DrawMode.OnPropertyLet
                        
        	Me.WindowlessRefresh()
        End Sub
        
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Get _Default() As Boolean
            Return Me.Visible
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Let _Default(Value As Boolean)
            Me.Visible = Value
        End Property
        
        Private Sub HandleResizeWindowless(ByVal oldLeft As Long, ByVal oldTop As Long, ByVal oldWidth As Long, ByVal oldHeight As Long, _
                                               ByVal newLeft As Long, ByVal newTop As Long, ByVal newWidth As Long, ByVal newHeight As Long) _
                Handles RootWindowElement.ResizeWindowless
                
            On Error Resume Next
            Dim containerHwnd As LongPtr = CLngPtr(_BaseControl.Container.hwnd)
            On Error GoTo 0
            
            If containerHwnd = 0 Then
                ' Windowless UC container...  FIXME need to pass on the RECTs to refine the InvalidateRect passed to the UC site
                CommonRaiseViewChanged(_BaseControl.Container)
                Exit Sub
            End If
            
            CommonResizeWindowless(containerHwnd, CLng(Round(BorderWidth / 2)) + 1, oldLeft, oldTop, oldWidth, oldHeight, newLeft, newTop, newWidth, newHeight)
        End Sub
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
                
    #End Region
    
End Class