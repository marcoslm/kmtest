[Description("A Win32 native Shape")]
[WindowsControl("/miscellaneous/ICONS??/Shape??.png")]
[ClassId("33AD4F80-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("CF3EAF95-9CE0-4852-AB1A-052B8C7EA05B")]    ' FIXME implement {33AD4F81-6699-11CF-B70C-00AA0060D393} for backcompat
[COMCreatable(False)]
[EventsUseDispInterface]
[ComImport(True)]
Class Shape

    #Region "INHERITANCE"
     
        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlWindowlessNoDrag Via _BaseControl = New WinNativeFormsBASE.BaseControlWindowlessNoDrag(ControlTypeConstants.vbShape)
        
    #End Region
        
    #Region "STATE"
    
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public BackColor As OLE_COLOR = VBRUN.SystemColorConstants.vbWindowBackground
        [Description("")]
            Public BackStyle As BackFillStyleConstants = BackFillStyleConstants.vbBFTransparent
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public BorderColor As OLE_COLOR = VBRUN.SystemColorConstants.vbWindowText
        [Description("")]
            Public BorderStyle As BorderStyleConstants = BorderStyleConstants.vbBSSolid
        [Description("")]
            Public BorderWidth As Long = 1
        [Description("")]
            Public DrawMode As DrawModeConstants = DrawModeConstants.vbCopyPen
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public FillColor As OLE_COLOR = VBRUN.SystemColorConstants.vbScrollBars
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("A second fill color, used for gradients")]
            Public FillColorAlt As OLE_COLOR = vbWhite
        [Description("")]
            Public FillStyle As FillStyleConstantsEx = FillStyleConstantsEx.vbFSTransparent
        [Description("")]
            Public Shape As ShapeConstants = ShapeConstants.vbShapeRectangle
        [Description("")]
            Public RoundedCornerSize As Long = 20
        [Description("For use with Stars and Arrows (Stars 0-30, Arrows 0-100)")]
            Public VariationA As Long = -1
        [Description("For use with Stars and Arrows (Stars 0+, Arrows 0-100)")]
            Public VariationB As Long = -1
        [Description("For use with Stars, from 0-12")]
            Public VariationC As Long = -1

        [Description("Angle at which the control is rendered.  0 is the natural angle, 90 is a quarter anti-clockwise turn.  Control is turned relative to the top-left position.")]
            Public Angle As Double
            
            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private IsDesignMode As Boolean
            Private InternalLastPaintWasAngled As Boolean
            
        [NonBrowsable]
        [Serialize(True)]
            Private InternalSectionId As Long = -1
                        
            Private IsReportMode As Boolean
    #End Region

    #Region "EVENTS"
    
        [Description("")]
            Event Initialize()

    #End Region
               
    #Region "MEMBERS"
        
        #If LOG_TERMINATE Then
            Private Sub Class_Terminate()
                    Debug.Print CurrentComponentName & "." & CurrentProcedureName
            End Sub
        #End If
                
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
                
            Me.InternalStateReset()     ' resets all the base class state
            Me.InternalLastPaintWasAngled = False
            
            With ControlContext.GetSerializer
                If Not .Deserialize(Me) Then
                    'Caption_INIT = "Shape"
                End If
                'IsDesignMode = .IsDesignMode
            End With
            
            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InitData.InternalSectionId = InternalSectionId + 1
            InitData.Flags = RequiresWindowlessPaintingWithoutEvents Or _
                                If(Angle <> 0, IsAngledControl, 0&)
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
        End Sub
                
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
                
            ' disconnect anything that causes a circular reference here
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub
        
        Private Sub HandleCreate() _
                Handles RootWindowElement.Create
                
            RaiseEvent Initialize()
        End Sub

        Type contigiousPoints30
        	points(0 To 60) As WinNativeFormsBASE.POINT
        End Type

        Private Declare PtrSafe Function CreateDIBSection Lib "gdi32" (ByVal hDC As LongPtr, lpBitsInfo As Any, ByVal wUsage As Long, lpBits As LongPtr, ByVal hSection As LongPtr, ByVal dwOffset As Long) As LongPtr
        Private Declare PtrSafe Function CreateDIBPatternBrushPt Lib "gdi32" (ByVal lpPackedDIB As LongPtr, ByVal iUsage As Long) As LongPtr
        [UseGetLastError(False), DLLStackCheck(False)]
        Private DeclareWide PtrSafe Function ScaleViewportExtEx Lib "gdi32" (ByVal hdc As LongPtr, ByVal xn As Long, ByVal dx As Long, ByVal yn As Long, ByVal yd As Long, ByVal lpSize As LongPtr) As Long
        
        [ArrayBoundsChecks(False)]
        Private Sub HandlePaint(ByRef Handled As Boolean) _
                Handles RootWindowElement.Paint
                                    
            ' Can't use CurrentLeft/etc for windowless controls
            ' Dim X As Long = RootWindowElement.CurrentLeft
            ' Dim Y As Long = RootWindowElement.CurrentTop
            ' Dim Width As Long = RootWindowElement.CurrentWidth
            ' Dim Height As Long = RootWindowElement.CurrentHeight

            Dim RootWindowElement As Any = Me.RootWindowElement
            Dim UnitPixelScale As Any = RootWindowElement.UnitPixelScale
            Dim X As Long
            Dim Y As Long
            Dim Width As Long
            Dim Height As Long
            
            If Me.Angle <> 0 Then
                 X = 0
                 Y = 0
                 Width = CLng((Me.PixelsWidth * UnitPixelScale))
                 Height = CLng((Me.PixelsHeight * UnitPixelScale))
             Else
                X = CLng(Me.PixelsLeft * UnitPixelScale)
                Y = CLng(Me.PixelsTop * UnitPixelScale)
                Width = CLng(Me.PixelsWidth * UnitPixelScale)
                Height = CLng(Me.PixelsHeight * UnitPixelScale)
             End If
            
            If Width <= 0 Or Height <= 0 Then Exit Sub
            
            If Visible = False And Me.IsDesignMode = False Then Exit Sub

            ' FIXME need to cache these pens and brushes!

            Dim backBrush As LongPtr
            Dim backColor As Long = TranslateColor(Me.BackColor)
            Dim fillColor As Long = TranslateColor(Me.FillColor)
            Dim FillColorAlt As Long = TranslateColor(Me.FillColorAlt)
            Dim borderColor As Long = TranslateColor(Me.BorderColor)
            
            
            Dim penType As Long = CommonBorderStyleToPenType(Me.BorderStyle)
            Dim pen As LongPtr = GDI32_CreatePen(penType, Me.BorderWidth, borderColor)
            
            Dim ps As WinNativeFormsBASE.PAINTSTRUCT
            RootWindowElement.BeginPaint(ps)    ' you MUST use this method, and NOT the BeginPaint API directly
    
                Dim ps_hdc As Any = ps.hdc
                
                If Me.Angle <> 0 Then
                    Dim angleData As WorldTransformAngleData
                    DoWorldTransformAngle(angleData, ps_hdc, Me.Angle, Me.PixelsLeft * UnitPixelScale, Me.PixelsTop * UnitPixelScale)
                    InternalLastPaintWasAngled = True
                Else
                    InternalLastPaintWasAngled = False
                End If
                
                Dim NeedsComplexFill As Boolean = False
                            
                ' ' FIXME we definitely want to cache the brush if it's based on a bitmap (e.g. gradient)
                'Dim isReportMode As Any = TypeOf RootWindowElement.Container Is Report
                If Me.FillStyle >= 8 Then
                    If Me.Angle = 0 Then
                        NeedsComplexFill = True
                        
                        Dim rect1 As WinNativeFormsBASE.RECT
                        rect1.Left = X
                        rect1.Top = Y
                        rect1.Right = X + Width
                        rect1.Bottom = Y + Height
                        backBrush = CommonFillStyleToBrush(FillStyleConstants.vbFSTransparent, Me.BackStyle = vbBFTransparent, backColor, fillColor)
                    Else
                        ' GradientFill doesn't support world transforms, so we just ignore the gradient fill
                        backBrush = CommonFillStyleToBrush(FillStyleConstants.vbFSSolid, Me.BackStyle = vbBFTransparent, backColor, fillColor)
                    End If
                Else
                    backBrush = CommonFillStyleToBrush(CType(Of FillStyleConstants)(Me.FillStyle), Me.BackStyle = vbBFTransparent, backColor, fillColor)
                End If
                'backBrush = CommonFillStyleToBrushEx(ps_hdc, rect1, FillStyleConstantsEx.vbFSSolid, Me.BackStyle = vbBFTransparent, backColor, fillColor, FillColorAlt)
                
                
                
               ' Stop
                
                
                'ScaleViewportExtEx(ps_hdc, 5, 1, 5, 1, vbNullPtr)
                                
                
                WinNativeFormsBASE.WindowsAPI.GDI32_SetBackColor(ps_hdc, backColor)

                'Dim oldBkMode As Long = WindowsAPI.GDI32_SetBackMode(ps_hdc, If((Me.FillStyle = vbFSTransparent) And (Me.BackStyle = vbBFTransparent), BackgroundModes.TRANSPARENT, BackgroundModes.OPAQUE))
                Dim oldBkMode As Long = WinNativeFormsBASE.WindowsAPI.GDI32_SetBackMode(ps_hdc, WinNativeFormsBASE.BackgroundModes.OPAQUE)

                Dim oldBrush As LongPtr
                Dim oldPen As LongPtr
                
                If backBrush <> 0 Then
                    oldBrush = WinNativeFormsBASE.GDI32_SelectObject(ps_hdc, backBrush)
                End If

                If pen <> 0 Then
                    oldPen = WinNativeFormsBASE.GDI32_SelectObject(ps_hdc, pen)
                End If

                GDI32_SetROP2(ps_hdc, Me.DrawMode)

                Dim shape As Any = Me.Shape
                Select Case shape
                    Case ShapeConstants.vbShapeCircle, _
                            ShapeConstants.vbShapeSquare, _
                            ShapeConstants.vbShapeRoundedSquare, _
                            ShapeConstants.vbShapeStar
                        If Width > Height Then
                            X += CLng((Width - Height) / 2)
                        	Width = Height
                        Else
                            Y += CLng((Height - Width) / 2)
                            Height = Width
                        End If
                End Select

                Dim points As contigiousPoints30
                Dim arrowHeadSize As Double
                Dim arrowHeadSize2 As Double
                
                Dim VariationA As Any = Me.VariationA
                Dim VariationB As Any = Me.VariationB
                Dim VariationC As Any = Me.VariationC
                
                Dim complexRgn As LongPtr
                Const ALTERNATE As Long = 1
                Const WINDING As Long = 2
                
                Select Case shape
                    Case ShapeConstants.vbShapeOval, ShapeConstants.vbShapeCircle
                        If NeedsComplexFill Then
                            complexRgn = GDI32_CreateEllipticRgn(X, Y, X + Width, Y + Height)
                        End If
                    Case ShapeConstants.vbShapeRectangle, ShapeConstants.vbShapeSquare
                        If NeedsComplexFill Then
                            complexRgn = GDI32_CreateRectRgn(X, Y, X + Width, Y + Height)
                        End If
                    Case ShapeConstants.vbShapeRoundedRectangle, ShapeConstants.vbShapeRoundedSquare
                        Dim RoundedCornerSize As Any = Me.RoundedCornerSize
                        If NeedsComplexFill Then
                            complexRgn = GDI32_CreateRoundRectRgn(X, Y, X + Width, Y + Height, CLng(RoundedCornerSize * UnitPixelScale), CLng(RoundedCornerSize * UnitPixelScale))
                        End If
                    Case ShapeConstants.vbShapeStar
                        Dim numPoints As Long = If(VariationA >= 2 And VariationA <= 30, VariationA, 5&)
                        Dim sides As Long = numPoints * 2
                        Dim divisor As Double
                        ' FIXME use a constant array for this
                        Select Case VariationC
                            Case 1: divisor = 0.01
                            Case 2: divisor = 0.02
                            Case 3: divisor = 0.04
                            Case 4: divisor = 0.05
                            Case 5: divisor = 0.08
                            Case 6: divisor = 0.10
                            Case 7: divisor = 0.20
                            Case 8: divisor = 0.25
                            Case 9: divisor = 0.40
                            Case 10: divisor = 0.50
                            Case 11: divisor = 1
                            Case 12: divisor = 2
                            Case Else: divisor = 2
                        End Select
                        Dim alpha As Double = (2 * 3.141592653589793238462643383279) / (numPoints * divisor)
                        Dim radius As Double = Width / 2
                        Dim _X As Double = X + (Width / 2)
                        Dim _Y As Double = Y + (Height / 2)
                        Dim rA As Double = CDbl(radius / If(VariationB > 0, (VariationB + 100) / 100, 2&))
                        Dim rB As Double = radius
                        Dim pointIndex As Long
                        For pointIndex = 0 To sides
                            Dim r As Double = If(pointIndex Mod 2, rB, rA)
                            Dim omega As Double = alpha * pointIndex
                            points.points(pointIndex).X = CLng(_X + (r * Sin(omega)))
                            points.points(pointIndex).Y = CLng(_Y + (r * Cos(omega)))
                        Next
                        
                        If NeedsComplexFill Then
                            complexRgn = GDI32_CreatePolygonRgn(points, sides + 1, ALTERNATE)
                        End If

                    Case ShapeConstants.vbShapeArrowLeft, ShapeConstants.vbShapeArrowRight
                        arrowHeadSize = Height * If(VariationA >= 0 And VariationA <= 100, VariationA / 100, 0.3)
                        arrowHeadSize2 = Width * If(VariationB >= 0 And VariationB <= 100, VariationB / 100, 0.5)
                        If shape = ShapeConstants.vbShapeArrowLeft Then
                        	X += Width
                            arrowHeadSize2 = -arrowHeadSize2
                            Width = -Width
                        End If
                        points.points(0).X = X
                        points.points(0).Y = CLng(Y + arrowHeadSize)
                        points.points(1).X = CLng(X + arrowHeadSize2)
                        points.points(1).Y = CLng(Y + arrowHeadSize)
                        points.points(2).X = CLng(X + arrowHeadSize2)
                        points.points(2).Y = Y
                        points.points(3).X = X + Width
                        points.points(3).Y = CLng(Y + (Height / 2))
                        points.points(4).X = CLng(X + arrowHeadSize2)
                        points.points(4).Y = Y + Height
                        points.points(5).X = CLng(X + arrowHeadSize2)
                        points.points(5).Y = CLng((Y + Height) - arrowHeadSize)
                        points.points(6).X = X
                        points.points(6).Y = CLng((Y + Height) - arrowHeadSize)
                        
                        If NeedsComplexFill Then
                            complexRgn = GDI32_CreatePolygonRgn(points, 7, ALTERNATE)
                        End If
                    Case ShapeConstants.vbShapeArrowUp, ShapeConstants.vbShapeArrowDown
                        arrowHeadSize = Width * If(VariationA >= 0 And VariationA <= 100, VariationA / 100, 0.3)
                        arrowHeadSize2 = Height * If(VariationB >= 0 And VariationB <= 100, VariationB / 100, 0.5)
                        If shape = ShapeConstants.vbShapeArrowUp Then
                        	Y += Height
                            arrowHeadSize2 = -arrowHeadSize2
                            Height = -Height
                        End If
                        points.points(0).X = CLng((X + Width) - arrowHeadSize)
                        points.points(0).Y = Y
                        points.points(1).X = CLng((X + Width) - arrowHeadSize)
                        points.points(1).Y = CLng(Y + arrowHeadSize2)
                        points.points(2).X = X + Width
                        points.points(2).Y = CLng(Y + arrowHeadSize2)
                        points.points(3).X = CLng(X + (Width / 2))
                        points.points(3).Y = Y + Height
                        points.points(4).X = X
                        points.points(4).Y = CLng(Y + arrowHeadSize2)
                        points.points(5).X = CLng(X + arrowHeadSize)
                        points.points(5).Y = CLng(Y + arrowHeadSize2)
                        points.points(6).X = CLng(X + arrowHeadSize)
                        points.points(6).Y = Y
                        
                        If NeedsComplexFill Then
                            complexRgn = GDI32_CreatePolygonRgn(points, 7, ALTERNATE)
                        End If
                End Select
                
                If complexRgn <> 0 Then
                    WinNativeFormsBASE.SelectClipRgn(ps_hdc, complexRgn)
                    
                    If Me.FillStyle = FillStyleConstantsEx.vbGradientNS Then
                        GradientFillRect(ps_hdc, rect1, fillColor, FillColorAlt, True)
                    ElseIf Me.FillStyle = FillStyleConstantsEx.vbGradientWE Then
                        GradientFillRect(ps_hdc, rect1, fillColor, FillColorAlt, False)
                    End If
                    'WinNativeFormsBASE.FillRect(ps_hdc, rect1, WinNativeFormsBASE.CreateSolidBrush(vbRed))
                    WinNativeFormsBASE.SelectClipRgn(ps_hdc, vbNullPtr)
                    WinNativeFormsBASE.DeleteObject(complexRgn)
                End If
                
                Select Case shape
                    Case ShapeConstants.vbShapeOval, ShapeConstants.vbShapeCircle
                        GDI32_Ellipse(ps_hdc, X, Y, X + Width, Y + Height)
                    Case ShapeConstants.vbShapeRectangle, ShapeConstants.vbShapeSquare
                        GDI32_Rectangle(ps_hdc, X, Y, X + Width, Y + Height)
                    Case ShapeConstants.vbShapeRoundedRectangle, ShapeConstants.vbShapeRoundedSquare
                        GDI32_RoundRect(ps_hdc, X, Y, X + Width, Y + Height, CLng(RoundedCornerSize * UnitPixelScale), CLng(RoundedCornerSize * UnitPixelScale))
                    Case ShapeConstants.vbShapeStar
                        GDI32_Polygon(ps_hdc, points, sides + 1)
                    Case ShapeConstants.vbShapeArrowLeft, ShapeConstants.vbShapeArrowRight
                        GDI32_Polygon(ps_hdc, points, 7)
                    Case ShapeConstants.vbShapeArrowUp, ShapeConstants.vbShapeArrowDown
                        GDI32_Polygon(ps_hdc, points, 7)
                End Select

                If backBrush <> 0 Then
                    WinNativeFormsBASE.GDI32_SelectObject(ps_hdc, oldBrush)
                End If
                
                If pen <> 0 Then
                    WinNativeFormsBASE.GDI32_SelectObject(ps_hdc, oldPen)
                End If

                WinNativeFormsBASE.WindowsAPI.GDI32_SetBackMode(ps_hdc, oldBkMode)

                If angleData.isActive Then
                    UndoWorldTransformAngle(angleData, ps_hdc)
                End If
                
            RootWindowElement.EndPaint(ps)
            Handled = True     ' swallow up the event

            If backBrush <> 0 Then WinNativeFormsBASE.WindowsAPI.GDI32_DeleteObject(backBrush)
            If pen <> 0 Then WinNativeFormsBASE.WindowsAPI.GDI32_DeleteObject(pen)

        End Sub

        Private Sub OnChangeProp() _
                Handles BackColor.OnPropertyLet, _
                        BackStyle.OnPropertyLet, _
                        BorderColor.OnPropertyLet, _
                        BorderStyle.OnPropertyLet, _
                        BorderWidth.OnPropertyLet, _
                        DrawMode.OnPropertyLet, _
                        FillColor.OnPropertyLet, _
                        FillColorAlt.OnPropertyLet, _
                        FillStyle.OnPropertyLet, _
                        Shape.OnPropertyLet, _
                        RoundedCornerSize.OnPropertyLet, _
                        VariationA.OnPropertyLet, _
                        VariationB.OnPropertyLet, _
                        VariationC.OnPropertyLet, _
                        Angle.OnPropertyLet

            Me.WindowlessRefresh()
        End Sub
        
        Private Sub AngleChanged() _
                Handles Angle.OnPropertyLet
            
            Me.RootWindowElement.AngleChanged(Angle <> 0)
            Me.WindowlessRefresh()
        End Sub
        
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Get _Default() As Long
            Return Me.Shape
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Let _Default(Value As Long)
            Me.Shape = CType(Of ShapeConstants)(Value)
        	Me.WindowlessRefresh()
        End Property
        
        Private Sub HandleResizeWindowless(ByVal oldLeft As Long, ByVal oldTop As Long, ByVal oldWidth As Long, ByVal oldHeight As Long, _
                                               ByVal newLeft As Long, ByVal newTop As Long, ByVal newWidth As Long, ByVal newHeight As Long) _
                Handles RootWindowElement.ResizeWindowless
                
            On Error Resume Next
            Dim containerHwnd As LongPtr = CLngPtr(_BaseControl.Container.hwnd)
            On Error GoTo 0
            
            If containerHwnd = 0 Then
                ' Windowless UC container...  FIXME need to pass on the RECTs to refine the InvalidateRect passed to the UC site
                CommonRaiseViewChanged(_BaseControl.Container)
                Exit Sub
            End If
            
            Dim rect As WinNativeFormsBASE.RECT
            If (Me.Angle <> 0) Or InternalLastPaintWasAngled Then
                ' For now we just update the whole container, but we could at least refine the rectangle to contain all 4 corner points
                ' (using translateXY), but we'd need to also get oldAngle and newAngle in order to work out the real bounds
                WinNativeFormsBASE.WindowsAPI.InvalidateRect(containerHwnd, vbNullPtr, 1)
                Exit Sub
            End If
            
            CommonResizeWindowless(containerHwnd, CLng(Round(BorderWidth / 2) + 1), oldLeft, oldTop, oldWidth, oldHeight, newLeft, newTop, newWidth, newHeight)
        End Sub
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
                
    #End Region
    
End Class