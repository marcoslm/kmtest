[Description("A Win32 native Timer")]
[WindowsControl("/miscellaneous/ICONS??/Timer??.png")]
[ClassId("33AD4F28-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("CBF980C9-52E5-41E8-A1FF-CA3BD890F8F8")]    ' FIXME implement {33AD4F29-6699-11CF-B70C-00AA0060D393} for backcompat
[COMCreatable(False)]
[EventsUseDispInterface]
[ComImport(True)]
Class Timer
    
    #Region "INHERITANCE"
 
        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlNotFocusable Via _BaseControl = New WinNativeFormsBASE.BaseControlNotFocusable(ControlTypeConstants.vbTimer)

    #End Region
        
    #Region "STATE"
    
        [Description("")]
            Public Interval As Long = 0
        [Description("")]
        [Serialize(True, "Enabled")]
            Private EnabledINIT As Boolean = True

            Private WithEvents InternalTimer As WindowsControls.WindowsControlTimer
        
    #End Region

    #Region "EVENTS"
    
        [DefaultDesignerEvent]
        [Description("")]
            Event Timer()
    
    #End Region
               
    #Region "MEMBERS"
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
            Implements IWindowsControl.Initialize
            
            Me.InternalStateReset()     ' resets all the base class state
            With ControlContext.GetSerializer
                If Not .Deserialize(Me) Then
                    'Caption_INIT = "Timer"
                End If
                'IsDesignMode = .IsDesignMode
            End With
            
            With CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX)
                .WindowlessEnabled = EnabledINIT
            End With
            
            ControlContext.SetBaseControlInfoPtr(Me.InternalBaseControlInfoPtrX)
            
            Me.Initialize(ControlContext)
            
            ControlContext.SetControlArrayIndex(CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).ControlArrayIndex)
            
            Set Me.InternalTimer = CType(Of WindowsControlTimer)(ControlContext.CreateTimer())
            Me.InternalHandleChangedTimer()
        End Sub
        
        Private Sub HandleDestroy() _
            Implements IWindowsControl.Destroy

            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
            ' disconnect anything that causes a circular reference here
            Set InternalTimer = Nothing
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub

        #If LOG_TERMINATE Then
            Private Sub Class_Terminate()
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            End Sub
        #End If
        
        Private Sub InternalHandleChangedTimer()
        	Dim InternalTimer As Any = Me.InternalTimer
            If InternalTimer IsNot Nothing Then
                InternalTimer.Interval = Interval
                InternalTimer.Enabled = CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).WindowlessEnabled
            End If
        End Sub

        Private Sub HandleChangedTimer() _
                Handles Interval.OnPropertyLet
                                        
            Me.InternalHandleChangedTimer()
        End Sub
        
        Private Sub HandleTimer() _
                Handles InternalTimer.OnTimer
                
            RaiseEvent Timer
        End Sub
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Get _Default() As Boolean
            Return Me.Enabled
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Let _Default(ByVal Value As Boolean)
            Me.Enabled = Value      ' FIXME does this actually trigger HandleChangedTimer? probably not, as we are calling from the internal interface
        End Property
        
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property

        [Serialize(False)]
        Public Property Get Enabled() As Boolean
            Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).WindowlessEnabled
        End Property
    
        [Serialize(False)]
        Public Property Let Enabled(ByVal Value As Boolean)
            CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).WindowlessEnabled = Value
            Me.InternalHandleChangedTimer()
        End Property
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
        
    #End Region

End Class