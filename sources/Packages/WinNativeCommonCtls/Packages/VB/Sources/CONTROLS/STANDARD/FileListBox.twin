[Description("A Win32 native FileListBox")]
[WindowsControl("/miscellaneous/ICONS??/FileListBox??.png")]
[ClassId("33AD4F60-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("EC734189-8A9A-4FFA-85F3-4795FB07AEAB")]  ' FIXME implement {33AD4F61-6699-11CF-B70C-00AA0060D393} for backcompat
[COMCreatable(False)]
[EventsUseDispInterface]
[ComImport(True)]
Class FileListBox

    #Region "INHERITANCE"

        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlFocusable Via _BaseControl = New WinNativeFormsBASE.BaseControlFocusable(ControlTypeConstants.vbFileListBox)
 
    #End Region
        
    #Region "STATE"
    
        [Description("")]
            Public BorderStyle As VBRUN.ControlBorderStyleConstants = ControlBorderStyleConstants.vbFixedSingleBorder
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public BackColor As OLE_COLOR = VBRUN.SystemColorConstants.vbWindowBackground
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public ForeColor As OLE_COLOR = VBRUN.SystemColorConstants.vbWindowText
        [Description("")]
            Public Archive As Boolean = True
        [Description("")]
            Public Hidden As Boolean = False
        [Description("")]
            Public Normal As Boolean = True
        [Description("")]
            Public ReadOnly As Boolean = True
        [Description("")]
            Public System As Boolean = False
        [Description("")]
            Public MultiSelect As MultiSelectConstants = MultiSelectConstants.vbMultiSelectNone
        [Description("")]
            Public Pattern As String = "*.*"
              
        [Description("VB6 doesn't trigger the Scroll event for mouse-wheel events.  Set this to True to generate Scroll events in response to mouse-wheel notifications")]
            Public WheelScrollEvent As Boolean = True

        [Description("")]
            Public IntegralHeight As Boolean = True

        [Serialize(False)]
        [Description("")]
            Public Path As String

            Private CachedTopIndex As Long
            Private IsInitializing As Boolean
            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private OLEDragDropHandler As WinNativeFormsBASE.OLEDragDropHandler
            Private IsRefreshing As Boolean
            Private CachedPattern As String
            Private CachedPath As String
            Private MouseDownNeedsManualRelease As Boolean
                        
        Public HelpContextID As Long
        Public OLEDragMode As VBRUN.OLEDragConstants
        
        [Description("Opacity, given as a percentage, 0 - 100.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
            Public Opacity As Double = 100
        
        [CustomDesigner("designer_SpectrumWindowsOrClear")]
        [Description("A color, when set, that will appear fully transparent in the window.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
            Public TransparencyKey As OLE_COLOR = -1
            
        [CustomDesigner("designer_RestrictedOLEDropMode")]
            Public OLEDropMode As VBRUN.OLEDropConstants

            Public WhatsThisHelpID As Long
        
        Public Sub OLEDrag()
            CommonOLEDrag(Me)
        End Sub
                        
        Public Sub ShowWhatsThis()
            HelpSystem.ShowControlHelpManual(Me)
        End Sub
            
    #End Region

    #Region "EVENTS"
    
        [DefaultDesignerEvent]
        [Description("")]
        [DispId(&HEAEA0004)]
            Event Click()
        [Description("")]
        [DispId(&HEAEA0005)]
            Event DblClick()
        [Description("")]
            Event PathChange()
        [Description("")]
            Event PatternChange()
        [Description("")]
        [DispId(&HEAEA0006)]
            Event GotFocus()
        [Description("")]
        [DispId(&HEAEA0008)]
            Event KeyDown(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0009)]
            Event KeyPress(KeyAscii As Integer)
        [Description("")]
        [DispId(&HEAEA000A)]
            Event KeyUp(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0001)]
            Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0002)]
            Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0003)]
            Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0007)]
            Event LostFocus()
        [Description("")]
            Event Initialize()
            
        [Description("")]
        [DispId(&HEAEA000B)]
            Event DragDrop(Source As Control, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA000C)]
            Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        Event OLECompleteDrag(Effect As Long)
        Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        Event OLESetData(Data As DataObject, DataFormat As Integer)
        Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)
        [DispId(&HEAEA000D)]
            Event Validate(Cancel As Boolean)
        Event Scroll()

    #End Region

    #Region "MEMBERS"
        
        #If LOG_TERMINATE Then
            Private Sub Class_Terminate()
                    Debug.Print CurrentComponentName & "." & CurrentProcedureName
            End Sub
        #End If
            
        Private Sub HandleLoad() _
                Handles RootWindowElement.Load
            
            Dim Opacity As Any = Me.Opacity
            If ((Opacity >= 0) And (Opacity < 100)) Or (TransparencyKey <> -1) Then
                SyncOpacity
            End If
        End Sub
        
        Private Sub SyncOpacity() _ 
                Handles Opacity.OnPropertyLet, _
                        TransparencyKey.OnPropertyLet
            
            CommonSyncOpacity(Me.TransparencyKey, Me.Opacity, Me.RootWindowElement.Handle)
        End Sub
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
                
            Me.InternalStateReset()     ' resets all the base class state
            Me.Path = vbNullString
            Me.CachedTopIndex = 0
            Me.IsInitializing = True
            Me.IsRefreshing = False
            Me.CachedPattern = vbNullString
            Me.CachedPath = vbNullString
            Me.MouseDownNeedsManualRelease = False
            
            With ControlContext.GetSerializer
                If Not .Deserialize(Me) Then
                    'Caption_INIT = "FileListBox"
                End If
                'IsDesignMode = .IsDesignMode
            End With
            
            Dim Opacity As Any = Me.Opacity
            If Opacity > 100 Then Me.Opacity = 100
            If Opacity < 0 Then Me.Opacity = 0
            
            Dim styles As Long = GetStyles()
            Dim extendedStyles As Long
                
                extendedStyles += If(ControlContext.IsPlacedOnUserControl, 0&, WinNativeFormsBASE.GeneralConsts.WindowExtendedStyles.WS_EX_NOPARENTNOTIFY)
                If Me.BorderStyle = ControlBorderStyleConstants.vbFixedSingleBorder Then
                    If _BaseControl.Appearance = AppearanceConstants.vbAppear3d Then
                        extendedStyles += WinNativeFormsBASE.WS_EX_CLIENTEDGE
                    End If
                End If
                
            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InitData.ClassName = "ThunderListBox"
            InitData.Caption = ""
            InitData.WindowStyles = styles
            InitData.ExtendedStyles = extendedStyles
            InitData.Flags = NeedsPrePostMessages Or _
                                ForwardGotFocus Or _
                                ForwardLostFocus Or _
                                ForwardKeyDown Or _
                                ForwardKeyUp Or _
                                ForwardKeyPress Or _
                                ForwardMouseMove Or _
                                ForwardMouseUp Or _
                                ForwardDragOver Or _
                                ForwardValidate
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
        End Sub
        
        Private Function GetStyles() As Long
            Dim styles As Long = ListBoxStyles.LBS_NOTIFY + _
                        CLng(WinNativeFormsBASE.GeneralConsts.WindowStyles.WS_VSCROLL) + _
                        If(Me.IntegralHeight, 0&, ListBoxStyles.LBS_NOINTEGRALHEIGHT)
            
            If Me.BorderStyle = ControlBorderStyleConstants.vbFixedSingleBorder Then
                If _BaseControl.Appearance = AppearanceConstants.vbAppear3d Then
                Else
                    styles += WinNativeFormsBASE.GeneralConsts.WindowStyles.WS_BORDER
                End If
            End If
            
            Dim lbStyles As Long
            Select Case Me.MultiSelect
                Case MultiSelectConstants.vbMultiSelectSimple: lbStyles = ListBoxStyles.LBS_MULTIPLESEL
                Case MultiSelectConstants.vbMultiSelectExtended: lbStyles = ListBoxStyles.LBS_EXTENDEDSEL
            End Select
            
            Return styles + lbStyles
        End Function
        
        Private Sub HandleGetColors(ByVal hdc As LongPtr, ByRef BackBrushOut As LongPtr, ByVal ControlType As ControlTypeConstants) _
                Handles RootWindowElement.GetColors
                
            HandleGetColorsCommon(hdc, BackBrushOut, Me)
        End Sub
        
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
                
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
            ' disconnect anything that causes a circular reference here
            Set Me.Font = Nothing
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub
        
        Private Sub HandleCreate() _
                Handles RootWindowElement.Create
            
            'Debug.Print "FileListBox HWND: " & Hex(Me.hWnd)
            Dim rect As WinNativeFormsBASE.RECT
            
            ' Set the font into the control first.  If IntegralHeight is active, then the control will adjust accordingly.
            SyncFontProperties()
            If Me.IntegralHeight Then
                Me.InternalSyncHeight()
            End If
                        
            Me.Path = App.Path
            SyncFiles()
            SyncOLEDropMode()
            
            RaiseEvent Initialize()
            IsInitializing = False
        End Sub
        
        Private Sub SyncRecreate() _
                Handles MultiSelect.OnPropertyLet, _
                        IntegralHeight.OnPropertyLet
                
            Dim TopIndex As Long = Me.TopIndex
            Dim Path As String = Me.Path
            Dim ListIndex As Long = Me.ListIndex
            RecreateWindow(GetStyles())
            Me.Path = Path
            SyncFiles()
            Me.TopIndex = TopIndex
            If ListIndex <> -1 Then Me.ListIndex = ListIndex
        End Sub
    
        Sub SyncFiles()
        	
            If IsRefreshing = True Then Exit Sub
            IsRefreshing = True
                        
            If Left(Me.Path, 4) = "\\?\" Then Me.Path = Right$(Me.Path, Len(Me.Path) - 4)
            
            If Right(Me.Path, 1) <> "\" Then Me.Path += "\"
            If Me.Pattern = "" Then Me.Pattern = "*.*"
            
            On Error GoTo InvalidPath
            
                Dim Hidden As Any = Me.Hidden
                Dim System As Any = Me.System
                                
                Dim NotFlags As Long = If(Me.Archive, 0&, VbFileAttribute.vbArchive) + _
                            If(Hidden, 0&, VbFileAttribute.vbHidden) + _
                            If(Me.ReadOnly, 0&, VbFileAttribute.vbReadOnly) + _
                            If(System, 0&, VbFileAttribute.VbSystem)
                
                Dim InclusionFlags As VbFileAttribute = If(Hidden, vbHidden, 0&) + _
                                    If(System, VbSystem, 0&)
                
                Dim HideFilesWithNoAttributes As Boolean
                If Me.Normal = False Then HideFilesWithNoAttributes = True
                
                Dim Path As Any = Me.Path
                ' Before emptying the list, first check the path is valid...
                If (GetAttr(Path) And vbDirectory) = 0 Then Err.Raise 76
                                
                SendMessageCtl(ListBoxMessages.LB_RESETCONTENT, 0, 0)
                CachedPath = Path
                Dim Pattern As Any = Me.Pattern
                CachedPattern = Pattern
 
                Dim splitPattern As Variant = Split(Pattern, ";")
                Dim _pattern As Variant
                
                On Error Resume Next
                Dim currentItem As String = Dir(Path & "*.*", InclusionFlags)
                If Len(currentItem) = 0 Then Err.Raise 76

                While Len(currentItem) > 0
                    If (currentItem <> ".") And (currentItem <> "..") Then
                    	Dim attribs As Long = GetAttr(Path & currentItem)
                        If (attribs And NotFlags) = 0 Then
                            If HideFilesWithNoAttributes = False Or attribs <> 0 Then
                                For Each _pattern In splitPattern
                                    If currentItem Like _pattern Then
                                        CommonListboxAddOrInsert(RootWindowElement, currentItem)
                                        Exit For
                                    End If
                                Next
                                '    ItemData(Me.ListCount - 1) = Me.DirLevel
                            End If
                        End If
                    End If
                    currentItem = Dir()
                Wend
                        
        ExitCleanup:
            IsRefreshing = False
            Exit Sub
            
        InvalidPath:
            Err.Raise 76, , "Path not found"
            Resume ExitCleanup

        End Sub
        
        [Serialize(False)]
        Public Property Get SelCount() As Long
            Return CLng(SendMessageCtl(ListBoxMessages.LB_GETSELCOUNT, 0, 0))
        End Property
        
        Private Sub HandlePreMouseDown(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single, _
                                        ByRef SwallowMessage As Boolean) _
                Handles RootWindowElement.PreMouseDown
            
            If OLEDragMode = vbOLEDragAutomatic Then
            	Dim RootWindowElement As Any = Me.RootWindowElement
                Dim itemIndex As Long = CommonListBoxPreMouseDownHandleOLEDragDetect(RootWindowElement, Me.ControlContext, MouseDownNeedsManualRelease, Me.ListIndex, X, Y)
                If itemIndex <> -1 Then
                    Dim rootPath As String = Me.Path
                    If Right(rootPath, 1) <> "\" Then rootPath += "\"
                    Dim setValue As Variant
                    If Me.MultiSelect Then
                        setValue = CommonGetSelectedItemsAsDelimitedString(RootWindowElement, rootPath)
                    Else
                        setValue = rootPath & List(itemIndex)
                    End If
                    CommonOLEDrag(Me, setValue, True, False)
                    SwallowMessage = True
                End If
            End If
        End Sub
            
        Private Sub HandleMouseDown(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseDown
                
            RaiseEvent MouseDown(CInt(Button), CInt(ShiftState), X, Y)
            
            If MouseDownNeedsManualRelease = True Then
                MouseDownNeedsManualRelease = False
                WinNativeFormsBASE.ReleaseCapture()
                RaiseEvent MouseUp(CInt(Button), CInt(ShiftState), X, Y)
            End If
        End Sub
        
        Private Sub HandleCommand(ByVal NotificationCode As ListBoxNotifications, _
                                    ByVal Identifier As Integer) _
                Handles RootWindowElement.Command
                
            Select Case NotificationCode
                Case ListBoxNotifications.LBN_SELCHANGE
                    CheckTopIndexChanged()
                    RaiseEvent Click()
                Case ListBoxNotifications.LBN_SELCANCEL
                    RaiseEvent Click()
                Case ListBoxNotifications.LBN_DBLCLK
                    RaiseEvent DblClick
            End Select
        End Sub
                
        [Hidden]
        Public Sub AddItem(ByVal Value As String, Optional ByVal Index As Variant)
            Err.Raise 438
        End Sub
        
        [Hidden]
        Public Sub RemoveItem(ByVal Index As Variant)
            Err.Raise 438
        End Sub
        
        [Hidden]
        Public Sub Clear()
            Err.Raise 438
        End Sub
        
        [Serialize(False)]
        Public Property Get List(ByVal Index As Long) As String
        	Return CommonGetListBoxStringByIndex(RootWindowElement, Index)
        End Property

        [Serialize(False)]
        Public Property Get ListCount() As Long
            Return CLng(SendMessageCtl(ListBoxMessages.LB_GETCOUNT, 0, 0))
        End Property
        
        [Serialize(False)]
        Public Property Get TopIndex() As Long
            Return CLng(SendMessageCtl(ListBoxMessages.LB_GETTOPINDEX, 0, 0))
        End Property
        
        [Serialize(False)]
        Public Property Let TopIndex(ByVal Value As Long)
            SendMessageCtl(ListBoxMessages.LB_SETTOPINDEX, Value, 0)
        End Property
        
        [Serialize(False)]
        Public Property Get ListIndex() As Long
            Return CLng(SendMessageCtl(ListBoxMessages.LB_GETCURSEL, 0, 0))
        End Property
        
        [Serialize(False)]
        Public Property Let ListIndex(ByVal Value As Long)
            If Me.ListIndex <> Value Then
            SendMessageCtl(ListBoxMessages.LB_SETCURSEL, Value, 0)
            End If
        End Property
        
        [Serialize(False)]
        Public Property Get FileName() As String
            If Me.ListIndex = -1 Then Exit Property
            Return Me.List(Me.ListIndex)
        End Property
        
        [Serialize(False)]
        Public Property Let FileName(ByVal Value As String)
            Dim index As Long = CLng(SendMessageCtl(LB_FINDSTRINGEXACT, -1, StrPtrSafe(Value)))
            If index <> -1 Then
                Me.ListIndex = index
            End If
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Get _Default() As String
            Return FileName
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Let _Default(Value As String)
            FileName = Value
        End Property
        
        [Serialize(False)]
        Private Sub HandlePathChange() _
                Handles Path.OnPropertyLet
                
            If Path = CachedPath Then Exit Sub
            SyncFiles()
            RaiseEvent PathChange()
        End Sub
        
        [Serialize(False)]
        Private Sub HandlePatternChange() _
                Handles Pattern.OnPropertyLet
                
            If Pattern = CachedPattern Then Exit Sub
            SyncFiles()
            RaiseEvent PatternChange()
        End Sub
        
        [Serialize(False)]
        Private Sub HandleAttributesChange() _
                Handles Archive.OnPropertyLet, _
                        Hidden.OnPropertyLet, _
                        Normal.OnPropertyLet, _
                        ReadOnly.OnPropertyLet, _
                        System.OnPropertyLet
                        
            SyncFiles()
            RaiseEvent PatternChange()
        End Sub
                
        Private Sub ColorsChanged() _
                Handles BackColor.OnPropertyLet, _
                        ForeColor.OnPropertyLet
            
            Me.Refresh
        End Sub
        
        Public Sub Refresh()
            Me.SyncFiles()
            CommonRedrawEraseInvalidate(Me.RootWindowElement)
        End Sub
        
        [Serialize(False)]
        Public Property Get Selected(ByVal Index As Long) As Boolean
            Return SendMessageCtl(ListBoxMessages.LB_GETSEL, Index, 0)
        End Property
        
        [Serialize(False)]
        Public Property Let Selected(ByVal Index As Long, ByVal NewValue As Boolean)
            If Selected(Index) <> NewValue Then
                If Me.MultiSelect = vbMultiSelectNone Then
                    SendMessageCtl(ListBoxMessages.LB_SETCURSEL, Index, 0)
                Else
                    SendMessageCtl(ListBoxMessages.LB_SETSEL, If(NewValue, 1, 0), Index)
                End If
                RaiseEvent Click()
            End If
        End Property
        
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property

        Private Sub BorderStyleChanged() _  
        	    Handles BorderStyle.OnPropertyLet
                
            SyncBorderStyle(Me)
        End Sub
        
        Private Function CheckTopIndexChanged() As Boolean
            Dim topIndex As Long = Me.TopIndex
            If CachedTopIndex <> topIndex Then
                CachedTopIndex = topIndex
                RaiseEvent Scroll
                Return True
            End If
            Return False
        End Function

        Private Sub PostProcessMessage(ByVal Message As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByRef ReturnValue As LongPtr, ByVal PostMessageCookie As Long) _
                Handles RootWindowElement.PostProcessMessage

            Select Case Message
                Case ListBoxMessages.LB_SETTOPINDEX
                    CheckTopIndexChanged()
            End Select
        End Sub
        
        Private Sub HandleScroll(ByVal ScrollType As WinNativeFormsBASE.SCROLLNOTIFY, ByVal IsHorizontal As Boolean) _
                Handles RootWindowElement.Scroll
             
            If IsHorizontal = False Then
                If CommonHandleVerticalScroll(Me.RootWindowElement, ScrollType, Me.ListCount) = True Then
                    Dim Value As Long = WinNativeFormsBASE.WindowsAPI.USER32_GetScrollValue(Me.RootWindowElement, WinNativeFormsBASE.SB_VERT)
                    SendMessageCtl(ListBoxMessages.LB_SETTOPINDEX, Value, 0)
                End If
            End If
            'CheckTopIndexChanged()
        End Sub
        
        Private Sub HandleWheel(ByVal Delta As Integer, ByVal Horizontal As Boolean) _
                Handles RootWindowElement.MouseWheel
                
            If Horizontal = False Then
                If WheelScrollEvent Then CheckTopIndexChanged()
            End If
        End Sub
                
        Private Sub SyncOLEDropMode() _
                Handles OLEDropMode.OnPropertyLet
                
            BaseSyncOLEDropMode(Me, Me.OLEDropMode, Me.OLEDragDropHandler, False, False)
        End Sub
        
        Public Function SelectedIndices() As Collection
            Return CommonGetSelectedIndices(RootWindowElement.Handle)
        End Function
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
        
    #End Region
    
End Class