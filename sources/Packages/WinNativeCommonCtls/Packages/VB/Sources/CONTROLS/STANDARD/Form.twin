[ComImport(True)]
[InterfaceId("B4B17669-78DC-4555-A6CE-20587DD8A9CD")]
Interface TbCommonContainerPrivate Extends stdole.IUnknown
    Sub RebuildMenus()
    Sub RaiseResize()
    Sub RaisePaint()
    Sub RaiseViewChanged()
    Sub RaiseChange()
End Interface

[WindowsControl("/miscellaneous/ICONS??/Frame??.png")]
[ClassId("33AD4F38-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("1F9211B8-91CD-43CD-82AF-EF3D9F0690B4")]    ' FIXME implement {33AD4F39-6699-11CF-B70C-00AA0060D393} for backcompat
' WARNING: above InterfaceId is referred to as IID_ITBForm in tB Sources
[COMCreatable(False)]
[COMExtensible(True)]
[EventsUseDispInterface]
[ComImport(True)]
Class Form
     
     #Region "INHERITANCE"
     
        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseForm Via _BaseForm = New WinNativeFormsBASE.BaseForm
        [ImplementsViaPrivateFriendlies] Implements GraphicsBase Via _BaseGraphics = New GraphicsBase()
        [ImplementsViaPrivateFriendlies] Implements OLEDragDropHelper Via _BaseOLEDragDropHelper = New OLEDragDropHelper
        Implements TbCommonContainerPrivate
        
    #End Region
        
    #Region "STATE"

        ' [ CustomDesigner ("designer_SpectrumWindows") ]
        ' [ Description ("") ]
        '     Public BackColor As OLE_COLOR = VBRUN.SystemColorConstants.vb3DFace       ' FIXME this is linked to Appearance
        ' [ CustomDesigner ("designer_SpectrumWindows") ]
        '     Public ForeColor As OLE_COLOR = VBRUN.SystemColorConstants.vbButtonText
            
            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private IsInitialized As Boolean
            Private IsDesignMode As Boolean
            
        [Serialize(True, "Picture")]
        [CustomDesigner("designer_PictureBytes")]
            Private ReadOnly PictureINIT() As Byte
        [Serialize(True, "Icon")]
        [CustomDesigner("designer_IconBytes")]
            Private ReadOnly IconINIT() As Byte

        [Serialize(True, "TopMost")]
            Private ReadOnly TopMostINIT As Boolean = False                      ' FIXME could make this not ReadOnly
        
        [Serialize(True, "AlwaysShowKeyboardCues")]
            Private AlwaysShowKeyboardCuesINIT As Boolean = False
        
        [Description("Opacity, given as a percentage, 0 - 100")]
        Public Opacity As Double = 100
        
        [CustomDesigner("designer_SpectrumWindowsOrClear")]
        [Description("A color, when set, that will appear fully transparent in the window")]
        Public TransparencyKey As OLE_COLOR = -1

        [Unimplemented]
        [Serialize(True, "Palette")]
        [CustomDesigner("designer_PictureBytes")]
            Private ReadOnly PaletteINIT() As Byte
        [Unimplemented]
        [Serialize(False)]
            Public Palette As StdPicture

            Public HelpContextID As Long
        [Unimplemented]
            Public LinkMode As VBRUN.LinkModeConstants
        [Unimplemented]
            Public LinkTopic As String
        
        [Unimplemented]
            Public PaletteMode As VBRUN.PaletteModeConstants
        [Unimplemented]
            Public RightToLeft As Boolean

        [Description("Displays '?' icon in the titlebar, only if MinButton=False, MaxButton=False, ControlBox=True and BorderStyle is not a toolwindow")]
        [Serialize(True, "WhatsThisButton")]
            Private WhatsThisButtonINIT As Boolean

            Public WhatsThisHelp As Boolean

        [Unimplemented]
            Public NegotiateMenus As Boolean
            
        [Serialize(True, "MinWidth")]
        [Description("The minimum width of the CLIENT area, in twips")]
            Private MinWidthINIT As Double
        [Serialize(True, "MinHeight")]
        [Description("The minimum height of the CLIENT area, in twips")]
            Private MinHeightINIT As Double
        [Serialize(True, "MaxWidth")]
        [Description("The maximum width of the CLIENT area, in twips")]
            Private MaxWidthINIT As Double
        [Serialize(True, "MaxHeight")]
        [Description("The maximum height of the CLIENT area, in twips")]
            Private MaxHeightINIT As Double
            
        [Serialize(False)]
        [Unimplemented]
            Public ReadOnly Image As StdPicture          ' persistent bitmap
        
        [Description("If set to True, TextBox content will be auto-selected when TAB key is used to focus their controls, provided the TextBox control has the TabFocusAutoSelect property set to True")]
        [Serialize(True, "TabFocusAutoSelect")]
            Private TabFocusAutoSelectINIT As Boolean = False
            
        Public Sub OLEDrag()
            CommonOLEDrag(Me)
        End Sub
            
        Public Sub PrintForm(ByVal ImplicitEndDoc As Boolean = True, OutputAtCurrentPosition As Boolean = False)
            Me.InternalPrintForm(Printer, ImplicitEndDoc, OutputAtCurrentPosition)
        End Sub
            
        [Unimplemented]
            Public Function Point(ByVal X As Single, ByVal Y As Single) As Long
            End Function
                        
            Public Sub ValidateControls()
                On Error GoTo Error
                Dim ActiveControl As Any = Me.ActiveControl
                If ActiveControl IsNot Nothing Then
                    If ActiveControl.CausesValidation Then
                        Dim Cancel As Boolean
                        On Error Resume Next
                    	RaiseEventByName2(ActiveControl, "Validate", Cancel)
                        If Cancel Then
                            On Error GoTo 0
                        	Err.Raise 380, , "Invalid property value"
                        End If
                    End If
                End If
                Exit Sub
                Error:
            End Sub
            
            Public Sub WhatsThisMode()
            	With Me
                	Dim WhatsThisHelp As Any = Me.WhatsThisHelp
                    Dim hWnd As Any = Me.hWnd
            	End With
                If WhatsThisHelp Then
                    Const SC_CONTEXTHELP As Long = 61824
                    WinNativeFormsBASE.SendMessageW(hWnd, WinNativeFormsBASE.WM_SYSCOMMAND, SC_CONTEXTHELP, 0)
                End If
            End Sub
                        
    #End Region

    #Region "EVENTS"
    
        Event Activate()
        Event Deactivate()
        Event Initialize()
        [DefaultDesignerEvent] Event Load()
        [DispId(&HEAEA0004)]
            Event Click()
        [DispId(&HEAEA0005)]
            Event DblClick()
        [DispId(&HEAEA0006)]
            Event GotFocus()
        [DispId(&HEAEA0008)]
            Event KeyDown(KeyCode As Integer, Shift As Integer)
        [DispId(&HEAEA0009)]
            Event KeyPress(KeyAscii As Integer)
        [DispId(&HEAEA000A)]
            Event KeyUp(KeyCode As Integer, Shift As Integer)
        [DispId(&HEAEA0007)]
            Event LostFocus()
        [DispId(&HEAEA0001)]
            Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [DispId(&HEAEA0002)]
            Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [DispId(&HEAEA0003)]
            Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event Paint()
        Event Resize()
        Event Terminate()
        Event Unload(Cancel As Integer)
        [Description("")]
        [DispId(&HEAEA000B)]
            Event DragDrop(Source As Control, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA000C)]
            Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        [Unimplemented] Event LinkClose()
        [Unimplemented] Event LinkError(LinkErr As Integer)
        [Unimplemented] Event LinkExecute(CmdStr As String, Cancel As Integer)
        [Unimplemented] Event LinkOpen(Cancel As Integer)
        Event OLECompleteDrag(Effect As Long)
        Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        Event OLESetData(Data As DataObject, DataFormat As Integer)
        Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)
        Event QueryUnload(Cancel As Integer, UnloadMode As Integer)
        
    #End Region
               
    #Region "MEMBERS"
                
        Private Sub Class_Terminate()
    	    RaiseEvent Terminate()
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
        End Sub
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize

            Me.InternalStateReset()     ' resets all the base class state
            Me.InternalStateResetOLEDragDrop()
            Me.InternalStateResetGraphics()
            Me.IsInitialized = False
            Me.MenusPrepared = False
            Erase Me.Menus
            
            With ControlContext.GetSerializer
                ' This allows dispatch calls to pass on to the outer form controller, allowing for extensibility  
                CType(Of ITwinBasicInternalClassSupport)(Me).OverrideDispatchHandler .GetRootClassDispatch  ' this causes a circular reference that needs to be manually broken in IOleObject_Close
                Me.IsDesignMode = .IsDesignMode
            
                If Not .Deserialize(Me) Then
                    BackColor = SystemColorConstants.vbButtonFace
                End If
            End With
            
            'RaiseEvent Initialize()         cant fire in constructor, as not assigned yet.  perhaps can now?
            'InternalInitFromSerializer(InternalSerializer)
            
            Dim Picture As StdPicture
            CommonLoadPictureInit(Picture, Me.PictureINIT)
            Set Me.InternalPicture = Picture
            CommonLoadPictureInit(Me.InternalIcon, Me.IconINIT)
            
            Dim Opacity As Any = Me.Opacity
            If Opacity > 100 Then Me.Opacity = 100
            If Opacity < 0 Then Me.Opacity = 0
            
            With CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX)
                .TabFocusAutoSelect = TabFocusAutoSelectINIT
                .WhatsThisButton = WhatsThisButtonINIT
                .AlwaysShowKeyboardCues = AlwaysShowKeyboardCuesINIT
                .BaseGraphicsInfoPtr = _BaseGraphics.InitBaseGraphicsInfo()
                .MinWidth = MinWidthINIT
                .MinHeight = MinHeightINIT
                .MaxWidth = MaxWidthINIT
                .MaxHeight = MaxHeightINIT
            End With
            
            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InitData.ClassName = If(_BaseGraphics.HasDC, "ThunderFormDC", "ThunderForm")
            InitData.Caption = ""
            InitData.WindowStyles = If(_BaseGraphics.ClipControls = True, WinNativeFormsBASE.WS_CLIPCHILDREN, 0&)
            InitData.ExtendedStyles = If(TopMostINIT = True, WinNativeFormsBASE.WS_EX_TOPMOST, 0&)
            InitData.Flags = ForwardGotFocus Or _
                                ForwardLostFocus Or _
                                ForwardKeyDown Or _
                                ForwardKeyUp Or _
                                ForwardKeyPress Or _
                                ForwardDoubleClick Or _
                                ForwardDragOver Or _
                                ForwardMouseDown Or _
                                ForwardMouseUp Or _
                                ForwardMouseMove Or _
                                ManualMouseCapture Or _
                                ForwardButtonClick Or _
                                ScaleAdjustMouseEvents
            If _BaseForm.MDIChild Then InitData.Flags += IsMDIChild
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
            
            _BaseGraphics.InitGraphics(RootWindowElement)
            InitOleDragDropHelper()
'            Me.[_BaseGraphics].SyncScaleMode(Me, Me.RootWindowElement)
        End Sub
        
        Private Sub InitOleDragDropHelper()
            _BaseOLEDragDropHelper.OLEDragDropInit(Me, ControlContext, RootWindowElement, True, False, False)
        End Sub
        
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
            
            ' disconnect anything that causes a circular reference here
            Me.InternalStateResetGraphics()
        End Sub
        
        Private Sub HandleLoad() _
                Handles RootWindowElement.Load
            
            If Moveable = False Then SyncMoveable()
            
            Dim Opacity As Any = Me.Opacity
            If ((Opacity >= 0) And (Opacity < 100)) Or (TransparencyKey <> -1) Then
                SyncOpacity
            End If
            
            If IsInitialized = False Then InitializeMe
            RaiseEvent Load()
            
            'InternalIsFirstResizeEventAfterLoad = True
        End Sub
        
        Private Sub HandlePreLoad() _
                Handles RootWindowElement.PreLoadForm
            
            ' At this point the HWND is available, but not correct size etc.
            If IsDesignMode = False Then
                PrepareMenus()
                RebuildMenus()
                IconChanged()
            End If
            
            Me.[_BaseGraphics].SyncScaleMode(Me, Me.RootWindowElement)
            SyncOLEDropMode()
            
            ' This has to happen here, as it can be accessed via ActiveX ambient properties during creation
            InternalSyncFontProperties(True)
            
        End Sub
        
        Private Sub HandlePreLoad2() _
                Handles RootWindowElement.PreLoadForm2
            
            RaiseEvent Initialize()
            
        End Sub
                
        Private Sub HandleActivateMDIChild() _
                Handles RootWindowElement.ActivateMDIChild
            Dim rootMenu As LongPtr
            Dim windowListMenu As LongPtr
            CommonBuildMenus(Menus, Me.Controls, rootMenu, windowListMenu, Me, 0, False, Nothing)
            'Debug.Print "MDI Child windowListMenu: " & windowListMenu
            RootWindowElement.SetMDIMenu(rootMenu, windowListMenu)
        End Sub
        
        Private Sub HandleDeactivateMDIChild() _
                Handles RootWindowElement.DeactivateMDIChild
           RootWindowElement.SetMDIMenu(vbNullPtr, vbNullPtr)
        End Sub
        
        Private Menus() As Menu
        Private MenusPrepared As Boolean = False
        
        Private Sub RuntimeMenuAdded(ByVal control As Object) Handles _
                RootWindowElement.NotifyRuntimeMenuAdded

            CommonRuntimeMenuAdded(CType(Of Menu)(control), Menus)
            RebuildMenus()
        End Sub
        
        Private Sub RuntimeMenuRemoved(ByVal control As Object) Handles _
                RootWindowElement.NotifyRuntimeMenuRemoved

            CommonRuntimeMenuRemoved(CType(Of Menu)(control), Menus)
            RebuildMenus()
        End Sub
        
        Private Sub PrepareMenus()
            If MenusPrepared = False Then
                CommonPrepareMenus(Me.Controls, Menus)
                MenusPrepared = True
            End If
        End Sub
        
        Private Sub ClearSubMenusCachedInfo(Container As Menu)
            CommonClearSubMenusCachedInfo(Container, Menus)
        End Sub
        
        Public Sub PopUpMenu(ByVal Menu As Object, Optional ByVal Flags As Variant, Optional ByVal X As Variant, Optional ByVal Y As Variant, Optional ByVal DefaultMenu As Variant)
            CommonPopUpMenu(Menus, RootWindowElement, Me.ControlContext, Menu, Flags, X, Y, DefaultMenu)
        End Sub
        
        Private Sub RebuildMenus() _
                Implements TbCommonContainerPrivate.RebuildMenus
        
            If Me.MDIChild = True Then Exit Sub
            
            'Dim menuBarHeightBefore As Long = GetMenuBarHeight()
            Dim hwnd As Any = RootWindowElement.Handle
            'Dim oldMenu As Any = GetMenu(hwnd)
            
            Dim rootMenu As Any = GetMenu(hwnd)
            Dim windowListMenu As LongPtr
            CommonBuildMenus(Menus, Me.Controls, rootMenu, windowListMenu, Me, 0, False, Nothing)
            SetMenu(hwnd, rootMenu)
            
            'If oldMenu <> 0 Then
            '    DestroyMenu(oldMenu)
            'End If
            
            'Dim menuBarHeightAfter As Long = GetMenuBarHeight()
            'Dim menuBarHeightChangedDelta As Long = menuBarHeightAfter - menuBarHeightBefore
            
            'If menuBarHeightChangedDelta <> 0 Then
            	'RootWindowElement.NotifyMenuHeightChanged(menuBarHeightAfter)
                'RootWindowElement.CreateControlsEnumerator
                'Me.Height += menuBarHeightChangedDelta / RootWindowElement.UnitPixelScale
            'End If
        
        End Sub
        
        Private Sub HandleActivate() _
            Handles RootWindowElement.Activate
                
            RaiseEvent Activate()
        End Sub

        Private Sub HandleDeactivate() _
                Handles RootWindowElement.Deactivate
                
            RaiseEvent Deactivate()
        End Sub
                
        Private Sub InitializeMe()
            
            Me.[_BaseGraphics].SyncScaleMode(Me, Me.RootWindowElement)
            
            ' FIXME this is in lieu of having a working Create event here
            _BaseGraphics.ChangeHDC(0, _BaseForm.hWnd, Me.RootWindowElement, _BaseGraphics.Picture, Me, True)
            IsInitialized = True
            
        End Sub
           
        'Private Declare PtrSafe Sub Sleep Lib "kernel32.dll" (ByVal dwMilliseconds As Long)
        Private Sub HandlePaint(ByRef Handled As Boolean) _
                Handles RootWindowElement.Paint
                
            'Debug.Print Now() & " Form.Paint"
            'Sleep(2000)
            
            ' Dim ps As WinNativeFormsBASE.PAINTSTRUCT
            ' Me.RootWindowElement.BeginPaint(ps)    ' you MUST use this method, and NOT the BeginPaint API directly
            '     ' FIXME check paint order
            '     RootWindowElement.PaintContainedWindowlessElements(ps.hdc)
            '     RaiseEvent Paint()
            ' Me.RootWindowElement.EndPaint(ps)
            ' Handled = True     ' swallow up the event
            
            Dim RootWindowElement As Any = Me.RootWindowElement
            
            If IsInitialized = False Then InitializeMe
    
            Dim ps As WinNativeFormsBASE.PAINTSTRUCT
            RootWindowElement.BeginPaint(ps)    ' you MUST use this method, and NOT the BeginPaint API 
                
                'Dim backBrush As LongPtr = WinNativeFormsBASE.WindowsAPI.GDI32_CreateSolidBrushColor(vbBlue)
                'WinNativeFormsBASE.USER32_FillWithBrush(RootWindowElementBase, ps.hdc, backBrush)       ' FIXME this is wrong for Windowless, as it uses RootWindowElement.Handle to get the rect
                'WinNativeFormsBASE.WindowsAPI.GDI32_DeleteObject(backBrush)
                
                Me.[_BaseGraphics].OnPaint(ps.hdc)
            
            RootWindowElement.EndPaint(ps)
            Handled = True     ' swallow up the event
        End Sub
                
        Private Sub CanClose(ByRef Cancel As Integer) _
                Handles RootWindowElement.CanClose
            
            RaiseEvent Unload(Cancel)
            
            If Cancel = False Then
                ' FIXME this should be in HandleDestroy?
                With CType(Of ITwinBasicInternalClassSupport)(Me)
                    .OverrideDispatchHandler Nothing  ' this breaks the circular reference
                End With
                Set Me.Font = Nothing
                [_HiddenModule].ResetFirstMethodAccessFlag(Me)
            End If
        End Sub
        
        [Serialize(False)]
        Public Property Get DpiScaleFactorX() As Double ' exposed as X/Y for future 
        	Return RootWindowElement.UnitPixelScale
        End Property
        
        [Serialize(False)]
        Public Property Get DpiScaleFactorY() As Double ' exposed as X/Y for future 
        	Return RootWindowElement.UnitPixelScale
        End Property
        
        Private Sub InternalRaiseResize() _
                Implements TbCommonContainerPrivate.RaiseResize
            
        	RaiseEvent Resize()
        End Sub

        Private Sub InternalRaisePaint() _
                Implements TbCommonContainerPrivate.RaisePaint
            
        	RaiseEvent Paint()
        End Sub
        
        [Serialize(False)]
        Public Property Get ActiveControl() As Control
            Return CType(Of Control)(Me.RootWindowElement.FormActiveControl)
        End Property
        
        Private Sub HandleMenuCommand(ByVal CommandID As Long, ByRef Handled As Boolean) Handles RootWindowElement.MenuCommand
            On Error GoTo ErrorHandler        ' needed in MDI forms because we can receive CommandID here relating to minimize/restore/close buttons that are auto added to our menu bar
            Dim ControlMenu As Any = Menus(CommandID - 1)
            RaiseEventByName ControlMenu, "Click"
            Exit Sub
        ErrorHandler:
            Handled = False
        End Sub
        
        Private Sub HandleShowMenuHelp(ByVal CommandID As Long) Handles RootWindowElement.ShowMenuHelp
            Dim ControlMenu As Any = Menus(CommandID - 1)
            HelpSystem.ShowControlHelp(Me, ControlMenu, False)
        End Sub

        [Serialize(False)]
        [DefaultMember]
        Public Property Get _Default() As Object
        	Return Me.Controls
        End Property
        
        [Serialize(False)]
        Public Property Get Count() As Long
        	Return CLng(Me.Controls.Count)
        End Property
        
        Private Sub SyncOpacity() _ 
        	    Handles Opacity.OnPropertyLet, _
                        TransparencyKey.OnPropertyLet
            
            CommonSyncOpacity(Me.TransparencyKey, Me.Opacity, Me.hWnd)
        End Sub
        
        [Serialize(False)]
        Private InternalIcon As StdPicture

        [Serialize(False)]
        Public Property Get Icon() As StdPicture
            Return InternalIcon
        End Property

        Private Sub IconChanged()
        	Dim InternalIcon As Any = Me.InternalIcon
        	If (InternalIcon IsNot Nothing) AndAlso (InternalIcon.Type = vbPicTypeIcon) Then
                Const ICON_SMALL As Long = 0
                Const ICON_BIG As Long = 1
                Const ICON_SMALL2 As Long = 2
                WinNativeFormsBASE.SendMessageW(RootWindowElement.Handle, WinNativeFormsBASE.WM_SETICON, ICON_SMALL, InternalIcon.Handle)
            End If
        End Sub

        [Serialize(False)]
        Public Property Set Icon(Value As StdPicture)
            Set InternalIcon = Value
            IconChanged()
        End Property

        [Serialize(False)]
        Public Property Let Icon(Value As StdPicture)    ' Weirdly, VBx also implements the Let for this
            Set InternalIcon = Value
            IconChanged()
        End Property
        
        Public Sub Move(ByVal Left As Single, Optional ByVal Top As Variant, Optional ByVal Width As Variant, Optional ByVal Height As Variant)
            If InternalMove(Me, Left, Top, Width, Height) Then
                Me.ControlContext.ChangedPosition()
            End If
        End Sub
        
        Public Sub SetFocus()
            WinNativeFormsBASE.WindowsAPI.USER32_SetFocus(Me.RootWindowElement)
        End Sub
    
        Private Sub HandleShowHelp(ByVal control As Object) _
                Handles RootWindowElement.ShowHelp
            
            HelpSystem.ShowControlHelp(Me, control, False)
        End Sub
        
        [Enumerator]
        Public Function InternalEnumerator() As stdole.IUnknown     ' FIXME should not be exposed
            Return CallByDispId(Me.Controls, -4, vbGet)
        End Function
        
        Private Sub RootWindowElement_QueryUnload(Cancel As Integer, ByVal UnloadMode As Long) _
                Handles RootWindowElement.QueryUnload

            RaiseEvent QueryUnload(Cancel, CInt(UnloadMode))
        End Sub
        
        [Serialize(False)]
        Public Property Get hDC() As LongPtr
            If Me.RootWindowElement IsNot Nothing Then
                Return _BaseGraphics.hDC
            End If
        End Property
        
        [Serialize(False)]
        [Description("")]
        Property Get TabFocusAutoSelect() As Boolean
            Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).TabFocusAutoSelect
        End Property
    
        [Serialize(False)]
        [Description("")]
        Property Let TabFocusAutoSelect(ByVal Value As Boolean)
            CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).TabFocusAutoSelect = Value
        End Property
        
        [Serialize(False)]
        [Description("")]
        Property Get WhatsThisButton() As Boolean
            Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).WhatsThisButton
        End Property
    
        [Serialize(False)]
        [Description("")]
        Property Let WhatsThisButton(ByVal Value As Boolean)
            CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).WhatsThisButton = Value
        End Property
        
        [Serialize(False)]
        [Description("")]
        Property Get AlwaysShowKeyboardCues() As Boolean
            Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).AlwaysShowKeyboardCues
        End Property
                
        [Serialize(False)]
        [Description("The minimum width of the CLIENT area, in twips")]
        Property Get MinWidth() As Double
            Return Me.ScaleX(CSng(CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MinWidth), vbScaledPixels, vbTwips)
        End Property
        
        [Serialize(False)]
        [Description("The minimum width of the CLIENT area, in twips")]
        Property Let MinWidth(ByVal Value As Double)
            CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MinWidth = Me.ScaleX(CSng(Value), vbTwips, vbScaledPixels)
        End Property
        
        [Serialize(False)]
        [Description("The minimum height of the CLIENT area, in twips")]
        Property Get MinHeight() As Double
            Return Me.ScaleY(CSng(CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MinHeight), vbScaledPixels, vbTwips)
        End Property
        
        [Serialize(False)]
        [Description("The minimum height of the CLIENT area, in twips")]
        Property Let MinHeight(ByVal Value As Double)
            CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MinHeight = Me.ScaleY(CSng(Value), vbTwips, vbScaledPixels)
        End Property
        
        [Serialize(False)]
        [Description("The maximum width of the CLIENT area, in twips")]
        Property Get MaxWidth() As Double
            Return Me.ScaleX(CSng(CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MaxWidth), vbScaledPixels, vbTwips)
        End Property
        
        [Serialize(False)]
        [Description("The maximum width of the CLIENT area, in twips")]
        Property Let MaxWidth(ByVal Value As Double)
            CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MaxWidth = Me.ScaleX(CSng(Value), vbTwips, vbScaledPixels)
        End Property
        
        [Serialize(False)]
        [Description("The maximum height of the CLIENT area, in twips")]
        Property Get MaxHeight() As Double
            Return Me.ScaleY(CSng(CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MaxHeight), vbScaledPixels, vbTwips)
        End Property
        
        [Serialize(False)]
        [Description("The maximum height of the CLIENT area, in twips")]
        Property Let MaxHeight(ByVal Value As Double)
            CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MaxHeight = Me.ScaleY(CSng(Value), vbTwips, vbScaledPixels)
        End Property
        
        Private Sub TbCommonContainerPrivate_RaiseChange()
        End Sub
        
        Private Sub TbCommonContainerPrivate_RaiseViewChanged()
        End Sub
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
        
        [Serialize(False)]
        Public Property Get TopMost() As Boolean
            Return TopMostINIT
        End Property
        
        [Serialize(False)]
        Public Property Get Width() As Double
            Return CommonGetFormWidth(Me.RootWindowElement)
        End Property
    
        [Serialize(False)]
        Public Property Let Width(ByVal ValueTwips As Double)
            CommonSetFormWidth(Me.RootWindowElement, Me.InternalBaseControlInfoPtrX, Me.ControlContext, ValueTwips)
        End Property
    
        [Serialize(False)]
        Public Property Get Height() As Double
            Return CommonGetFormHeight(Me.RootWindowElement)
        End Property
    
        [Serialize(False)]
        Public Property Let Height(ByVal ValueTwips As Double)
            CommonSetFormHeight(Me.RootWindowElement, Me.InternalBaseControlInfoPtrX, Me.ControlContext, ValueTwips)
        End Property
        
    #End Region
    
End Class