[Description("A Win32 native Frame")]
[WindowsControl("/miscellaneous/ICONS??/Frame??.png")]
[ClassId("33AD4EE8-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("DD008396-4554-4880-8D73-5EC498665905")]    ' FIXME implement {33AD4EE9-6699-11CF-B70C-00AA0060D393} for backcompat
[COMCreatable(False)]
[EventsUseDispInterface]
[ComImport(True)]
Class Frame
    
    #Region "INHERITANCE"

        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlNotFocusable2 Via _BaseControl = New WinNativeFormsBASE.BaseControlNotFocusable2(ControlTypeConstants.vbFrame)
        [ImplementsViaPrivateFriendlies] Implements OLEDragDropHelper Via _BaseOLEDragDropHelper = New OLEDragDropHelper
        
    #End Region
        
    #Region "STATE"
    
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public BackColor As OLE_COLOR = VBRUN.SystemColorConstants.vb3DFace   ' FIXME this is linked to Appearance
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public ForeColor As OLE_COLOR = VBRUN.SystemColorConstants.vbButtonText   ' FIXME this is linked to Appearance
        [Description("")]
            Public ClipControls As Boolean = True
        [Description("")]
            Public BorderStyle As VBRUN.ControlBorderStyleConstants = VBRUN.ControlBorderStyleConstants.vbFixedSingleBorder

        [Serialize(True, "Caption")]
            Private Caption_INIT As String
        
            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private IsDesignMode As Boolean

            Public HelpContextID As Long
        
        [Unimplemented]
            Public RightToLeft As Boolean
        [Unimplemented]
            Public WhatsThisHelpID As Long
            
        [Description("Opacity, given as a percentage, 0 - 100.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
            Public Opacity As Double = 100
        
        [CustomDesigner("designer_SpectrumWindowsOrClear")]
        [Description("A color, when set, that will appear fully transparent in the window.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
            Public TransparencyKey As OLE_COLOR = -1
            
        Public Sub OLEDrag()
            CommonOLEDrag(Me)
        End Sub
                        
            Public Sub ShowWhatsThis()
                HelpSystem.ShowControlHelpManual(Me)
            End Sub
    # End Region

    #Region "EVENTS"
    
        [DefaultDesignerEvent]
        [Description("")]
        [DispId(&HEAEA0004)]
            Event Click()
        [Description("")]
        [DispId(&HEAEA0005)]
            Event DblClick()
        [Description("")]
        [DispId(&HEAEA0001)]
            Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0002)]
            Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0003)]
            Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
            Event Initialize()
        [Description("")]
        [DispId(&HEAEA000B)]
            Event DragDrop(Source As Control, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA000C)]
            Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        
        Event OLECompleteDrag(Effect As Long)
        Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        Event OLESetData(Data As DataObject, DataFormat As Integer)
        Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)
    #End Region
               
    #Region "MEMBERS"
        
        Private Sub HandleLoad() _
                Handles RootWindowElement.Load
            
            Dim Opacity As Any = Me.Opacity
            If ((Opacity >= 0) And (Opacity < 100)) Or (TransparencyKey <> -1) Then
                SyncOpacity
            End If
        End Sub
        
        Private Sub SyncOpacity() _ 
                Handles Opacity.OnPropertyLet, _
                        TransparencyKey.OnPropertyLet
            
            CommonSyncOpacity(Me.TransparencyKey, Me.Opacity, Me.RootWindowElement.Handle)
        End Sub
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
    
            Me.InternalStateReset()     ' resets all the base class state
            Me.InternalStateResetOLEDragDrop()
             
            With ControlContext.GetSerializer()
                If Not .Deserialize(Me) Then
                    Caption_INIT = "Frame"
                End If
                IsDesignMode = .IsDesignMode
            End With
            
            Dim Opacity As Any = Me.Opacity
            If Opacity > 100 Then Me.Opacity = 100
            If Opacity < 0 Then Me.Opacity = 0
            
            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InitData.ClassName = "ThunderFrame"
            InitData.Caption = Caption_INIT
            InitData.WindowStyles = GetStyles()
            InitData.ExtendedStyles = If(ControlContext.IsPlacedOnUserControl, 0&, WinNativeFormsBASE.GeneralConsts.WindowExtendedStyles.WS_EX_NOPARENTNOTIFY)
            InitData.Flags = IsContainer Or _
                                ManualMouseCapture Or _
                                ForwardMouseDown Or _
                                ForwardMouseUp Or _
                                ForwardMouseMove Or _
                                ForwardButtonClick Or _
                                ForwardDragOver Or _
                                ForwardDoubleClick Or _
                                IgnoreWmCommandButtonClicks
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
            
            InitOleDragDropHelper()
        End Sub
        
        Private Function GetStyles() As Long
            Dim styles As Long = CLng(ButtonStyles.BS_GROUPBOX) + _
                    If(_BaseControl.Appearance = AppearanceConstants.vbAppearFlat, ButtonStyles.BS_FLAT, 0&) + _
                    If(Me.ClipControls = True, WinNativeFormsBASE.WS_CLIPCHILDREN, 0&)
            Return styles
        End Function
        
        Private Sub InitOleDragDropHelper()
            _BaseOLEDragDropHelper.OLEDragDropInit(Me, ControlContext, RootWindowElement, True, False, False)
        End Sub
        
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If

            ' disconnect anything that causes a circular reference here
            Set Me.Font = Nothing
            Me.InternalStateResetOLEDragDrop()
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub
                
        #If LOG_TERMINATE Then
            Private Sub Class_Terminate()
                    Debug.Print CurrentComponentName & "." & CurrentProcedureName
            End Sub
        #End If
        
        Private Sub HandleCreate() _
                Handles RootWindowElement.Create
            
            SyncOLEDropMode()
            RaiseEvent Initialize()
        End Sub
        
        Private Sub SyncRecreate() _
                Handles ClipControls.OnPropertyLet
                
            Dim Caption As String = Me.Caption
            RecreateWindow(GetStyles())
            Me.Caption = Caption
        End Sub
        
        Private Sub HandleEraseBackground(ByVal hdc As LongPtr, ByRef Handled As Boolean) _
                Handles RootWindowElement.EraseBackground
                
            WinNativeFormsBASE.WindowsAPI.USER32_FillWithBrush(Me.RootWindowElement, hdc, CreateBackBrush(BackColor))
            Handled = True     ' swallow up the event
        End Sub

        [UseGetLastError(False), DLLStackCheck(False)]
        Private DeclareWide PtrSafe Function GetDC Lib "user32" (ByVal hWnd As LongPtr) As LongPtr
        [UseGetLastError(False), DLLStackCheck(False)]
        Private DeclareWide PtrSafe Function ReleaseDC Lib "user32" (ByVal hWnd As LongPtr, ByVal hDC As LongPtr) As Long
    
        Private Sub HandlePaint() _
                Handles RootWindowElement.AfterPaint
                
            Dim RootWindowElement As Any = Me.RootWindowElement
            Dim hwnd As LongPtr = RootWindowElement.Handle
            Dim hdc As LongPtr = GetDC(hwnd)
'            Debug.Print "Frame.HandlePaint"
            RootWindowElement.PaintContainedWindowlessElements(hdc)
            
            If ClipControls = True And IsDesignMode = False Then
                CommonRedrawChildren(Me)
            End If
            
            ReleaseDC(hwnd, hdc)
        End Sub
        
        Private Sub HandleGetColors(ByVal hdc As LongPtr, ByRef BackBrushOut As LongPtr, ByVal ControlType As ControlTypeConstants) _
                Handles RootWindowElement.GetColors
                
            HandleGetColorsCommon(hdc, BackBrushOut, Me)
        End Sub
                
        [Serialize(False)]
        Public Property Get Caption() As String
            Return GetWindowTextCtl()
        End Property
        
        [Serialize(False)]
        Public Property Let Caption(ByVal Value As String)
            SendMessageCtl(WinNativeFormsBASE.WM_SETTEXT, 0, StrPtrSafe(Value))
        End Property
        
        Private Sub ColorsChanged() _
                Handles BackColor.OnPropertyLet, _
                        ForeColor.OnPropertyLet
            
            Me.Refresh
        End Sub
        
        Private Sub RootWindowElement_Paint(Handled As Boolean) _
                Handles RootWindowElement.Paint
            
            If Me.BorderStyle = VBRUN.ControlBorderStyleConstants.vbNoBorder Then
                Dim ps As WinNativeFormsBASE.PAINTSTRUCT
                Dim RootWindowElement As Any = Me.RootWindowElement
                RootWindowElement.BeginPaint(ps)    ' you MUST use this method, and NOT the BeginPaint API 
                        
                    Dim hwnd As LongPtr = RootWindowElement.Handle
                    Dim hdc As LongPtr = GetDC(hwnd)
                    RootWindowElement.PaintContainedWindowlessElements(hdc)
                    ReleaseDC(hwnd, hdc)

                RootWindowElement.EndPaint(ps)
                Handled = True     ' swallow up the event
            End If
        End Sub
        
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Get _Default() As String
            Return Me.Caption
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Let _Default(Value As String)
            Me.Caption = Value
        End Property
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
        
    #End Region

End Class