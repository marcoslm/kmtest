[ClassId("628679CC-8C97-4AA2-9C60-F112F1E82FFD")]
[InterfaceId("BC11FDD9-D213-454D-AF5A-2CDA348D18CB")]
[COMCreatable(False)]
Private Class BaseControlFocusableNoFont
 
    Implements BaseControlRectDockable Via BaseControlRectDockable

    [Description("Adjusts the TAB key order of this control at runtime")]
    [Serialize(True, "TabIndex")]
        Private TabIndexINIT As Long
    [Description("")]
    [Serialize(True, "MousePointer")]
        Private MousePointerINIT As VBRUN.MousePointerConstants = VBRUN.MousePointerConstants.vbDefault
    [Serialize(True, "MouseIcon")]
    [CustomDesigner("designer_IconBytes")]
        Private ReadOnly MouseIconINIT() As Byte
        
    [Serialize(True, "DragIcon")]
    [CustomDesigner("designer_PictureBytes")]
    [Description("")]
        Private ReadOnly DragIconINIT() As Byte
    [Serialize(True, "DragMode")]
        Private DragModeINIT As VBRUN.DragModeConstants
            
    [Description("Adjusts the visibility of this control at runtime")]
    [Serialize(True, "Visible")]
        Private VisibleINIT As Boolean = True
    [Description("")]
    [Serialize(True, "Enabled")]
        Private EnabledINIT As Boolean = True
    [Description("Indicates if the user can use the TAB key to focus on this control at runtime")]
    [Serialize(True, "TabStop")]
        Private TabStopINIT As Boolean = True
        
    [Serialize(True, "CausesValidation")]
        Private CausesValidationINIT As Boolean = True
    
    Sub New(ByVal ControlType As ControlTypeConstants)
        Set Me.BaseControlRectDockable = New BaseControlRectDockable(ControlType)
    End Sub
    
    Friend Function CreateRootWindowElement(ByVal _ControlContext As stdole.IUnknown, _
                                                ByRef InitData As WindowCreationData) As WindowElement
        With CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX)
            .MousePointer = MousePointerINIT
            .DragMode = Me.DragModeINIT
            .CausesValidation = Me.CausesValidationINIT
            .TabStop = Me.TabStopINIT
            .HasTabIndex = True
            .TabIndex = Me.TabIndexINIT
        End With
                
        InitData.BaseControlInfoPtr = InternalBaseControlBeforeCreateRootWindow(InitData)
        Set Me.ControlContext = CType(Of WindowsControlContext)(_ControlContext) ' FIXME passed as IUnknown to prevent COM exposure of type
        InitData.WindowStyles += If(Me.EnabledINIT, 0&, WS_DISABLED) + _
                                 If(Me.VisibleINIT, WS_VISIBLE, 0&) + _
                                 If(Me.TabStopINIT, WS_TABSTOP, 0&)
        Set Me.RootWindowElementBase = CType(Of WindowElement)(ControlContext.CreateWindowElement(InitData))
        CommonLoadPictureInit(CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MouseIcon, Me.MouseIconINIT)
        CommonLoadPictureInit(CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).DragIcon, Me.DragIconINIT)
                
        Return Me.RootWindowElementBase
    End Function
    
    Friend Sub RecreateWindow(ByVal StyleFlags As Long)
    	RootWindowElementBase.RecreateWindow(StyleFlags)
    End Sub
             
    [Serialize(False)]
    [Description("")]
    Property Get Enabled() As Boolean
        Return CommonGetEnabled()
    End Property
    
    [Serialize(False)]
    [Description("")]
    Property Let Enabled(Value As Boolean)
        CommonLetEnabled(Value)
    End Property

    [Serialize(False)]
    [Description("Adjusts the visibility of this control at runtime")]
    Property Get Visible() As Boolean
        Return CommonGetVisible()
    End Property
    
    [UseGetLastError(False), DLLStackCheck(False)]
    Private DeclareWide PtrSafe Function UpdateWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
    
    [Serialize(False)]
    [Description("Adjusts the visibility of this control at runtime")]
    Property Let Visible(Value As Boolean)
        WindowsAPI.USER32_ShowWindow(Me.RootWindowElementBase, CLng(If(Value, SW_NORMAL, SW_HIDE)))
        
        If Dock <> DockModeConstants.vbDockNone Then
            ' FIXME bodge, this forces layout to be recalculated
            WindowsAPI.USER32_SendMessageHandle(WindowsAPI.USER32_GetParent(Me.RootWindowElementBase), WM_SIZE, -1, 0)
        End If
        
        If Value Then
            UpdateWindow(Me.RootWindowElementBase.Handle)
        End If
    End Property
    
    Public Sub SetFocus()
        CommonSetFocus()
    End Sub
        
    Public Sub Drag([TypeHint(DragConstants)] Optional ByVal Action As Variant)
        CommonDrag(Action)
    End Sub
    
    Friend Sub BaseSyncOLEDropMode(ByVal RootThis As Object, ByVal OLEDropMode As OLEDropConstants, ByRef DragDropHandler As OLEDragDropHandler, ByVal IsContainer As Boolean, ByVal AllowedAutomatic As Boolean)
        CommonSyncOLEDropMode(RootThis, OLEDropMode, DragDropHandler, ControlContext, RootWindowElementBase, IsContainer, AllowedAutomatic)
    End Sub
    
    Public Sub ZOrder([TypeHint(ZOrderConstants)] Optional ByVal Position As Variant)
        CommonZOrder(Position, Me.RootWindowElementBase.Handle)
    End Sub
    
    [Serialize(False)]
    Public Property Get MouseIcon() As StdPicture
        Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MouseIcon
    End Property

    [Serialize(False)]
    Public Property Set MouseIcon(Value As StdPicture)
        Set CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MouseIcon = Value
        CommonMousePointerChanged()
    End Property

    [Serialize(False)]
    Public Property Let MouseIcon(Value As StdPicture)
        Set CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MouseIcon = Value
        CommonMousePointerChanged()
    End Property
        
    [Serialize(False)]
    Public Property Get hWnd() As LongPtr
        Return CommonGetHWND()
    End Property
    
    [Serialize(False)]
    Public Property Get MousePointer() As MousePointerConstants
        Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MousePointer
    End Property
    
    [Serialize(False)]
    Public Property Let MousePointer(ByVal Value As MousePointerConstants)
        CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MousePointer = Value
        CommonMousePointerChanged()
    End Property
    
    [Serialize(False)]
    Public Property Get DragMode() As DragModeConstants
        Return CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).DragMode
    End Property
    
    [Serialize(False)]
    Public Property Let DragMode(ByVal Value As DragModeConstants)
        CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).DragMode = Value
    End Property
    
    [Serialize(False)]
    Public Property Get CausesValidation() As Boolean
        Return CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).CausesValidation
    End Property
    
    [Serialize(False)]
    Public Property Let CausesValidation(ByVal Value As Boolean)
        CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).CausesValidation = Value
    End Property
    
    [Serialize(False)]
    [Description("")]
    [DispId(-854)]
    Property Get TabStop() As Boolean
        Return CommonGetTabStop()
    End Property
    
    [Serialize(False)]
    [Description("")]
    [DispId(-854)]
    Property Let TabStop(Value As Boolean)
        CommonLetTabStop(Value)
    End Property
    
    [Serialize(False)]
    Public Property Get TabIndex() As Long
        Return CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).TabIndex
    End Property
    
    [Serialize(False)]
    Public Property Let TabIndex(ByVal Value As Long)
        CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).TabIndex = Value
    End Property
    
    [Serialize(False)]
    Public Property Get DragIcon() As StdPicture
        Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).DragIcon
    End Property

    [Serialize(False)]
    Public Property Set DragIcon(Value As StdPicture)
        Set CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).DragIcon = Value
    End Property

    [Serialize(False)]
    Public Property Let DragIcon(Value As StdPicture)
        Set CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).DragIcon = Value
    End Property
    
    Friend Function SendMessageLngPtr(ByVal msg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr
        Return WinNativeFormsBASE.SendMessageW(RootWindowElementBase.Handle, msg, wParam, lParam)
    End Function
        
    Friend Function SendMessageLng(ByVal msg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As Long
        Dim retValLngPtr As Any = WinNativeFormsBASE.SendMessageW(RootWindowElementBase.Handle, msg, wParam, lParam)
        #If Win64 Then
            Dim retValLng As Long
            GetMem4(VarPtr(retValLngPtr), retValLng)
            Return retValLng
        #Else
            Return retValLngPtr
        #End If
    End Function
    
End Class