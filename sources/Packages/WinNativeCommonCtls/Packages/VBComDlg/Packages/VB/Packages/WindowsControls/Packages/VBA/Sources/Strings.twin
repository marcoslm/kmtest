Module Strings
 
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns the ANSI character code corresponding to the first letter in a string. " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = Asc(String)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`String` (String): The string expression whose first character's ANSI code you want to return.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "An Integer representing the ANSI character code of the first letter in the string.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim result As Integer" & vbCrLf & _
                    "result = Asc(""A"") ' result is 65" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "This example returns the ANSI character code of ""A"", which is 65.")]
    Public DeclareWide PtrSafe Function Asc Lib "<strings>" Alias "#1" (ByVal String As String) As Integer
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns the Unicode character code corresponding to the first letter in a string. " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = AscW(String)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`String` (String): The string expression whose first character's Unicode code you want to return.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "An Integer representing the Unicode character code of the first letter in the string.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim result As Integer" & vbCrLf & _
                    "result = AscW(""A"") ' result is 65" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "This example returns the Unicode character code of ""A"", which is 65.")]
    Public DeclareWide PtrSafe Function AscW Lib "<strings>" Alias "#2" (ByVal String As String) As Integer
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns the byte code corresponding to the first character in a string. " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = AscB(String)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`String` (String): The string expression whose first character's byte code you want to return.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Byte representing the byte code of the first character in the string.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim result As Byte" & vbCrLf & _
                    "result = AscB(""A"") ' result is 65" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "This example returns the byte code of ""A"", which is 65.")]
    Public DeclareWide PtrSafe Function AscB Lib "<strings>" Alias "#3" (ByVal String As String) As Byte
        
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns the character associated with the specified ANSI character code. `Chr$` returns a String data type and `Chr` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = Chr$(CharCode)`  " & vbCrLf & _
                    "`resultVariant = Chr(CharCode)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`CharCode` (Long): The ANSI character code you want to get the character of.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "If the `CharCode` is between 0 and 255, the function returns a String containing the single character associated with the specified character code. Otherwise, an error occurs.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim charFromString As String" & vbCrLf & _
                    "Dim charFromVariant As Variant" & vbCrLf & _
                    "charFromString = Chr$(65) ' charFromString will be ""A""" & vbCrLf & _
                    "charFromVariant = Chr(65) ' charFromVariant will also be ""A""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In this example, `Chr$` and `Chr` both return the character ""A"" for the ANSI code 65.")]
    Public DeclareWide PtrSafe Function [Chr$] Lib "<strings>" Alias "#4" (ByVal CharCode As Long) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns the character associated with the specified ANSI character code. `Chr$` returns a String data type and `Chr` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = Chr$(CharCode)`  " & vbCrLf & _
                    "`resultVariant = Chr(CharCode)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`CharCode` (Long): The ANSI character code you want to get the character of.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "If the `CharCode` is between 0 and 255, the function returns a String containing the single character associated with the specified character code. Otherwise, an error occurs.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim charFromString As String" & vbCrLf & _
                    "Dim charFromVariant As Variant" & vbCrLf & _
                    "charFromString = Chr$(65) ' charFromString will be ""A""" & vbCrLf & _
                    "charFromVariant = Chr(65) ' charFromVariant will also be ""A""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In this example, `Chr$` and `Chr` both return the character ""A"" for the ANSI code 65.")]
    Public DeclareWide PtrSafe Function Chr Lib "<strings>" Alias "#5" (ByVal CharCode As Long) As Variant
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns the character associated with the specified Unicode character code. `ChrW$` returns a String data type and `ChrW` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = ChrW$(CharCode)`  " & vbCrLf & _
                    "`resultVariant = ChrW(CharCode)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`CharCode` (Long): The Unicode character code you want to get the character of.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "The function returns a String containing the single character associated with the specified Unicode character code.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim charFromString As String" & vbCrLf & _
                    "Dim charFromVariant As Variant" & vbCrLf & _
                    "charFromString = ChrW$(960) ' charFromString will be the Greek small letter pi (π)" & vbCrLf & _
                    "charFromVariant = ChrW(960) ' charFromVariant will also be the Greek small letter pi (π)" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In this example, `ChrW$` and `ChrW` both return the Greek small letter pi (π) for the Unicode code 960.")]
    Public DeclareWide PtrSafe Function [ChrW$] Lib "<strings>" Alias "#6" (ByVal CharCode As Long) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns the character associated with the specified Unicode character code. `ChrW$` returns a String data type and `ChrW` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = ChrW$(CharCode)`  " & vbCrLf & _
                    "`resultVariant = ChrW(CharCode)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`CharCode` (Long): The Unicode character code you want to get the character of.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "The function returns a String containing the single character associated with the specified Unicode character code.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim charFromString As String" & vbCrLf & _
                    "Dim charFromVariant As Variant" & vbCrLf & _
                    "charFromString = ChrW$(960) ' charFromString will be the Greek small letter pi (π)" & vbCrLf & _
                    "charFromVariant = ChrW(960) ' charFromVariant will also be the Greek small letter pi (π)" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In this example, `ChrW$` and `ChrW` both return the Greek small letter pi (π) for the Unicode code 960.")]
    Public DeclareWide PtrSafe Function ChrW Lib "<strings>" Alias "#7" (ByVal CharCode As Long) As Variant

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns the character associated with the specified character code in a byte string. `ChrB$` returns a String data type and `ChrB` returns a Variant (String), both representing a byte string.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = ChrB$(CharCode)`  " & vbCrLf & _
                    "`resultVariant = ChrB(CharCode)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`CharCode` (Long): The character code you want to get the character of.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "The function returns a byte string containing the single character associated with the specified character code.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim byteCharAsString As String" & vbCrLf & _
                    "Dim byteCharAsVariant As Variant" & vbCrLf & _
                    "byteCharAsString = ChrB$(65) ' byteCharAsString will be a byte string containing 'A'" & vbCrLf & _
                    "byteCharAsVariant = ChrB(65) ' byteCharAsVariant will also be a byte string containing 'A'" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In this example, `ChrB$` and `ChrB` both return a byte string containing the character 'A' for the ASCII code 65.")]
    Public DeclareWide PtrSafe Function [ChrB$] Lib "<strings>" Alias "#8" (ByVal CharCode As Long) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns the character associated with the specified character code in a byte string. `ChrB$` returns a String data type and `ChrB` returns a Variant (String), both representing a byte string.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = ChrB$(CharCode)`  " & vbCrLf & _
                    "`resultVariant = ChrB(CharCode)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`CharCode` (Long): The character code you want to get the character of.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "The function returns a byte string containing the single character associated with the specified character code.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim byteCharAsString As String" & vbCrLf & _
                    "Dim byteCharAsVariant As Variant" & vbCrLf & _
                    "byteCharAsString = ChrB$(65) ' byteCharAsString will be a byte string containing 'A'" & vbCrLf & _
                    "byteCharAsVariant = ChrB(65) ' byteCharAsVariant will also be a byte string containing 'A'" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In this example, `ChrB$` and `ChrB` both return a byte string containing the character 'A' for the ASCII code 65.")]
    Public DeclareWide PtrSafe Function ChrB Lib "<strings>" Alias "#9" (ByVal CharCode As Long) As Variant
            
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a specified number of characters from a string. `Mid$` returns a String data type, while `Mid` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = Mid$(sourceString, start[, length])`  " & vbCrLf & _
                    "`resultVariant = Mid(sourceString, start[, length])`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`sourceString`: The string from which characters are returned.  " & vbCrLf & _
                    "`start`: The starting position.  " & vbCrLf & _
                    "`length`: Optional. The number of characters to return.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant containing the specified part of the input string.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using Mid$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = Mid$(""Hello World!"", 7, 5) ' Returns ""World""" & vbCrLf & _
                    "' Using Mid" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = Mid(""Hello World!"", 1, 5) ' Returns ""Hello""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In the first example, `Mid$` is used to return the substring ""World"" from ""Hello World!"" starting at position 7 for a length of 5 characters. In the second example, `Mid` is used to return the substring ""Hello"" starting at position 1 for a length of 5 characters.")]
    Public DeclareWide PtrSafe Function [Mid$] Lib "<strings>" Alias "#10" (ByVal String As String, ByVal Start As Long, Optional ByRef Length As Variant) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a specified number of characters from a string. `Mid$` returns a String data type, while `Mid` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = Mid$(sourceString, start[, length])`  " & vbCrLf & _
                    "`resultVariant = Mid(sourceString, start[, length])`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`sourceString`: The string from which characters are returned.  " & vbCrLf & _
                    "`start`: The starting position.  " & vbCrLf & _
                    "`length`: Optional. The number of characters to return.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant containing the specified part of the input string.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using Mid$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = Mid$(""Hello World!"", 7, 5) ' Returns ""World""" & vbCrLf & _
                    "' Using Mid" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = Mid(""Hello World!"", 1, 5) ' Returns ""Hello""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In the first example, `Mid$` is used to return the substring ""World"" from ""Hello World!"" starting at position 7 for a length of 5 characters. In the second example, `Mid` is used to return the substring ""Hello"" starting at position 1 for a length of 5 characters.")]
    Public DeclareWide PtrSafe Function Mid Lib "<strings>" Alias "#11" (ByRef String As Variant, ByVal Start As Long, Optional ByRef Length As Variant) As Variant
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a specified number of characters from a string, starting at a specified byte position. `MidB$` returns a String data type, while `MidB` returns a Variant (String), with both functions intended for use with byte data contained in a string.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = MidB$(sourceString, start[, length])`  " & vbCrLf & _
                    "`resultVariant = MidB(sourceString, start[, length])`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`sourceString`: The string from which characters are returned.  " & vbCrLf & _
                    "`start`: The starting byte position.  " & vbCrLf & _
                    "`length`: Optional. The number of characters to return in bytes.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant containing the specified part of the input string, considering each character as a byte.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using MidB$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = MidB$(""Hello World!"", 7, 5) ' Returns a substring starting at the 7th byte" & vbCrLf & _
                    "' Using MidB" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = MidB(""Hello World!"", 1, 5) ' Returns the first 5 bytes of the string" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In these examples, `MidB$` and `MidB` are used to return substrings based on byte positions rather than character positions. This is particularly useful for dealing with strings that contain binary data.")]
    
    Public DeclareWide PtrSafe Function [MidB$] Lib "<strings>" Alias "#12" (ByVal String As String, ByVal Start As Long, Optional ByRef Length As Variant) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a specified number of characters from a string, starting at a specified byte position. `MidB$` returns a String data type, while `MidB` returns a Variant (String), with both functions intended for use with byte data contained in a string.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = MidB$(sourceString, start[, length])`  " & vbCrLf & _
                    "`resultVariant = MidB(sourceString, start[, length])`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`sourceString`: The string from which characters are returned.  " & vbCrLf & _
                    "`start`: The starting byte position.  " & vbCrLf & _
                    "`length`: Optional. The number of characters to return in bytes.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant containing the specified part of the input string, considering each character as a byte.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using MidB$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = MidB$(""Hello World!"", 7, 5) ' Returns a substring starting at the 7th byte" & vbCrLf & _
                    "' Using MidB" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = MidB(""Hello World!"", 1, 5) ' Returns the first 5 bytes of the string" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In these examples, `MidB$` and `MidB` are used to return substrings based on byte positions rather than character positions. This is particularly useful for dealing with strings that contain binary data.")]
    
    Public DeclareWide PtrSafe Function MidB Lib "<strings>" Alias "#13" (ByRef String As Variant, ByVal Start As Long, Optional ByRef Length As Variant) As Variant
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a specified number of characters from the left side of a string. `Left$` returns a String data type, while `Left` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = Left$(sourceString, length)`  " & vbCrLf & _
                    "`resultVariant = Left(sourceString, length)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`sourceString`: The string from which the leftmost characters are returned.  " & vbCrLf & _
                    "`length`: The number of characters to return.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant containing the specified number of characters from the start of the input string.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using Left$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = Left$(""Hello World!"", 5) ' Returns ""Hello""" & vbCrLf & _
                    "' Using Left" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = Left(""Hello World!"", 7) ' Returns ""Hello W""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In these examples, `Left$` and `Left` are used to return the specified number of characters from the beginning of the string.")]
    [BindOnlyIfNoArguments(False)]
    ' Compiler automatically puts [ BindOnlyIfNoArguments(True) ] for procedures named 'Left', so we have to be explicit to override it
    Public DeclareWide PtrSafe Function [Left$] Lib "<strings>" Alias "#14" (ByVal String As String, ByVal Length As Long) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a specified number of characters from the left side of a string. `Left$` returns a String data type, while `Left` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = Left$(sourceString, length)`  " & vbCrLf & _
                    "`resultVariant = Left(sourceString, length)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`sourceString`: The string from which the leftmost characters are returned.  " & vbCrLf & _
                    "`length`: The number of characters to return.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant containing the specified number of characters from the start of the input string.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using Left$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = Left$(""Hello World!"", 5) ' Returns ""Hello""" & vbCrLf & _
                    "' Using Left" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = Left(""Hello World!"", 7) ' Returns ""Hello W""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In these examples, `Left$` and `Left` are used to return the specified number of characters from the beginning of the string.")]
    [BindOnlyIfNoArguments(False)]
    ' Compiler automatically puts [ BindOnlyIfNoArguments(True) ] for procedures named 'Left', so we have to be explicit to override it
    Public DeclareWide PtrSafe Function Left Lib "<strings>" Alias "#15" (ByRef String As Variant, ByVal Length As Long) As Variant
        
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a specified number of characters from the left side of a string. `LeftB$` is used for byte data contained in a string, while `LeftB` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = LeftB$(sourceString, length)`  " & vbCrLf & _
                    "`resultVariant = LeftB(sourceString, length)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`sourceString`: The string from which the leftmost characters are returned. Assumes a byte array within a string.  " & vbCrLf & _
                    "`length`: The number of bytes to return from the string.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant containing the specified number of bytes from the start of the input string.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using LeftB$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = LeftB$(""Hello World!"", 10) ' Returns ""Hello""" & vbCrLf & _
                    "' Using LeftB" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = LeftB(""Hello World!"", 14) ' Returns ""Hello W""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In these examples, `LeftB$` and `LeftB` are used to return the specified number of bytes from the beginning of a string, which is useful for handling strings with variable byte-length characters. The behavior is similar to `Left$` and `Left`, but they operate at the byte level rather than the character level.")]
    Public DeclareWide PtrSafe Function [LeftB$] Lib "<strings>" Alias "#16" (ByVal String As String, ByVal Length As Long) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a specified number of characters from the left side of a string. `LeftB$` is used for byte data contained in a string, while `LeftB` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = LeftB$(sourceString, length)`  " & vbCrLf & _
                    "`resultVariant = LeftB(sourceString, length)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`sourceString`: The string from which the leftmost characters are returned. Assumes a byte array within a string.  " & vbCrLf & _
                    "`length`: The number of bytes to return from the string.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant containing the specified number of bytes from the start of the input string.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using LeftB$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = LeftB$(""Hello World!"", 10) ' Returns ""Hello""" & vbCrLf & _
                    "' Using LeftB" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = LeftB(""Hello World!"", 14) ' Returns ""Hello W""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In these examples, `LeftB$` and `LeftB` are used to return the specified number of bytes from the beginning of a string. The behavior is similar to `Left$` and `Left`, but they operate at the byte level rather than the character level.")]
    Public DeclareWide PtrSafe Function LeftB Lib "<strings>" Alias "#17" (ByRef String As Variant, ByVal Length As Long) As Variant
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a specified number of characters from the right side of a string. `Right$` returns a string, while `Right` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = Right$(sourceString, length)`  " & vbCrLf & _
                    "`resultVariant = Right(sourceString, length)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`sourceString`: The string from which the rightmost characters are returned.  " & vbCrLf & _
                    "`length`: The number of characters to return from the end of the string.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant containing the specified number of characters from the end of the input string.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using Right$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = Right$(""Hello World!"", 6) ' Returns ""World!""" & vbCrLf & _
                    "' Using Right" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = Right(""Hello World!"", 6) ' Returns ""World!""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In these examples, `Right$` and `Right` are used to return the specified number of characters from the end of a string.")]
    Public DeclareWide PtrSafe Function [Right$] Lib "<strings>" Alias "#18" (ByVal String As String, ByVal Length As Long) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a specified number of characters from the right side of a string. `Right$` returns a string, while `Right` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = Right$(sourceString, length)`  " & vbCrLf & _
                    "`resultVariant = Right(sourceString, length)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`sourceString`: The string from which the rightmost characters are returned.  " & vbCrLf & _
                    "`length`: The number of characters to return from the end of the string.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant containing the specified number of characters from the end of the input string.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using Right$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = Right$(""Hello World!"", 6) ' Returns ""World!""" & vbCrLf & _
                    "' Using Right" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = Right(""Hello World!"", 6) ' Returns ""World!""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In these examples, `Right$` and `Right` are used to return the specified number of characters from the end of a string.")]
    Public DeclareWide PtrSafe Function Right Lib "<strings>" Alias "#19" (ByRef String As Variant, ByVal Length As Long) As Variant
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a specified number of bytes from the right side of a string. `RightB$` returns a string, while `RightB` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = RightB$(sourceString, length)`  " & vbCrLf & _
                    "`resultVariant = RightB(sourceVariant, length)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`sourceString`: The string (or Variant containing a string) from which the rightmost bytes are returned.  " & vbCrLf & _
                    "`length`: The number of bytes to return from the end of the string.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant containing the specified number of bytes from the end of the input string.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using RightB$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = RightB$(""Hello World!"", 12) ' Returns ""World!""" & vbCrLf & _
                    "' Using RightB" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = RightB(""Hello World!"", 12) ' Returns ""World!""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In these examples, `RightB$` and `RightB` are used to return the specified number of bytes from the end of a string. This can be useful when working with binary data stored inside strings.")]
    Public DeclareWide PtrSafe Function [RightB$] Lib "<strings>" Alias "#20" (ByVal String As String, ByVal Length As Long) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a specified number of bytes from the right side of a string. `RightB$` returns a string, while `RightB` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = RightB$(sourceString, length)`  " & vbCrLf & _
                    "`resultVariant = RightB(sourceVariant, length)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`sourceString`: The string (or Variant containing a string) from which the rightmost bytes are returned.  " & vbCrLf & _
                    "`length`: The number of bytes to return from the end of the string.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant containing the specified number of bytes from the end of the input string.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using RightB$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = RightB$(""Hello World!"", 12) ' Returns ""World!""" & vbCrLf & _
                    "' Using RightB" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = RightB(""Hello World!"", 12) ' Returns ""World!""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "In these examples, `RightB$` and `RightB` are used to return the specified number of bytes from the end of a string. This can be useful when working with binary data stored inside strings.")]
    Public DeclareWide PtrSafe Function RightB Lib "<strings>" Alias "#21" (ByRef String As Variant, ByVal Length As Long) As Variant
        
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a string consisting of the specified number of spaces. `Space$` returns a String, while `Space` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = Space$(number)`  " & vbCrLf & _
                    "`resultVariant = Space(number)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`number`: The number of spaces to generate.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant consisting of the specified number of space characters.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using Space$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = Space$(10) ' Returns a string with 10 spaces" & vbCrLf & _
                    "' Using Space" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = Space(10) ' Returns a variant with a string of 10 spaces" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "These examples use `Space$` and `Space` to create strings composed of a specific number of space characters. This can be useful for formatting output in console applications or aligning text in user interfaces.")]
    Public DeclareWide PtrSafe Function [Space$] Lib "<strings>" Alias "#22" (ByVal Number As Long) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns a string consisting of the specified number of spaces. `Space$` returns a String, while `Space` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = Space$(number)`  " & vbCrLf & _
                    "`resultVariant = Space(number)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`number`: The number of spaces to generate.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant consisting of the specified number of space characters.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using Space$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = Space$(10) ' Returns a string with 10 spaces" & vbCrLf & _
                    "' Using Space" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = Space(10) ' Returns a variant with a string of 10 spaces" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "These examples use `Space$` and `Space` to create strings composed of a specific number of space characters. This can be useful for formatting output in console applications or aligning text in user interfaces.")]
    Public DeclareWide PtrSafe Function Space Lib "<strings>" Alias "#23" (ByVal Number As Long) As Variant
            
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Generates a repeating character string of the length specified. `String$` returns a String, while `String` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = String$(number, character)`  " & vbCrLf & _
                    "`resultVariant = String(number, character)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`number`: Specifies how many times the character will repeat.  " & vbCrLf & _
                    "`character`: The character to repeat, provided as a Variant (can be a numeric ASCII code or a string character).  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant consisting of the specified character repeated the number of times indicated.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using String$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = String$(20, ""*"") ' Returns a string of 20 asterisks" & vbCrLf & _
                    "' Using String" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = String(20, 42) ' 42 is the ASCII code for '*', returns a variant with a string of 20 asterisks" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "These examples demonstrate the `String$` and `String` functions being used to create a string composed of a specified number of a given character or ASCII code.")]
    Public DeclareWide PtrSafe Function [String$] Lib "<strings>" Alias "#24" (ByVal Number As Long, ByRef Character As Variant) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Generates a repeating character string of the length specified. `String$` returns a String, while `String` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = String$(number, character)`  " & vbCrLf & _
                    "`resultVariant = String(number, character)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`number`: Specifies how many times the character will repeat.  " & vbCrLf & _
                    "`character`: The character to repeat, provided as a Variant (can be a numeric ASCII code or a string character).  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant consisting of the specified character repeated the number of times indicated.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using String$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = String$(20, ""*"") ' Returns a string of 20 asterisks" & vbCrLf & _
                    "' Using String" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = String(20, 42) ' 42 is the ASCII code for '*', returns a variant with a string of 20 asterisks" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "These examples demonstrate the `String$` and `String` functions being used to create a string composed of a specified number of a given character or ASCII code.")]
    Public DeclareWide PtrSafe Function String Lib "<strings>" Alias "#25" (ByVal Number As Long, ByRef Character As Variant) As Variant
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Removes leading spaces from a string. `LTrim$` returns a String, while `LTrim` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = LTrim$(text)`  " & vbCrLf & _
                    "`resultVariant = LTrim(text)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`text`: The string expression from which leading spaces are to be removed.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant with leading spaces removed from the specified string expression.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using LTrim$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = LTrim$(""Hello World!"") ' Returns ""Hello World!""" & vbCrLf & _
                    "' Using LTrim" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = LTrim(""Hello World!"") ' Returns a variant containing ""Hello World!""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "These examples demonstrate the `LTrim$` and `LTrim` functions being used to remove leading spaces from the beginning of a string expression.")]
    Public DeclareWide PtrSafe Function [LTrim$] Lib "<strings>" Alias "#26" (ByVal String As String) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Removes leading spaces from a string. `LTrim$` returns a String, while `LTrim` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = LTrim$(text)`  " & vbCrLf & _
                    "`resultVariant = LTrim(text)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`text`: The string expression from which leading spaces are to be removed.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant with leading spaces removed from the specified string expression.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using LTrim$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = LTrim$(""Hello World!"") ' Returns ""Hello World!""" & vbCrLf & _
                    "' Using LTrim" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = LTrim(""Hello World!"") ' Returns a variant containing ""Hello World!""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "These examples demonstrate the `LTrim$` and `LTrim` functions being used to remove leading spaces from the beginning of a string expression.")]
    Public DeclareWide PtrSafe Function LTrim Lib "<strings>" Alias "#27" (ByRef String As Variant) As Variant
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Removes trailing spaces from a string. `RTrim$` returns a String, while `RTrim` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = RTrim$(text)`  " & vbCrLf & _
                    "`resultVariant = RTrim(text)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`text`: The string expression from which trailing spaces are to be removed.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant with trailing spaces removed from the specified string expression.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using RTrim$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = RTrim$(""Hello World!"") ' Returns ""Hello World!""" & vbCrLf & _
                    "' Using RTrim" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = RTrim(""Hello World!"") ' Returns a variant containing ""Hello World!""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "These examples demonstrate the `RTrim$` and `RTrim` functions being used to remove trailing spaces from the end of a string expression.")]
    Public DeclareWide PtrSafe Function [RTrim$] Lib "<strings>" Alias "#28" (ByVal String As String) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Removes trailing spaces from a string. `RTrim$` returns a String, while `RTrim` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = RTrim$(text)`  " & vbCrLf & _
                    "`resultVariant = RTrim(text)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`text`: The string expression from which trailing spaces are to be removed.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant with trailing spaces removed from the specified string expression.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using RTrim$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = RTrim$(""Hello World!"") ' Returns ""Hello World!""" & vbCrLf & _
                    "' Using RTrim" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = RTrim(""Hello World!"") ' Returns a variant containing ""Hello World!""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "These examples demonstrate the `RTrim$` and `RTrim` functions being used to remove trailing spaces from the end of a string expression.")]
    Public DeclareWide PtrSafe Function RTrim Lib "<strings>" Alias "#29" (ByRef String As Variant) As Variant
        
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Removes both leading and trailing spaces from a string. `Trim$` returns a String, while `Trim` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = Trim$(text)`  " & vbCrLf & _
                    "`resultVariant = Trim(text)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`text`: The string expression from which leading and trailing spaces are to be removed.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant with both leading and trailing spaces removed from the specified string expression.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using Trim$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = Trim$(""Hello World!"") ' Returns 'Hello World!'" & vbCrLf & _
                    "' Using Trim" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = Trim(""Hello World!"") ' Returns a variant containing 'Hello World!'" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "These examples demonstrate the `Trim$` and `Trim` functions being used to remove both leading and trailing spaces from a string expression.")]
    Public DeclareWide PtrSafe Function [Trim$] Lib "<strings>" Alias "#30" (ByVal String As String) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Removes both leading and trailing spaces from a string. `Trim$` returns a String, while `Trim` returns a Variant (String).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = Trim$(text)`  " & vbCrLf & _
                    "`resultVariant = Trim(text)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`text`: The string expression from which leading and trailing spaces are to be removed.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a string or variant with both leading and trailing spaces removed from the specified string expression.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Using Trim$" & vbCrLf & _
                    "Dim resultString As String" & vbCrLf & _
                    "resultString = Trim$(""Hello World!"") ' Returns 'Hello World!'" & vbCrLf & _
                    "' Using Trim" & vbCrLf & _
                    "Dim resultVariant As Variant" & vbCrLf & _
                    "resultVariant = Trim(""Hello World!"") ' Returns a variant containing 'Hello World!'" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "These examples demonstrate the `Trim$` and `Trim` functions being used to remove both leading and trailing spaces from a string expression.")]
    Public DeclareWide PtrSafe Function Trim Lib "<strings>" Alias "#31" (ByRef String As Variant) As Variant
                   
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns the name of the specified month.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = MonthName(Month, [Abbreviate])`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Month` (Long): The numeric designation of the month (1-12).  " & vbCrLf & _
                    "`Abbreviate` (Optional Boolean): Indicates whether to return an abbreviated name (default is `False`).  " & vbCrLf & _
                    "### Return Value" & vbCrLf & _
                    "A `String` containing the full name or abbreviated name of the month.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim fullMonthName As String" & vbCrLf & _
                    "fullMonthName = MonthName(1) ' Returns 'January'" & vbCrLf & _
                    "Dim abbreviatedMonthName As String" & vbCrLf & _
                    "abbreviatedMonthName = MonthName(1, True) ' Returns 'Jan'" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "This function will return the full name or an abbreviated name of the month based on the index provided and the abbreviation parameter.")]
    Public DeclareWide PtrSafe Function MonthName Lib "<strings>" Alias "#32" (ByVal Month As Long, Optional ByVal Abbreviate As Boolean = False) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns the name of the specified day of the week.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = WeekdayName(Weekday, [Abbreviate], [FirstDayOfWeek])`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Weekday` (Long): The numeric designation of the day of the week (1-7).  " & vbCrLf & _
                    "`Abbreviate` (Optional Boolean): Indicates whether to return an abbreviated name (default is `False`).  " & vbCrLf & _
                    "`FirstDayOfWeek` (Optional VbDayOfWeek): Specifies the first day of the week (default is `vbSunday`).  " & vbCrLf & _
                    "### Return Value" & vbCrLf & _
                    "A `String` containing the full name or abbreviated name of the day of the week.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim fullWeekdayName As String" & vbCrLf & _
                    "fullWeekdayName = WeekdayName(2) ' Returns 'Monday'" & vbCrLf & _
                    "Dim abbreviatedWeekdayName As String" & vbCrLf & _
                    "abbreviatedWeekdayName = WeekdayName(2, True) ' Returns 'Mon'" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "This function will return the full name or an abbreviated name of the weekday based on the index provided, the abbreviation parameter, and the specified first day of the week.")]
    Public DeclareWide PtrSafe Function WeekdayName Lib "<strings>" Alias "#33" (ByVal Weekday As Long, Optional ByVal Abbreviate As Boolean = False, Optional ByVal FirstDayOfWeek As VbDayOfWeek = 1&) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a string in which the character order of a specified string is reversed.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = StrReverse(Expression)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (String): The string expression to reverse.  " & vbCrLf & _
                    "### Return Value" & vbCrLf & _
                    "A `String` in which the character order of the specified `Expression` is reversed.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim originalString As String" & vbCrLf & _
                    "Dim reversedString As String" & vbCrLf & _
                    "originalString = ""Hello, World!""" & vbCrLf & _
                    "reversedString = StrReverse(originalString) ' Returns ""!dlroW ,olleH""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "This function will return the specified string with the characters in reverse order.")]
    Public DeclareWide PtrSafe Function StrReverse Lib "<strings>" Alias "#34" (ByVal Expression As String) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Converts all uppercase letters in a specified string to lowercase.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = LCase$([String])`  " & vbCrLf & _
                    "`resultVariant = LCase([String])`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`String` (String or Variant): The string to be converted.  " & vbCrLf & _
                    "### Return Value" & vbCrLf & _
                    "The `LCase$` function returns a `String` with all letters converted to lowercase.  " & vbCrLf & _
                    "The `LCase` function returns a `Variant` with all letters converted to lowercase.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim originalString As String" & vbCrLf & _
                    "Dim lowerCaseString As String" & vbCrLf & _
                    "originalString = ""Hello, World!""" & vbCrLf & _
                    "lowerCaseString = LCase$(originalString) ' Returns ""hello, world!""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "Both `LCase$` and `LCase` functions will convert the letters of the specified string to lowercase, but `LCase$` returns a `String` type and `LCase` returns a `Variant` type.")]
    Public DeclareWide PtrSafe Function [LCase$] Lib "<strings>" Alias "#35" (ByVal String As String) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Converts all uppercase letters in a specified string to lowercase.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = LCase$([String])`  " & vbCrLf & _
                    "`resultVariant = LCase([String])`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`String` (String or Variant): The string to be converted.  " & vbCrLf & _
                    "### Return Value" & vbCrLf & _
                    "The `LCase$` function returns a `String` with all letters converted to lowercase.  " & vbCrLf & _
                    "The `LCase` function returns a `Variant` with all letters converted to lowercase.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim originalString As String" & vbCrLf & _
                    "Dim lowerCaseString As String" & vbCrLf & _
                    "originalString = ""Hello, World!""" & vbCrLf & _
                    "lowerCaseString = LCase$(originalString) ' Returns ""hello, world!""" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "Both `LCase$` and `LCase` functions will convert the letters of the specified string to lowercase, but `LCase$` returns a `String` type and `LCase` returns a `Variant` type.")]
    Public DeclareWide PtrSafe Function LCase Lib "<strings>" Alias "#36" (ByRef String As Variant) As Variant
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Converts all lowercase letters in a specified string to uppercase.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = UCase$([String])`  " & vbCrLf & _
                    "`resultVariant = UCase([String])`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`String` (String or Variant): The string to be converted.  " & vbCrLf & _
                    "### Return Value" & vbCrLf & _
                    "The `UCase$` function returns a `String` with all letters converted to uppercase.  " & vbCrLf & _
                    "The `UCase` function returns a `Variant` with all letters converted to uppercase.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim originalString As String" & vbCrLf & _
                    "Dim upperCaseString As String" & vbCrLf & _
                    "originalString = ""Hello, World!""" & vbCrLf & _
                    "upperCaseString = UCase$(originalString) ' Returns 'HELLO, WORLD!'" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "Both `UCase$` and `UCase` functions will convert the letters of the specified string to uppercase, but `UCase$` returns a `String` type and `UCase` returns a `Variant` type.")]
    Public DeclareWide PtrSafe Function [UCase$] Lib "<strings>" Alias "#37" (ByVal String As String) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Converts all lowercase letters in a specified string to uppercase.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = UCase$([String])`  " & vbCrLf & _
                    "`resultVariant = UCase([String])`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`String` (String or Variant): The string to be converted.  " & vbCrLf & _
                    "### Return Value" & vbCrLf & _
                    "The `UCase$` function returns a `String` with all letters converted to uppercase.  " & vbCrLf & _
                    "The `UCase` function returns a `Variant` with all letters converted to uppercase.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim originalString As String" & vbCrLf & _
                    "Dim upperCaseString As String" & vbCrLf & _
                    "originalString = ""Hello, World!""" & vbCrLf & _
                    "upperCaseString = UCase$(originalString) ' Returns 'HELLO, WORLD!'" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "Both `UCase$` and `UCase` functions will convert the letters of the specified string to uppercase, but `UCase$` returns a `String` type and `UCase` returns a `Variant` type.")]
    Public DeclareWide PtrSafe Function UCase Lib "<strings>" Alias "#38" (ByRef String As Variant) As Variant
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Formats a given expression as a string according to the specified format, first day of the week, and first week of the year settings.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = Format$([Expression], [Format], [FirstDayOfWeek], [FirstWeekOfYear])`  " & vbCrLf & _
                    "`resultVariant = Format([Expression], [Format], [FirstDayOfWeek], [FirstWeekOfYear])`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Variant): The expression to format.  " & vbCrLf & _
                    "`Format` (Variant): The format to apply to the expression. This is optional.  " & vbCrLf & _
                    "`FirstDayOfWeek` (VbDayOfWeek): Specifies the first day of the week. If omitted, vbSunday is assumed.  " & vbCrLf & _
                    "`FirstWeekOfYear` (VbFirstWeekOfYear): Specifies the first week of the year. If omitted, vbFirstJan1 is assumed.  " & vbCrLf & _
                    "### Return Value" & vbCrLf & _
                    "The `Format$` function returns a `String` formatted according to the specified formatting arguments.  " & vbCrLf & _
                    "The `Format` function returns a `Variant` formatted according to the specified formatting arguments.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim dateValue As Date" & vbCrLf & _
                    "dateValue = #1/31/2023#" & vbCrLf & _
                    "' Standard date formatting" & vbCrLf & _
                    "Dim formattedDate As String" & vbCrLf & _
                    "formattedDate = Format$(dateValue, ""Long Date"") ' Returns 'Tuesday, January 31, 2023'" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "Both `Format$` and `Format` functions will format the given expression according to the specified format, but `Format$` returns a `String` type while `Format` returns a `Variant` type.")]
    Public DeclareWide PtrSafe Function [Format$] Lib "<strings>" Alias "#39" (ByRef Expression As Variant, Optional ByRef Format As Variant, Optional ByVal FirstDayOfWeek As VbDayOfWeek = VbDayOfWeek.vbSunday, Optional ByVal FirstWeekOfYear As VbFirstWeekOfYear = VbFirstWeekOfYear.vbFirstJan1) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Formats a given expression as a string according to the specified format, first day of the week, and first week of the year settings.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`resultString = Format$([Expression], [Format], [FirstDayOfWeek], [FirstWeekOfYear])`  " & vbCrLf & _
                    "`resultVariant = Format([Expression], [Format], [FirstDayOfWeek], [FirstWeekOfYear])`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Variant): The expression to format.  " & vbCrLf & _
                    "`Format` (Variant): The format to apply to the expression. This is optional.  " & vbCrLf & _
                    "`FirstDayOfWeek` (VbDayOfWeek): Specifies the first day of the week. If omitted, vbSunday is assumed.  " & vbCrLf & _
                    "`FirstWeekOfYear` (VbFirstWeekOfYear): Specifies the first week of the year. If omitted, vbFirstJan1 is assumed.  " & vbCrLf & _
                    "### Return Value" & vbCrLf & _
                    "The `Format$` function returns a `String` formatted according to the specified formatting arguments.  " & vbCrLf & _
                    "The `Format` function returns a `Variant` formatted according to the specified formatting arguments.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim dateValue As Date" & vbCrLf & _
                    "dateValue = #1/31/2023#" & vbCrLf & _
                    "' Standard date formatting" & vbCrLf & _
                    "Dim formattedDate As String" & vbCrLf & _
                    "formattedDate = Format$(dateValue, ""Long Date"") ' Returns 'Tuesday, January 31, 2023'" & vbCrLf & _
                    "```  " & vbCrLf & _
                    "Both `Format$` and `Format` functions will format the given expression according to the specified format, but `Format$` returns a `String` type while `Format` returns a `Variant` type.")]
    Public DeclareWide PtrSafe Function Format Lib "<strings>" Alias "#40" (ByRef Expression As Variant, Optional ByRef Format As Variant, Optional ByVal FirstDayOfWeek As VbDayOfWeek = VbDayOfWeek.vbSunday, Optional ByVal FirstWeekOfYear As VbFirstWeekOfYear = VbFirstWeekOfYear.vbFirstJan1) As Variant
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Formats an expression as a currency string.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultString = FormatCurrency(Expression, [NumDigitsAfterDecimal], [IncludeLeadingDigit], [UseParensForNegativeNumbers], [GroupDigits])`  " & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`Expression` (Variant): The expression to be formatted as currency.  " & vbCrLf & _
                 "`NumDigitsAfterDecimal` (Long): Optional. Number of digits to display after the decimal. Default is -1 (system setting).  " & vbCrLf & _
                 "`IncludeLeadingDigit` (VbTriState): Optional. Specifies whether or not a leading zero is displayed for fractional values. Default is `vbUseDefault`.  " & vbCrLf & _
                 "`UseParensForNegativeNumbers` (VbTriState): Optional. Specifies whether or not to place negative values within parentheses. Default is `vbUseDefault`.  " & vbCrLf & _
                 "`GroupDigits` (VbTriState): Optional. Specifies whether or not numbers are grouped using the group delimiter specified in the system settings. Default is `vbUseDefault`.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim currencyString As String" & vbCrLf & _
                 "currencyString = FormatCurrency(12345.6789) ' Assuming system setting is en-US, it would return ""$12,345.68""" & vbCrLf & _
                 "```")]
    Public DeclareWide PtrSafe Function FormatCurrency Lib "<strings>" Alias "#41" (ByRef Expression As Variant, Optional ByVal NumDigitsAfterDecimal As Long = -1&, Optional ByVal IncludeLeadingDigit As VbTriState = VbTriState.vbUseDefault, Optional ByVal UseParensForNegativeNumbers As VbTriState = VbTriState.vbUseDefault, Optional ByVal GroupDigits As VbTriState = VbTriState.vbUseDefault) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Formats an expression as a numeric string.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultString = FormatNumber(Expression, [NumDigitsAfterDecimal], [IncludeLeadingDigit], [UseParensForNegativeNumbers], [GroupDigits])`  " & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`Expression` (Variant): The expression to be formatted as a number.  " & vbCrLf & _
                 "`NumDigitsAfterDecimal` (Long): Optional. Number of digits to display after the decimal. Default is -1 (system setting).  " & vbCrLf & _
                 "`IncludeLeadingDigit` (VbTriState): Optional. Specifies whether or not a leading zero is displayed for fractional values. Default is `vbUseDefault`.  " & vbCrLf & _
                 "`UseParensForNegativeNumbers` (VbTriState): Optional. Specifies whether or not to place negative values within parentheses. Default is `vbUseDefault`.  " & vbCrLf & _
                 "`GroupDigits` (VbTriState): Optional. Specifies whether or not numbers are grouped using the group delimiter specified in the system settings. Default is `vbUseDefault`.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim numberString As String" & vbCrLf & _
                 "numberString = FormatNumber(12345.6789) ' Would return ""12, 345.679"" assuming system setting is en-US with 3 decimal places" & vbCrLf & _
                 "```")]
    Public DeclareWide PtrSafe Function FormatNumber Lib "<strings>" Alias "#42" (ByRef Expression As Variant, Optional ByVal NumDigitsAfterDecimal As Long = -1&, Optional ByVal IncludeLeadingDigit As VbTriState = VbTriState.vbUseDefault, Optional ByVal UseParensForNegativeNumbers As VbTriState = VbTriState.vbUseDefault, Optional ByVal GroupDigits As VbTriState = VbTriState.vbUseDefault) As String
        
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Formats an expression as a percent string.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultString = FormatPercent(Expression, [NumDigitsAfterDecimal], [IncludeLeadingDigit], [UseParensForNegativeNumbers], [GroupDigits])`  " & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`Expression` (Variant): The expression to be formatted as a percentage.  " & vbCrLf & _
                 "`NumDigitsAfterDecimal` (Long): Optional. Number of digits to display after the decimal. Default is -1 (system setting).  " & vbCrLf & _
                 "`IncludeLeadingDigit` (VbTriState): Optional. Specifies whether or not a leading zero is displayed for fractional values. Default is `vbUseDefault`.  " & vbCrLf & _
                 "`UseParensForNegativeNumbers` (VbTriState): Optional. Specifies whether or not to place negative values within parentheses. Default is `vbUseDefault`.  " & vbCrLf & _
                 "`GroupDigits` (VbTriState): Optional. Specifies whether or not numbers are grouped using the group delimiter specified in the system settings. Default is `vbUseDefault`.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim percentString As String" & vbCrLf & _
                 "percentString = FormatPercent(0.123456789) ' Would return ""12.35%"" assuming system setting is en-US with 2 decimal places" & vbCrLf & _
                 "```")]
    Public DeclareWide PtrSafe Function FormatPercent Lib "<strings>" Alias "#43" (ByRef Expression As Variant, Optional ByVal NumDigitsAfterDecimal As Long = -1&, Optional ByVal IncludeLeadingDigit As VbTriState = VbTriState.vbUseDefault, Optional ByVal UseParensForNegativeNumbers As VbTriState = VbTriState.vbUseDefault, Optional ByVal GroupDigits As VbTriState = VbTriState.vbUseDefault) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Formats an expression as a date/time string.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultString = FormatDateTime(Expression, [NamedFormat])`  " & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`Expression` (Variant): The expression to be formatted as a date/time.  " & vbCrLf & _
                 "`NamedFormat` (VbDateTimeFormat): Optional. The format to use when formatting the date/time. Default is `vbGeneralDate`.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim dateTimeString As String" & vbCrLf & _
                 "dateTimeString = FormatDateTime(Now, vbLongDate) ' Would return the current date in the format ""Thursday, November 3, 2023"" assuming system setting is en-US" & vbCrLf & _
                 "```")]
    Public DeclareWide PtrSafe Function FormatDateTime Lib "<strings>" Alias "#44" (ByRef Expression As Variant, Optional ByVal NamedFormat As VbDateTimeFormat = VbDateTimeFormat.vbGeneralDate) As String
   
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Compares two strings and returns a value indicating the result of the comparison.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = StrComp(String1, String2, [Compare])`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`String1` (Variant): The first string to compare.  " & vbCrLf & _
                    "`String2` (Variant): The second string to compare.  " & vbCrLf & _
                    "`Compare` (VbCompareMethod): Specifies the type of string comparison. If omitted, the comparison method defaults to Binary (`vbBinaryCompare`), unless the `Option Compare` statement specifies `Text` at the component level.  " & vbCrLf & _
                    "### Return Value" & vbCrLf & _
                    "A `Variant` of subtype `Integer`:" & vbCrLf & _
                    "- `0` if `String1` is equal to `String2`," & vbCrLf & _
                    "- `-1` if `String1` is less than `String2`," & vbCrLf & _
                    "- `1` if `String1` is greater than `String2`.  " & vbCrLf & _
                    "If either string is `Null`, `StrComp` returns `Null`.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Comparing strings using default binary comparison" & vbCrLf & _
                    "Dim compareResult As Integer" & vbCrLf & _
                    "compareResult = StrComp(""apple"", ""Apple"") ' Returns -1 since 'a' is less than 'A' in ASCII value" & vbCrLf & vbCrLf & _
                    "' Comparing strings using text comparison" & vbCrLf & _
                    "compareResult = StrComp(""apple"", ""Apple"", vbTextCompare) ' Returns 0 since case is ignored" & vbCrLf & _
                    "```")]
    Public DeclareWide PtrSafe Function StrComp Lib "<strings>" Alias "#45" (ByRef String1 As Variant, ByRef String2 As Variant, Optional ByVal Compare As VbCompareMethod = TB_BUILTIN_CURRENT_MODULE_TEXTCOMPARE_MODE) As Variant
    
#If TWINBASIC_ANSI Then
    [ PreserveSig (False), UseGetLastError (False) ]
    [ Description ("Converts a given string to a specified format based on the VbStrConv enumeration settings. It can be used for converting to uppercase or lowercase, Unicode normalization, and various locale-specific adjustments.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultVariant = StrConv([String], [Conversion], [LocaleID])`  " & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`String` (Variant): The string expression to be converted.  " & vbCrLf & _
                 "`Conversion` (VbStrConv): The enumeration value that specifies the type of conversion to be applied.  " & vbCrLf & _
                 "`LocaleID` (Long): The Locale Identifier for locale-specific conversions. If omitted, the system's locale is used.  " & vbCrLf & _
                 "### Return Value" & vbCrLf & _
                 "A `Variant` containing the converted string according to the specified `Conversion` and `LocaleID`.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim originalString As String" & vbCrLf & _
                 "Dim convertedString As Variant" & vbCrLf & _
                 "originalString = ""Hello World!""" & vbCrLf & _
                 "' Convert to uppercase" & vbCrLf & _
                 "convertedString = StrConv(originalString, VbStrConv.Uppercase) ' Returns ""HELLO WORLD!""" & vbCrLf & _
                 "' Convert to ProperCase (Title Case)" & vbCrLf & _
                 "convertedString = StrConv(originalString, VbStrConv.ProperCase) ' Returns ""Hello World!""" & vbCrLf & _
                 "' Convert to Simplified Chinese using the Locale ID for China" & vbCrLf & _
                 "convertedString = StrConv(originalString, VbStrConv.SimplifiedChinese, 2052) ' Converts the string if possible" & vbCrLf & _
                 "```") ]
    Public DeclareWide PtrSafe Function StrConv Lib "<strings>" Alias "#46" (ByRef String As Variant, ByVal Conversion As VbStrConv, Optional ByVal LocaleID As Long = 0&) As Variant
#Else
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Converts a given string to a specified format based on the VbStrConv enumeration settings. It can be used for converting to uppercase or lowercase, Unicode normalization, and various locale-specific adjustments.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultVariant = StrConv([String], [Conversion], [LocaleID])`  " & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`String` (Variant): The string expression to be converted.  " & vbCrLf & _
                 "`Conversion` (VbStrConv): The enumeration value that specifies the type of conversion to be applied.  " & vbCrLf & _
                 "`LocaleID` (Long): The Locale Identifier for locale-specific conversions. If omitted, the system's locale is used.  " & vbCrLf & _
                 "### Return Value" & vbCrLf & _
                 "A `Variant` containing the converted string according to the specified `Conversion` and `LocaleID`.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim originalString As String" & vbCrLf & _
                 "Dim convertedString As Variant" & vbCrLf & _
                 "originalString = ""Hello World!""" & vbCrLf & _
                 "' Convert to uppercase" & vbCrLf & _
                 "convertedString = StrConv(originalString, VbStrConv.Uppercase) ' Returns ""HELLO WORLD!""" & vbCrLf & _
                 "' Convert to ProperCase (Title Case)" & vbCrLf & _
                 "convertedString = StrConv(originalString, VbStrConv.ProperCase) ' Returns ""Hello World!""" & vbCrLf & _
                 "' Convert to Simplified Chinese using the Locale ID for China" & vbCrLf & _
                 "convertedString = StrConv(originalString, VbStrConv.SimplifiedChinese, 2052) ' Converts the string if possible" & vbCrLf & _
                 "```")]
    Public DeclareWide PtrSafe Function StrConv Lib "<strings>" Alias "#47" (ByRef String As Variant, ByVal Conversion As VbStrConv, Optional ByVal LocaleID As Long = 0&) As Variant
#End If

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Concatenates an array of strings into a single string with specified delimiters.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultString = Join(SourceArray, [Delimiter])`  " & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`SourceArray` (Variant): The one-dimensional array of strings to concatenate.  " & vbCrLf & _
                 "`Delimiter` (Variant): Optional. The string to use as the delimiter. The default is a space.  " & vbCrLf & _
                 "### Return Value" & vbCrLf & _
                 "A `String` that consists of the elements of `SourceArray` joined by the `Delimiter`.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim words() As String" & vbCrLf & _
                 "words = Split(""The quick brown fox "", "" "")" & vbCrLf & _
                 "Dim sentence As String" & vbCrLf & _
                 "sentence = Join(words, "" "") ' Returns ""The quick brown fox""" & vbCrLf & _
                 "```")]
    Public DeclareWide PtrSafe Function Join Lib "<strings>" Alias "#48" (ByRef SourceArray As Variant, Optional ByRef Delimiter As Variant) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Replaces occurrences of a specified substring within a given string with a new substring, starting at a specified position, and compares substrings based on the 'Option Compare' setting.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultString = Replace(Expression, Find, ReplaceWith, [Start], [Count], [Compare])`  " & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`Expression` (String): The string expression containing the substring to replace.  " & vbCrLf & _
                 "`Find` (String): The substring to find within `Expression`.  " & vbCrLf & _
                 "`ReplaceWith` (String): The substring to replace `Find` with.  " & vbCrLf & _
                 "`Start` (Long): Optional. The start position for replacements. The default value is 1.  " & vbCrLf & _
                 "`Count` (Long): Optional. The number of substring replacements to perform. The default value is -1 (all occurrences).  " & vbCrLf & _
                 "`Compare` (VbCompareMethod): Optional. The comparison method to use (`vbBinaryCompare` or `vbTextCompare`). If omitted, the setting of the 'Option Compare' statement at the module or project level is used.  " & vbCrLf & _
                 "### Return Value" & vbCrLf & _
                 "A `String` with occurrences of `Find` replaced by `ReplaceWith`.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim originalText As String" & vbCrLf & _
                 "originalText = ""The rain in Spain stays mainly in the plain.""" & vbCrLf & _
                 "Dim newText As String" & vbCrLf & _
                 "newText = Replace(originalText, ""in"", ""on"", 1, -1, vbTextCompare) ' Returns "" The raon on Spaon stays maonly on the plaon.""" & vbCrLf & _
                 "```")]
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    Public DeclareWide PtrSafe Function Replace Lib "<strings>" Alias "#49" (ByVal Expression As String, ByVal Find As String, ByVal Replace As String, Optional ByVal Start As Long = 1&, Optional ByVal Count As Long = -1&, Optional ByVal Compare As VbCompareMethod = TB_BUILTIN_CURRENT_MODULE_TEXTCOMPARE_MODE) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    ' Function to return the position of the first occurrence of one string within another.
    [Description("Returns a `Long` specifying the position of the first occurrence of one string within another.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultLong = InStr$([Start], String1, String2, [Compare])`  " & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`Start` (Long): Optional. The start position for the search. The search begins at the first character by default.  " & vbCrLf & _
                 "`String1` (String): The string to search within.  " & vbCrLf & _
                 "`String2` (String): The string to search for.  " & vbCrLf & _
                 "`Compare` (VbCompareMethod): Optional. The comparison method to use (binary or text). If omitted, the setting of the 'Option Compare' statement at the module or project level is used.  " & vbCrLf & _
                 "### Return Value" & vbCrLf & _
                 "The position of `String2` within `String1`, starting from `Start`, as a `Long`. If `String2` is not found, the function returns 0.  " & vbCrLf & _
                 "### Note" & vbCrLf & _
                 "The `Start` argument can be omitted, allowing the syntax `InStr$(String1, String2)`, which begins searching from the first character.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim searchIn As String" & vbCrLf & _
                 "searchIn = ""Find the substring in this string.""" & vbCrLf & _
                 "Dim searchFor As String" & vbCrLf & _
                 "searchFor = ""substring""" & vbCrLf & _
                 "Dim position As Long" & vbCrLf & _
                 "position = InStr$(1, searchIn, searchFor) ' Returns 10" & vbCrLf & _
                 "position = InStr$(searchIn, searchFor) ' Also returns 10, starting from first character" & vbCrLf & _
                 "```")]
    Public DeclareWide PtrSafe Function [InStr$] Lib "<strings>" Alias "#50" (ByVal Start As Long, ByVal String1 As String, ByVal String2 As String, Optional ByVal Compare As VbCompareMethod = TB_BUILTIN_CURRENT_MODULE_TEXTCOMPARE_MODE) As Long
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns a `Variant` (typically `Long`) specifying the position of the first occurrence of one string within another, allowing for arguments to be passed as `Variant`.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultVariant = InStr([Start], String1, String2, [Compare])`  " & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`Start` (Variant): Optional. The start position for the search. The search begins at the first character by default.  " & vbCrLf & _
                 "`String1` (Variant): The string to search within.  " & vbCrLf & _
                 "`String2` (Variant): The string to search for.  " & vbCrLf & _
                 "`Compare` (VbCompareMethod): Optional. The comparison method to use (binary or text). If omitted, the setting of the 'Option Compare' statement at the module or project level is used.  " & vbCrLf & _
                 "### Return Value" & vbCrLf & _
                 "The position of `String2` within `String1`, starting from `Start`, as a `Variant`. If `String2` is not found, the function returns 0.  " & vbCrLf & _
                 "### Note" & vbCrLf & _
                 "The `Start` argument can be omitted, allowing the syntax `InStr(String1, String2)`, which begins searching from the first character.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim searchInVar As Variant" & vbCrLf & _
                 "searchInVar = ""Find the substring in this string.""" & vbCrLf & _
                 "Dim searchForVar As Variant" & vbCrLf & _
                 "searchForVar = ""substring""" & vbCrLf & _
                 "Dim positionVar As Variant" & vbCrLf & _
                 "positionVar = InStr(1, searchInVar, searchForVar) ' Returns 10" & vbCrLf & _
                 "positionVar = InStr(searchInVar, searchForVar) ' Also returns 10, starting from first character" & vbCrLf & _
                 "```")]
    Public DeclareWide PtrSafe Function InStr Lib "<strings>" Alias "#51" (ByRef Start As Variant, ByRef String1 As Variant, ByRef String2 As Variant, Optional ByVal Compare As VbCompareMethod = TB_BUILTIN_CURRENT_MODULE_TEXTCOMPARE_MODE) As Variant
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns a `Variant` (typically `Long`) specifying the position of the first occurrence of one string within another, allowing for arguments to be passed as `Variant`.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultVariant = InStr([Start], String1, String2, [Compare])`  " & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`Start` (Variant): Optional. The start position for the search. The search begins at the first character by default.  " & vbCrLf & _
                 "`String1` (Variant): The string to search within.  " & vbCrLf & _
                 "`String2` (Variant): The string to search for.  " & vbCrLf & _
                 "`Compare` (VbCompareMethod): Optional. The comparison method to use (binary or text). If omitted, the setting of the 'Option Compare' statement at the module or project level is used.  " & vbCrLf & _
                 "### Return Value" & vbCrLf & _
                 "The position of `String2` within `String1`, starting from `Start`, as a `Variant`. If `String2` is not found, the function returns 0.  " & vbCrLf & _
                 "### Note" & vbCrLf & _
                 "The `Start` argument can be omitted, allowing the syntax `InStr(String1, String2)`, which begins searching from the first character.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim searchInVar As Variant" & vbCrLf & _
                 "searchInVar = ""Find the substring in this string.""" & vbCrLf & _
                 "Dim searchForVar As Variant" & vbCrLf & _
                 "searchForVar = ""substring""" & vbCrLf & _
                 "Dim positionVar As Variant" & vbCrLf & _
                 "positionVar = InStr(1, searchInVar, searchForVar) ' Returns 10" & vbCrLf & _
                 "positionVar = InStr(searchInVar, searchForVar) ' Also returns 10, starting from first character" & vbCrLf & _
                 "```")]
    Public DeclareWide PtrSafe Function InStr Lib "<strings>" Alias "#52" (ByRef String1 As Variant, ByRef String2 As Variant, Optional ByVal Compare As VbCompareMethod = TB_BUILTIN_CURRENT_MODULE_TEXTCOMPARE_MODE) As Variant
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns a `Variant` (typically `Long`) specifying the position of the first occurrence of one byte array within another, with an option to start searching from a given position.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultVariant = InStrB([Start], String1, String2, [Compare])`  " & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`Start` (Variant): Optional. The start position for the search, in bytes. The search begins at the first character by default.  " & vbCrLf & _
                 "`String1` (Variant): The byte array to search within.  " & vbCrLf & _
                 "`String2` (Variant): The byte array to search for.  " & vbCrLf & _
                 "`Compare` (VbCompareMethod): Optional. The comparison method to use (binary or text). If omitted, the setting of the 'Option Compare' statement at the module or project level is used.  " & vbCrLf & _
                 "### Return Value" & vbCrLf & _
                 "The position of `String2` within `String1`, starting from `Start`, as a `Variant`. If `String2` is not found, the function returns 0.  " & vbCrLf & _
                 "### Note" & vbCrLf & _
                 "The `Start` argument can be omitted, allowing the syntax `InStrB(String1, String2)`, which begins searching from the first byte.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim searchInBytes() As Byte" & vbCrLf & _
                 "searchInBytes = StrConv(""Find the substring in this string."", vbFromUnicode)" & vbCrLf & _
                 "Dim searchForBytes() As Byte" & vbCrLf & _
                 "searchForBytes = StrConv(""substring"", vbFromUnicode)" & vbCrLf & _
                 "Dim positionBytes As Variant" & vbCrLf & _
                 "positionBytes = InStrB(1, searchInBytes, searchForBytes) ' Returns the starting position in bytes" & vbCrLf & _
                 "positionBytes = InStrB(searchInBytes, searchForBytes) ' Also returns the starting position in bytes, starting from first byte" & vbCrLf & _
                 "```")]
    Public DeclareWide PtrSafe Function InStrB Lib "<strings>" Alias "#53" (ByRef Start As Variant, ByRef String1 As Variant, ByRef String2 As Variant, Optional ByVal Compare As VbCompareMethod = TB_BUILTIN_CURRENT_MODULE_TEXTCOMPARE_MODE) As Variant

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns a `Variant` (typically `Long`) specifying the position of the first occurrence of one byte array within another, with an option to start searching from a given position.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultVariant = InStrB([Start], String1, String2, [Compare])`  " & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`Start` (Variant): Optional. The start position for the search, in bytes. The search begins at the first character by default.  " & vbCrLf & _
                 "`String1` (Variant): The byte array to search within.  " & vbCrLf & _
                 "`String2` (Variant): The byte array to search for.  " & vbCrLf & _
                 "`Compare` (VbCompareMethod): Optional. The comparison method to use (binary or text). If omitted, the setting of the 'Option Compare' statement at the module or project level is used.  " & vbCrLf & _
                 "### Return Value" & vbCrLf & _
                 "The position of `String2` within `String1`, starting from `Start`, as a `Variant`. If `String2` is not found, the function returns 0.  " & vbCrLf & _
                 "### Note" & vbCrLf & _
                 "The `Start` argument can be omitted, allowing the syntax `InStrB(String1, String2)`, which begins searching from the first byte.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim searchInBytes() As Byte" & vbCrLf & _
                 "searchInBytes = StrConv(""Find the substring in this string."", vbFromUnicode)" & vbCrLf & _
                 "Dim searchForBytes() As Byte" & vbCrLf & _
                 "searchForBytes = StrConv(""substring"", vbFromUnicode)" & vbCrLf & _
                 "Dim positionBytes As Variant" & vbCrLf & _
                 "positionBytes = InStrB(1, searchInBytes, searchForBytes) ' Returns the starting position in bytes" & vbCrLf & _
                 "positionBytes = InStrB(searchInBytes, searchForBytes) ' Also returns the starting position in bytes, starting from first byte" & vbCrLf & _
                 "```")]
    Public DeclareWide PtrSafe Function InStrB Lib "<strings>" Alias "#54" (ByRef String1 As Variant, ByRef String2 As Variant, Optional ByVal Compare As VbCompareMethod = TB_BUILTIN_CURRENT_MODULE_TEXTCOMPARE_MODE) As Variant
                    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    ' Function to return the position of an occurrence of one string within another, from the end of the string.
    [Description("Returns a `Variant` (typically `Long`) specifying the position of the first occurrence of one string within another, searching from the end of the string towards the start, with an option to start searching from a given position.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultVariant = InStrRev(StringCheck, StringMatch, [Start], [Compare])`  " & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`StringCheck` (Variant): The string to search within.  " & vbCrLf & _
                 "`StringMatch` (Variant): The string to search for.  " & vbCrLf & _
                 "`Start` (Variant): Optional. The start position for the search, from the end of `StringCheck`.  " & vbCrLf & _
                 "`Compare` (VbCompareMethod): Optional. The method of comparison. `TB_BUILTIN_CURRENT_MODULE_TEXTCOMPARE_MODE` is used if omitted, which is based on the 'Option Compare' setting.  " & vbCrLf & _
                 "### Return Value" & vbCrLf & _
                 "The position of `StringMatch` within `StringCheck`, searching from `Start` towards the beginning of `StringCheck`. If `StringMatch` is not found, the function returns 0.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim text As String" & vbCrLf & _
                 "text = ""Find the last 'in' in this sentence.""" & vbCrLf & _
                 "Dim position As Variant" & vbCrLf & _
                 "position = InStrRev(text, ""in"") ' Returns the position of the last 'in' in `text`  " & vbCrLf & _
                 "```")]
    Public DeclareWide PtrSafe Function InStrRev Lib "<strings>" Alias "#55" (ByRef StringCheck As Variant, ByRef StringMatch As Variant, Optional ByRef Start As Variant, Optional ByVal Compare As VbCompareMethod = TB_BUILTIN_CURRENT_MODULE_TEXTCOMPARE_MODE) As Variant
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns a `Variant` (array) containing a subset of a string array based on specified filter criteria.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultArray = Filter(SourceArray, Match, [Include], [Compare])`  " & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`SourceArray` (Variant): The array of strings to search.  " & vbCrLf & _
                 "`Match` (String): The substring to search for in each element of `SourceArray`.  " & vbCrLf & _
                 "`Include` (Boolean): Optional. Determines whether to include (`True`) or exclude (`False`) the matching elements. Default is `True`.  " & vbCrLf & _
                 "`Compare` (VbCompareMethod): Optional. The method of comparison for `Match`.  " & vbCrLf & _
                 "### Return Value" & vbCrLf & _
                 "An array containing the filtered strings.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim sentences() As String" & vbCrLf & _
                 "sentences = Split(""This is a test.This is only a test."", ""."")" & vbCrLf & _
                 "Dim result() As Variant" & vbCrLf & _
                 "result = Filter(sentences, ""only"", True) ' Returns an array with elements containing 'only'.  " & vbCrLf & _
                 "```")]
    Public DeclareWide PtrSafe Function Filter Lib "<strings>" Alias "#56" (ByRef SourceArray As Variant, ByVal Match As String, Optional ByVal Include As Boolean = True, Optional ByVal Compare As VbCompareMethod = TB_BUILTIN_CURRENT_MODULE_TEXTCOMPARE_MODE) As Variant
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Splits an expression into a zero-based, one-dimensional array containing a specified number of substrings.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultArray = Split(Expression, [Delimiter], [Limit], [Compare])`  " & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`Expression` (String): The string expression containing substrings and delimiters.  " & vbCrLf & _
                 "`Delimiter` (Variant): Optional. The character used to identify substring limits. Default is the space character.  " & vbCrLf & _
                 "`Limit` (Long): Optional. The number of substrings to be returned. `-1` indicates all substrings.  " & vbCrLf & _
                 "`Compare` (VbCompareMethod): Optional. The comparison method used for the delimiters.  " & vbCrLf & _
                 "### Return Value" & vbCrLf & _
                 "A one-dimensional array containing the resulting substrings.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim text As String" & vbCrLf & _
                 "text = ""Split, this, string""" & vbCrLf & _
                 "Dim parts() As String" & vbCrLf & _
                 "parts = Split(text, "","") ' Returns an array {""Split"", ""this"", ""string""}""" & vbCrLf & _
                 "```")]
    Public DeclareWide PtrSafe Function Split Lib "<strings>" Alias "#57" (ByVal Expression As String, Optional ByRef Delimiter As Variant, Optional ByVal Limit As Long = -1&, Optional ByVal Compare As VbCompareMethod = TB_BUILTIN_CURRENT_MODULE_TEXTCOMPARE_MODE) As Variant
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("The Len$ function returns the length of a string, counting each character. Len returns the size of a variable, but for User-Defined Types (UDTs), it might not account for padding or other storage details, therefore LenB should be used for accurate size determination.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultLong = Len$([Value])` ' Returns the number of characters in a string" & vbCrLf & _
                 "`resultLong = Len([Value])` ' Returns the number of bytes occupied by a variable" & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`Value` (String/Any): The string or variable to determine the length or size of.  " & vbCrLf & _
                 "### Return Value" & vbCrLf & _
                 "`Len$` returns a `Long`, representing the number of characters in the specified string.  " & vbCrLf & _
                 "`Len` returns a `Long`, representing the size of `Value`. For strings, this is the number of characters; for UDTs, this might not be the actual size due to storage padding.  " & vbCrLf & _
                 "### Note" & vbCrLf & _
                 "For UDTs, `Len` may return a size that doesn't account for padding; `LenB` is recommended for accurate size measurement of UDTs.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim strLength As Long" & vbCrLf & _
                 "Dim varSize As Long" & vbCrLf & _
                 "Dim myString As String" & vbCrLf & _
                 "Dim myInteger As Integer" & vbCrLf & _
                 "Dim myUDT As MyType" & vbCrLf & _
                 "myString = ""Hello, World!""" & vbCrLf & _
                 "myInteger = 123" & vbCrLf & _
                 "strLength = Len$(myString) ' Returns 13, the number of characters in myString" & vbCrLf & _
                 "varSize = Len(myInteger) ' Returns 2, the size in bytes of an Integer" & vbCrLf & _
                 "' Incorrect usage for UDTs due to potential padding:" & vbCrLf & _
                 "Dim udtSizeIncorrect As Long" & vbCrLf & _
                 "udtSizeIncorrect = Len(myUDT) ' May not account for padding" & vbCrLf & _
                 "' Correct usage for UDTs to get actual size:" & vbCrLf & _
                 "Dim udtSizeCorrect As Long" & vbCrLf & _
                 "udtSizeCorrect = LenB(myUDT) ' Accounts for padding, returning the actual size of the UDT" & vbCrLf & _
                 "```")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function [Len$] Lib "<strings>" Alias "#-8" (ByVal Value As String) As Long
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("The Len$ function returns the length of a string, counting each character. Len returns the size of a variable, but for User-Defined Types (UDTs), it might not account for padding or other storage details, therefore LenB should be used for accurate size determination.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultLong = Len$([Value])` ' Returns the number of characters in a string" & vbCrLf & _
                 "`resultLong = Len([Value])` ' Returns the number of bytes occupied by a variable" & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`Value` (String/Any): The string or variable to determine the length or size of.  " & vbCrLf & _
                 "### Return Value" & vbCrLf & _
                 "`Len$` returns a `Long`, representing the number of characters in the specified string.  " & vbCrLf & _
                 "`Len` returns a `Long`, representing the size of `Value`. For strings, this is the number of characters; for UDTs, this might not be the actual size due to storage padding.  " & vbCrLf & _
                 "### Note" & vbCrLf & _
                 "For UDTs, `Len` may return a size that doesn't account for padding; `LenB` is recommended for accurate size measurement of UDTs.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim strLength As Long" & vbCrLf & _
                 "Dim varSize As Long" & vbCrLf & _
                 "Dim myString As String" & vbCrLf & _
                 "Dim myInteger As Integer" & vbCrLf & _
                 "Dim myUDT As MyType" & vbCrLf & _
                 "myString = ""Hello, World!""" & vbCrLf & _
                 "myInteger = 123" & vbCrLf & _
                 "strLength = Len$(myString) ' Returns 13, the number of characters in myString" & vbCrLf & _
                 "varSize = Len(myInteger) ' Returns 2, the size in bytes of an Integer" & vbCrLf & _
                 "' Incorrect usage for UDTs due to potential padding:" & vbCrLf & _
                 "Dim udtSizeIncorrect As Long" & vbCrLf & _
                 "udtSizeIncorrect = Len(myUDT) ' May not account for padding" & vbCrLf & _
                 "' Correct usage for UDTs to get actual size:" & vbCrLf & _
                 "Dim udtSizeCorrect As Long" & vbCrLf & _
                 "udtSizeCorrect = LenB(myUDT) ' Accounts for padding, returning the actual size of the UDT" & vbCrLf & _
                 "```  " & vbCrLf & _
                 "### Note" & vbCrLf & _
                 "There is also a `Len(Of T)` generic version of this function, allowing you to ascertain the byte length of a type, without declaring a variable of that type.  e.g. `LenB(Of Integer) gives a value of 2.")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function Len Lib "<strings>" Alias "#-9" (ByVal Value As Any) As Long

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("The LenB$ function returns the length of a string in bytes, counting two bytes per character in Unicode strings.  " & vbCrLf & _
                 "The LenB function is used to determine the number of bytes a variable uses in memory, which is particularly useful for User-Defined Types (UDTs) to account for storage padding.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultLong = LenB$([Value])` ' Returns the byte length of a string" & vbCrLf & _
                 "`resultLong = LenB([Value])` ' Returns the size in bytes of a variable" & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`Value` (String/Any): The string or variable to determine the byte length or byte size of.  " & vbCrLf & _
                 "### Return Value" & vbCrLf & _
                 "`LenB$` returns a `Long`, representing the byte length of the specified string.  " & vbCrLf & _
                 "`LenB` returns a `Long`, representing the number of bytes `Value` occupies in memory.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim byteLength As Long" & vbCrLf & _
                 "Dim varByteSize As Long" & vbCrLf & _
                 "Dim myString As String" & vbCrLf & _
                 "Dim myUDT As MyType" & vbCrLf & _
                 "myString = ""Hello, World!""" & vbCrLf & _
                 "' Each character is 2 bytes (Unicode):" & vbCrLf & _
                 "byteLength = LenB$(myString) ' Returns 26 in Unicode context" & vbCrLf & _
                 "varByteSize = LenB(myUDT) ' Returns the actual byte size of the UDT, including padding" & vbCrLf & _
                 "```  " & vbCrLf & _
                 "### Note" & vbCrLf & _
                 "There is also a `LenB(Of T)` generic version of this function, allowing you to ascertain the byte length of a type, without declaring a variable of that type.  e.g. `LenB(Of Integer) gives a value of 2.")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function [LenB$] Lib "<strings>" Alias "#-10" (ByVal Value As String) As Long
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("The LenB$ function returns the length of a string in bytes, counting each character as a single byte in ANSI strings and two bytes per character in Unicode strings (as typically used in VB6).  " & vbCrLf & _
                 "The LenB function is used to determine the number of bytes a variable uses in memory, which is particularly useful for User-Defined Types (UDTs) to account for storage padding.  " & vbCrLf & _
                 "### Syntax" & vbCrLf & _
                 "`resultLong = LenB$([Value])` ' Returns the byte length of a string" & vbCrLf & _
                 "`resultLong = LenB([Value])` ' Returns the size in bytes of a variable" & vbCrLf & _
                 "### Parameters" & vbCrLf & _
                 "`Value` (String/Any): The string or variable to determine the byte length or byte size of.  " & vbCrLf & _
                 "### Return Value" & vbCrLf & _
                 "`LenB$` returns a `Long`, representing the byte length of the specified string.  " & vbCrLf & _
                 "`LenB` returns a `Long`, representing the number of bytes `Value` occupies in memory. This is precise for all data types, including UDTs.  " & vbCrLf & _
                 "### Example" & vbCrLf & _
                 "```vb" & vbCrLf & _
                 "Dim byteLength As Long" & vbCrLf & _
                 "Dim varByteSize As Long" & vbCrLf & _
                 "Dim myString As String" & vbCrLf & _
                 "Dim myUDT As MyType" & vbCrLf & _
                 "myString = ""Hello, World!""" & vbCrLf & _
                 "' Each character is 2 bytes (Unicode):" & vbCrLf & _
                 "byteLength = LenB$(myString) ' Returns 26 in Unicode context" & vbCrLf & _
                 "varByteSize = LenB(myUDT) ' Returns the actual byte size of the UDT, including padding" & vbCrLf & _
                 "```  " & vbCrLf & _
                 "### Note" & vbCrLf & _
                 "There is also a `LenB(Of T)` generic version of this function, allowing you to ascertain the byte length of a type, without declaring a variable of that type.  e.g. `LenB(Of Integer) gives a value of 2.")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function LenB Lib "<strings>" Alias "#-11" (ByVal Value As Any) As Long
        
End Module