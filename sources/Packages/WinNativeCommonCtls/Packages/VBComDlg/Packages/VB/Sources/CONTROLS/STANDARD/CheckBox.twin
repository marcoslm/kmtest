[Description("A Win32 native CheckBox")]
[WindowsControl("/miscellaneous/ICONS??/CheckBox??.png")]
[ClassId("33AD4EF8-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("7223B97B-A940-4024-8705-56552EB4299A")]    ' FIXME implement {33AD4EF9-6699-11CF-B70C-00AA0060D393} for backcompat
[COMCreatable(False)]
[EventsUseDispInterface]
[ComImport(True)]
Class CheckBox
    
    #Region "INHERITANCE"
     
        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlFocusable Via _BaseControl = New WinNativeFormsBASE.BaseControlFocusable(ControlTypeConstants.vbCheckBox)
        [ImplementsViaPrivateFriendlies] Implements ButtonBase Via _ButtonBase = New ButtonBase
        [ImplementsViaPrivateFriendlies] Implements DataFieldBinderBase Via _DataFieldBinderBase = New DataFieldBinderBase
        
    #End Region
        
    #Region "STATE"
        
        [Description("")]
        [Serialize(True, "Alignment")]
            Private AlignmentINIT As VBRUN.AlignmentConstantsNoCenter = VBRUN.AlignmentConstantsNoCenter.tbLeftJustify
        [CustomDesigner("designer_MultiLineText")]
        [Serialize(True, "Caption")]
            Private Caption_INIT As String
        [Serialize(True, "Value")]
            Private Value_INIT As VBRUN.CheckBoxConstants = VBRUN.CheckBoxConstants.vbUnchecked

            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private InternalValue As CheckBoxConstants        ' Only used for owner-drawn state
            Private OLEDragDropHandler As WinNativeFormsBASE.OLEDragDropHandler
            Private IsDesignMode As Boolean
            Private DisabledClickEvent As Boolean
            
                    
            Public HelpContextID As Long

        [CustomDesigner("designer_RestrictedOLEDropMode")]
            Public OLEDropMode As VBRUN.OLEDropConstants
        [Unimplemented]
            Public RightToLeft As Boolean

            Public WhatsThisHelpID As Long
            
        Public Sub OLEDrag()
            CommonOLEDrag(Me)
        End Sub
                        
        Public Sub ShowWhatsThis()
            HelpSystem.ShowControlHelpManual(Me)
        End Sub
            
    #End Region

    #Region "EVENTS"
    
        [DefaultDesignerEvent]
        [Description("")]
        [DispId(&HEAEA0004)]
            Event Click()
        [Description("")]
        [DispId(&HEAEA0006)]
            Event GotFocus()
        [Description("")]
        [DispId(&HEAEA0008)]
            Event KeyDown(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0009)]
            Event KeyPress(KeyAscii As Integer)
        [Description("")]
        [DispId(&HEAEA000A)]
            Event KeyUp(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0007)]
            Event LostFocus()
        [Description("")]
        [DispId(&HEAEA0001)]
            Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0002)]
            Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0003)]
            Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
            Event Initialize()
        [Description("")]
        [DispId(&HEAEA000B)]
            Event DragDrop(Source As Control, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA000C)]
            Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        
        Event OLECompleteDrag(Effect As Long)
        Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        Event OLESetData(Data As DataObject, DataFormat As Integer)
        Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)
        [DispId(&HEAEA000D)]
            Event Validate(Cancel As Boolean)
        
    #End Region
               
    #Region "MEMBERS"
        
        #If LOG_TERMINATE Then
            Private Sub Class_Terminate()
                    Debug.Print CurrentComponentName & "." & CurrentProcedureName
            End Sub
        #End If
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
                        
            Me.InternalStateReset()     ' resets all the base class state
            Me.InternalStateResetButton()
            Me.InternalStateResetDataBinderBase()
             
            Me.InternalValue = VBRUN.CheckBoxConstants.vbUnchecked
            Me.DisabledClickEvent = False
                    
            With ControlContext.GetSerializer
                If Not .Deserialize(Me) Then
                    Caption_INIT = "CheckBox"
                End If
                IsDesignMode = .IsDesignMode
            End With
            
            _ButtonBase.HandleInitialize()
            
            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InitData.ClassName = "ThunderCheckBox"
            InitData.Caption = Me.Caption_INIT
            InitData.WindowStyles = GetStyles()
            InitData.ExtendedStyles = If(ControlContext.IsPlacedOnUserControl, 0&, WinNativeFormsBASE.GeneralConsts.WindowExtendedStyles.WS_EX_NOPARENTNOTIFY)
            InitData.Flags = ForwardGotFocus Or _
                                ForwardLostFocus Or _
                                ForwardKeyDown Or _
                                ForwardKeyUp Or _
                                ForwardKeyPress Or _
                                ForwardMouseMove Or _
                                ForwardMouseDown Or _
                                ForwardMouseUp Or _
                                ForwardDragOver Or _
                                ForwardValidate
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
        End Sub
        
        Private Function GetStyles() As Long
            Dim styles As Long
        	If _ButtonBase.Style = ButtonConstants.vbButtonGraphical Then
                styles = ButtonStyles.BS_OWNERDRAW
            Else
                ' FIXME VB6 uses BS_AUTO3STATE
                styles = ButtonStyles.BS_3STATE + ButtonStyles.BS_VCENTER + ButtonStyles.BS_MULTILINE + _
                            If(Me.AlignmentINIT = tbRightJustify, ButtonStyles.BS_LEFTTEXT, 0&) + _
                            If(_BaseControl.Appearance = AppearanceConstants.vbAppearFlat, ButtonStyles.BS_FLAT, 0&)
            End If
            Return styles
        End Function
                
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
                
            ' disconnect anything that causes a circular reference here
            If OLEDragDropHandler IsNot Nothing Then OLEDragDropHandler.Disconnect()
            Set Me.Font = Nothing
            Me.InternalStateResetDataBinderBase()
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub
        
        Private Sub HandleCreate() _
                Handles RootWindowElement.Create
                
            Me.InitializeBASE(Me.RootWindowElement, Me.ControlContext, Me)
            
            DisabledClickEvent = True
            Me.ValuePrivate = Me.Value_INIT
            DisabledClickEvent = False
            
            SyncOLEDropMode()
            
            If IsDesignMode = False Then _DataFieldBinderBase.SetupBindings()
            RaiseEvent Initialize() ' FIXME move this into the forwarder
        End Sub
        
        Private Sub SyncRecreate()
            Dim Value As VBRUN.CheckBoxConstants = Me.Value
            Dim Caption As String = Me.Caption
            
            RecreateWindow(GetStyles())
                
            Me.Caption = Caption
            
            DisabledClickEvent = True
            Me.ValuePrivate = Value
            DisabledClickEvent = False
        End Sub

        Private Sub HandleCommand(ByVal NotificationCode As ButtonNotifications, _
                                    ByVal Identifier As Integer) _
                Handles RootWindowElement.Command
                
            Select Case NotificationCode
                Case BN_CLICKED
                    Select Case Me.Value
                        Case CheckBoxConstants.vbUnchecked
                            Me.Value = CheckBoxConstants.vbChecked
                        Case CheckBoxConstants.vbGrayed, CheckBoxConstants.vbChecked
                            Me.Value = CheckBoxConstants.vbUnchecked
                    End Select
            End Select
        End Sub
        
        Private Sub HandleGetColors(ByVal hdc As LongPtr, ByRef BackBrushOut As LongPtr, ByVal ControlType As ControlTypeConstants) _
                Handles RootWindowElement.GetColors
            
            HandleGetColorsCommon(hdc, BackBrushOut, Me)
        End Sub
            
        [Serialize(False)]
        Public Property Get Caption() As String
            Return GetWindowTextCtl()
        End Property
        
        [Serialize(False)]
        Public Property Let Caption(ByVal Value As String)
            SendMessageCtl(WinNativeFormsBASE.WM_SETTEXT, 0, StrPtrSafe(Value))
        End Property

        [Serialize(False)]
        Public Property Get Value() As VBRUN.CheckBoxConstants
            If Me.Style <> ButtonConstants.vbButtonGraphical Then
                Return CType(Of VBRUN.CheckBoxConstants)(SendMessageCtl(ButtonMessages.BM_GETCHECK, 0, 0))
            Else
            	Return Me.InternalValue
            End If
        End Property
        
        [Serialize(False)]
        Public Property Let Value(ByVal Value As VBRUN.CheckBoxConstants)
            ValuePrivate = Value
        End Property
        
        [Serialize(False)]
        Private Property Let ValuePrivate(ByVal Value As VBRUN.CheckBoxConstants)
            If Value < 0 Then
                Err.Raise 380
            End If
            
            If Value <> Me.Value Then
                If Me.Style <> ButtonConstants.vbButtonGraphical Then
                    SendMessageCtl(ButtonMessages.BM_SETCHECK, Value, 0)
                Else
                    Me.InternalValue = Value
                    Me.Refresh
                End If
                If DisabledClickEvent = False Then RaiseEvent Click()
            End If
            _DataFieldBinderBase.OnDataChanged()
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Get _Default() As VBRUN.CheckBoxConstants
            Return Me.Value
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Let _Default(ByVal Value As VBRUN.CheckBoxConstants)
            Me.Value = Value
        End Property
        
        [Serialize(False)]
        [Description("")]
        Property Get Alignment() As VBRUN.AlignmentConstantsNoCenter
            Dim flag As Boolean = GetStyleFlagCtl(ButtonStyles.BS_LEFTTEXT)
            Return If(flag, VBRUN.AlignmentConstantsNoCenter.tbRightJustify, VBRUN.AlignmentConstantsNoCenter.tbLeftJustify)
        End Property
        
        [Serialize(False)]
        [Description("")]
        Property Let Alignment(Value As VBRUN.AlignmentConstantsNoCenter)
            SetStyleFlagCtl(ButtonStyles.BS_LEFTTEXT, Value = VBRUN.AlignmentConstantsNoCenter.tbRightJustify)
            Me.Refresh
        End Property
        
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
                
        Private Sub HandleDrawItem(ByRef Info As WinNativeFormsBASE.DRAWITEMSTRUCT, Handled As Boolean) _
                Handles RootWindowElement.DrawItem
            
            HandleDrawItem_BASE(Info, Handled, Me.Value = CheckBoxConstants.vbChecked, False)
        End Sub

        Private Sub SyncOLEDropMode() _
                Handles OLEDropMode.OnPropertyLet
                
            BaseSyncOLEDropMode(Me, Me.OLEDropMode, Me.OLEDragDropHandler, False, False)
        End Sub
        
        Private Sub _DataFieldBinderBase_SetLiveValue(fieldValue As Variant) _
                Handles [_DataFieldBinderBase].SetLiveValue

            If VarType(fieldValue) <> vbBoolean Then
                Err.Raise 13     ' type mismatch
            End If
            Me.Value = If(fieldValue <> 0, vbChecked, vbUnchecked)
        End Sub
        
        Private Sub _DataFieldBinderBase_GetLiveValue(fieldValue As Variant) _
                Handles [_DataFieldBinderBase].GetLiveValue
            
            fieldValue = If(Me.Value <> vbUnchecked, True, False)
        End Sub
        
        Private Sub _DataFieldBinderBase_GetParent(out As Control) _
                Handles [_DataFieldBinderBase].GetParent
            
            Set out = CType(Of Control)(Me.Parent)
        End Sub
        
        Private Sub RootWindowElement_Load()
            _ButtonBase.HandleLoad()
        End Sub
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
        
    #End Region
    
End Class