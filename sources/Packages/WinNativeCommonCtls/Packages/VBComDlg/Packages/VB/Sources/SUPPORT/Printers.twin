Class Printers
    Private Function GetPrintersCollection() As Collection
        Dim CachedDevices As Collection = New Collection
        Dim driverInfo As String
        Dim bufferLen As Long = 8192
        Dim bufferLenDeviceName As Long = 1024
                
        ' We use the same method as VB6 for enumerating the printers
    TryAgainDevices:
        Dim devicesStrings As String = Space$(bufferLen)
        Dim charsOut As Long = GetProfileStringW("devices", vbNullString, "", devicesStrings, bufferLen)
        If charsOut = (bufferLen - 2) Then
            bufferLen *= 2
            GoTo TryAgainDevices
        End If
        If charsOut > 0 Then
            Do
                Dim DeviceNameLen As Long = lstrlenW(devicesStrings)
                If DeviceNameLen = 0 Then Exit Do
                Dim DeviceName As String = Left$(devicesStrings, DeviceNameLen)
                devicesStrings = Right$(devicesStrings, Len(devicesStrings) - (DeviceNameLen + 1))
            TryAgainDeviceName:
                driverInfo = Space$(bufferLenDeviceName)      ' VB6 uses 256   
                charsOut = GetProfileStringW("devices", DeviceName, "", driverInfo, Len(driverInfo))
                If charsOut = bufferLenDeviceName - 1 Then
                    bufferLenDeviceName *= 2
                    GoTo TryAgainDeviceName
                End If
                If charsOut > 0 Then
                    driverInfo = Left$(driverInfo, charsOut)
                    Dim splitPoint As Long = CLng(InStr(driverInfo, ","))
                    If splitPoint <> 0 Then
                        Dim driverPart As String = Left$(driverInfo, splitPoint - 1)
                        Dim portPart As String = Mid$(driverInfo, splitPoint + 1)
                        
                        Dim port As String
                        Dim portIdx As Long
                        For Each port In Split(portPart, ",")
                            If portIdx = 0 Then
                                CachedDevices.Add(New Printer(DeviceName, driverPart, port), DeviceName)
                            Else
                                CachedDevices.Add(New Printer(DeviceName, driverPart, port))        ' only add the keyed entry for the first port
                            End If
                            portIdx += 1
                        Next
                    End If
                End If
            Loop
        End If
        Return CachedDevices
    End Function
    
    [DefaultMember]
    Public Property Get Item(Index As Variant) As Printer          ' VB6 doesn't support access by name, but tB does
        Dim collection As Any = GetPrintersCollection()
        
        If VarType(Index) = vbString Then
            Return CType(Of Printer)(collection.Item(Index))
        Else
            If Index >= collection.Count Then Err.Raise 9, , "Subscript out of range"
            Return CType(Of Printer)(collection.Item(Index + 1))
        End If
    End Property
    
    Public Property Get Count() As Long
        Return GetPrintersCollection().Count
    End Property
    
    [Enumerator]
    Function _NewEnum() As Variant
        Return GetPrintersCollection().[_NewEnum]()
    End Function
End Class

Public Module PrintersGlobals
    Private InternalDefaultPrinter As Printer
    Private InternalPrinters As Printers
        
    Property Get GlobalGetPrinter() As Printer
        If InternalDefaultPrinter Is Nothing Then
            Set InternalDefaultPrinter = New Printer
        End If
        Return InternalDefaultPrinter
    End Property
    
    Public Sub GlobalSetPrinter(ByVal rhs As Printer)
        If InternalDefaultPrinter Is Nothing Then
            Set InternalDefaultPrinter = New Printer
        End If
        If rhs Is Nothing Then
            Err.Raise 91  ' Object variable Or With block variable Not set
        End If
        CType(Of ITwinBasicPrinter)(InternalDefaultPrinter).ChangePrinter(rhs)
    End Sub
    
    Property Get GlobalGetPrinters() As Printers
        If InternalPrinters Is Nothing Then
            Set InternalPrinters = New Printers
        End If
        Return InternalPrinters
    End Property
End Module