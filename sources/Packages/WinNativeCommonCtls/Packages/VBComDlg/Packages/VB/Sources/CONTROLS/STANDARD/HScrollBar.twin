[Description("A Win32 native horizontal ScrollBar")]
[WindowsControl("/miscellaneous/ICONS??/HScrollBar??.png")]
[ClassId("33AD4F18-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("416E6D18-BD2D-4C88-81AC-E1D58306AFCA")]    ' FIXME implement {33AD4F19-6699-11CF-B70C-00AA0060D393} for backcompat
[COMCreatable(False)]
[EventsUseDispInterface]
[ComImport(True)]
Class HScrollBar
    
    #Region "INHERITANCE"

        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlFocusableNoFont Via _BaseControl = New WinNativeFormsBASE.BaseControlFocusableNoFont(ControlTypeConstants.vbHScrollBar)
        
    #End Region
        
    #Region "STATE"
    
        [Description("")]
            Public SmallChange As Long = 1
        [Description("")]
            Public LargeChange As Long = 1

        [Serialize(True, "Min")]
            Private Min_INIT As Long = 0
        [Serialize(True, "Max")]
            Private Max_INIT As Long = 32767
        [Serialize(True, "Value")]
            Private Value_INIT As Long

            Private WithEvents RootWindowElement As WindowsControls.WindowElement
        
            Public HelpContextID As Long
        [Unimplemented]
            Public RightToLeft As Boolean
        [Unimplemented]
            Public WhatsThisHelpID As Long

            [Serialize(True, "VisualStyles")]
                Private VisualStylesINIT As Boolean = True
                        
            [Description("Opacity, given as a percentage, 0 - 100.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
                Public Opacity As Double = 100
        
            [CustomDesigner("designer_SpectrumWindowsOrClear")]
            [Description("A color, when set, that will appear fully transparent in the window.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
                Public TransparencyKey As OLE_COLOR = -1
            
            Public Sub ShowWhatsThis()
                HelpSystem.ShowControlHelpManual(Me)
            End Sub
    #End Region

    #Region "EVENTS"
    
        [DefaultDesignerEvent]
        [Description("")]
            Event Change()
        [Description("")]
        [DispId(&HEAEA0006)]
            Event GotFocus()
        [Description("")]
        [DispId(&HEAEA0008)]
            Event KeyDown(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0009)]
            Event KeyPress(KeyAscii As Integer)
        [Description("")]
        [DispId(&HEAEA000A)]
            Event KeyUp(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0007)]
            Event LostFocus()
        [Description("")]
            Event Scroll()
        [Description("")]
            Event Initialize()
        [Description("")]
        [DispId(&HEAEA000B)]
            Event DragDrop(Source As Control, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA000C)]
            Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        
        [DispId(&HEAEA000D)]
            Event Validate(Cancel As Boolean)
    #End Region
                
    #Region "MEMBERS"
            
        Private Sub HandleLoad() _
                Handles RootWindowElement.Load
            
            Dim Opacity As Any = Me.Opacity
            If ((Opacity >= 0) And (Opacity < 100)) Or (TransparencyKey <> -1) Then
                SyncOpacity
            End If
        End Sub
        
        Private Sub SyncOpacity() _ 
                Handles Opacity.OnPropertyLet, _
                        TransparencyKey.OnPropertyLet
            
            CommonSyncOpacity(Me.TransparencyKey, Me.Opacity, Me.RootWindowElement.Handle)
        End Sub
                
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
                        
            Me.InternalStateReset()     ' resets all the base class state
            
            With ControlContext.GetSerializer
                If Not .Deserialize(Me) Then
                    'Caption_INIT = "HScrollBar"
                End If
                'IsDesignMode = .IsDesignMode
            End With
            
            With CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX)
                .VisualStyles = Me.VisualStylesINIT
            End With
            
            Dim Opacity As Any = Me.Opacity
            If Opacity > 100 Then Me.Opacity = 100
            If Opacity < 0 Then Me.Opacity = 0
                
            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InitData.ClassName = "ThunderHSrollBar"
            InitData.Caption = ""
            InitData.WindowStyles = WinNativeFormsBASE.ScrollBarStyles.SBS_HORZ
            InitData.ExtendedStyles = If(ControlContext.IsPlacedOnUserControl, 0&, WinNativeFormsBASE.GeneralConsts.WindowExtendedStyles.WS_EX_NOPARENTNOTIFY)
            InitData.Flags = ForwardGotFocus Or _
                                ForwardLostFocus Or _
                                ForwardKeyDown Or _
                                ForwardKeyUp Or _
                                ForwardKeyPress Or _
                                ForwardValidate Or _
                                ForwardDragOver
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
        End Sub
        
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy

            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
            ' disconnect anything that causes a circular reference here
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub
        
        #If LOG_TERMINATE Then
            Private Sub Class_Terminate()
                    Debug.Print CurrentComponentName & "." & CurrentProcedureName
            End Sub
        #End If
        
        Private Sub HandleCreate() _
                Handles RootWindowElement.Create
                
            Me.Min = Me.Min_INIT
            Me.Max = Me.Max_INIT
            WinNativeFormsBASE.WindowsAPI.USER32_SetScrollValue(Me.RootWindowElement, Me.Value_INIT)    ' without Click event
            RaiseEvent Initialize()
        End Sub
        
        Private Sub HandleScroll(ByVal ScrollType As WinNativeFormsBASE.SCROLLNOTIFY, ByVal IsHorizontal As Boolean) _
                Handles RootWindowElement.Scroll
            
            If CommonHandleScrollControl(Me, Me.RootWindowElement, ScrollType) = True Then
                If ScrollType = WinNativeFormsBASE.SCROLLNOTIFY.SB_THUMBTRACK Then
                    RaiseEvent Scroll()
                Else
                    RaiseEvent Change()
                End If
            End If
        End Sub
                    
        [Serialize(False)]
        Public Property Get Min() As Long
            Return WinNativeFormsBASE.WindowsAPI.USER32_GetScrollMinimum(Me.RootWindowElement)
        End Property
        
        [Serialize(False)]
        Public Property Let Min(ByVal Value As Long)
            WinNativeFormsBASE.WindowsAPI.USER32_SetScrollRange(Me.RootWindowElement, Value, Me.Max)
        End Property
        
        [Serialize(False)]
        Public Property Get Max() As Long
            Return WinNativeFormsBASE.WindowsAPI.USER32_GetScrollMaximum(Me.RootWindowElement)
        End Property
        
        [Serialize(False)]
        Public Property Let Max(ByVal Value As Long)
            WinNativeFormsBASE.WindowsAPI.USER32_SetScrollRange(Me.RootWindowElement, Me.Min, Value)
        End Property
        
        [Serialize(False)]
        Public Property Get Value() As Long
            Return WinNativeFormsBASE.WindowsAPI.USER32_GetScrollValue(Me.RootWindowElement)
        End Property
        
        [Serialize(False)]
        Public Property Let Value(ByVal NewValue As Long)
            If Value <> NewValue Then
                WinNativeFormsBASE.WindowsAPI.USER32_SetScrollValue(Me.RootWindowElement, NewValue)
                RaiseEvent Change
            End If
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Get _Default() As Long
            Return Me.Value
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Let _Default(ByVal Value As Long)
            Me.Value = Value
        End Property
        
        Public Sub Refresh()
            CommonRedrawEraseInvalidate(Me.RootWindowElement)
        End Sub
        
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
        
        [Serialize(False)]
        Property Get VisualStyles() As Boolean
            Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).VisualStyles
        End Property
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
        
    #End Region

End Class