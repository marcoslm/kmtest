
[Description("A Win32 native Label")]
[WindowsControl("/miscellaneous/ICONS??/Label??.png")]
[ClassId("33AD4ED8-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("A44614D4-CFFF-4E35-AFE1-CC2AF376B234")]    ' FIXME implement {33AD4ED9-6699-11CF-B70C-00AA0060D393} for backcompat
[COMCreatable(False)]
[EventsUseDispInterface]
[ComImport(True)]
Class Label
    
    Enum AggregateConstants
        vbAggregateNone = 0
        vbAggregateSum = 1
    End Enum
        
    #Region "INHERITANCE"

        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlWindowlessNoFocus Via _BaseControl = New WinNativeFormsBASE.BaseControlWindowlessNoFocus(ControlTypeConstants.vbLabel)
        [ImplementsViaPrivateFriendlies] Implements DataFieldBinderBase Via _DataFieldBinderBase = New DataFieldBinderBase
        [ImplementsViaPrivateFriendlies] Implements OLEDragDropHelper Via _BaseOLEDragDropHelper = New OLEDragDropHelper
        
    #End Region
    
    #Region "STATE"
     
        [Description("")]
            Public BorderStyle As VBRUN.ControlBorderStyleConstantsCustom = ControlBorderStyleConstantsCustom.vbNoBorder    ' FIXME
        [Description("")]
        [Serialize(True, "BorderCustomOptions")]
            Private ReadOnly InternalBorderCustomOptions As BorderOptions
        
        [Serialize(False)]
        Public Property Get BorderCustomOptions() As BorderOptionsClass
            Return New BorderOptionsClass(Me, Me.InternalBorderCustomOptions)
        End Property
            
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public BackColor As OLE_COLOR = VBRUN.SystemColorConstants.vb3DFace   ' FIXME this is linked to Appearance
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public ForeColor As OLE_COLOR = VBRUN.SystemColorConstants.vbButtonText   ' FIXME this is linked to Appearance
        [Description("")]
            Public UseMnemonic As Boolean = True
        [Description("")]
        [Serialize(True, "Caption")]
        [CustomDesigner("designer_MultiLineText")]
            Private CaptionINIT As String
        [Description("")]
            Public Alignment As VBRUN.AlignmentConstants = VBRUN.AlignmentConstants.vbLeftJustify
        [Description("")]
            Public VerticalAlignment As VBRUN.VerticalAlignmentConstants = VBRUN.VerticalAlignmentConstants.vbVerticalAlignTop
        [Description("Angle at which the control is rendered.  0 is the natural angle, 90 is a quarter anti-clockwise turn.  Control is turned relative to the top-left position.")]
            Public Angle As Double
        
            
        [Serialize(False)]
            Public WithEvents Font As StdFont
            
            Public DataFieldAggregate As AggregateConstants = AggregateConstants.vbAggregateNone
        [Serialize(False)]
            Public DataFieldAggregateValue As Decimal
            
            
            [Serialize(True, "FontBold")]
            Private FontBoldINIT As Boolean = False
            [Serialize(True, "FontItalic")]
            Private FontItalicINIT As Boolean = False
            [Serialize(True, "FontName")]
            Private FontNameINIT As String = "Segoe UI"
            [Serialize(True, "FontSize")]
            Private FontSizeINIT As Single = 8
            [Serialize(True, "FontStrikethru")]
            Private FontStrikethruINIT As Boolean = False
            [Serialize(True, "FontUnderline")]
            Private FontUnderlineINIT As Boolean = False

            Private IsReportMode As Boolean
            
            [NonBrowsable]
            [Serialize(True)]
            Private InternalSectionId As Long = -1
            
            Private Function GetFont() As StdFont
                Return Me.Font
            End Function
            
            [Serialize(False)]
            Public Property Get FontBold() As Boolean
                Return GetFont().Bold
            End Property
            [Serialize(False)]
            Public Property Let FontBold(ByVal Value As Boolean)
                GetFont().Bold = Value
            End Property
            
            [Serialize(False)]
            Public Property Get FontItalic() As Boolean
                Return GetFont().Italic
            End Property
            [Serialize(False)]
            Public Property Let FontItalic(ByVal Value As Boolean)
                GetFont().Italic = Value
            End Property
            
            [Serialize(False)]
            Public Property Get FontName() As String
                Return GetFont().Name
            End Property
            [Serialize(False)]
            Public Property Let FontName(ByVal Value As String)
                GetFont().Name = Value
            End Property
            
            [Serialize(False)]
            Public Property Get FontSize() As Single
                Return CSng(GetFont().Size)
            End Property
            [Serialize(False)]
            Public Property Let FontSize(ByVal Value As Single)
                GetFont().Size = Value
            End Property
            
            [Serialize(False)]
            Public Property Get FontStrikethru() As Boolean
                Return GetFont().Strikethrough
            End Property
            [Serialize(False)]
            Public Property Let FontStrikethru(ByVal Value As Boolean)
                GetFont().Strikethrough = Value
            End Property
            
            [Serialize(False)]
            Public Property Get FontUnderline() As Boolean
                Return GetFont().Underline
            End Property
            [Serialize(False)]
            Public Property Let FontUnderline(ByVal Value As Boolean)
                GetFont().Underline = Value
            End Property
            
            [Description("Adjusts the TAB key order of this control at runtime")]
            [Unimplemented]
            Public TabIndex As Long     ' despite not being focusable, useful for use with mnemonic access keys, so tabbing is still in order

        [CustomDesigner("designer_MultiLineText")]
        [Serialize(True, "ToolTipText")]
            Private ToolTipTextINIT As String
            
        [Serialize(True, "Enabled")]
            Private EnabledINIT As Boolean = True

        [Description("")]
            Public Appearance As VBRUN.AppearanceConstants = VBRUN.AppearanceConstants.vbAppear3d   ' FIXME

            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private IsDesignMode As Boolean
            Private FontHandle As LongPtr
            Private InternalCaption As String
            Private InternalLastPaintWasAngled As Boolean

        Public AutoSize As Boolean = False  ' this is correct for import purposes.

            Public BackStyle As BackFillStyleConstants = BackFillStyleConstants.vbBFOpaque
            
        [Unimplemented]
            Public LinkItem As String
        [Unimplemented]
            Public LinkMode As VBRUN.LinkModeConstants
        [Unimplemented]
            Public LinkTopic As String
        [Unimplemented]
            Public LinkTimeout As Long = 50
        
        [Unimplemented]
            Public RightToLeft As Boolean

            Public WhatsThisHelpID As Long
            Public WordWrap As Boolean
            
            Public LineSpacing As Long          ' in twips

        [Description("")]
        [Serialize(True, "MousePointer")]
            Private MousePointerINIT As VBRUN.MousePointerConstants = VBRUN.MousePointerConstants.vbDefault
        [Serialize(True, "MouseIcon")]
        [CustomDesigner("designer_IconBytes")]
            Private ReadOnly MouseIconINIT() As Byte
            
        [Unimplemented]
            Public Sub LinkExecute(ByVal Command As String)
            End Sub

        [Unimplemented]
            Public Sub LinkPoke()
            End Sub
            
        [Unimplemented]
            Public Sub LinkRequest()
            End Sub

        [Unimplemented]
            Public Sub LinkSend()
            End Sub

        Public Sub OLEDrag()
            CommonOLEDrag(Me)
        End Sub
            
        Public Sub ShowWhatsThis()
            HelpSystem.ShowControlHelpManual(Me)
        End Sub
            
    #End Region

    #Region "EVENTS"

        [Description("")]
            Event Change()
        [DefaultDesignerEvent]
        [Description("")]
        [DispId(&HEAEA0004)]
            Event Click()
        [Description("")]
        [DispId(&HEAEA0005)]
            Event DblClick()
        [Description("")]
        [DispId(&HEAEA0001)]
            Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0002)]
            Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0003)]
            Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
            Event Initialize()
        [Description("")]
        [DispId(&HEAEA000B)]
            Event DragDrop(Source As Control, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA000C)]
            Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        
        [Unimplemented] Event LinkClose()
        [Unimplemented] Event LinkError(LinkErr As Integer)
        [Unimplemented] Event LinkNotify()
        [Unimplemented] Event LinkOpen(Cancel As Integer)
        Event OLECompleteDrag(Effect As Long)
        Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        Event OLESetData(Data As DataObject, DataFormat As Integer)
        Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)

    #End Region
               
    #Region "MEMBERS"
            
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
            
            Me.InternalStateReset()     ' resets all the base class state
            Me.InternalStateResetDataBinderBase()
            Me.InternalStateResetOLEDragDrop()
            
            Me.FontHandle = 0
            Me.InternalCaption = vbNullString
            Me.InternalLastPaintWasAngled = False
            Me.DataFieldAggregateValue = 0
            
            With ControlContext.GetSerializer()
                If Not .Deserialize(Me) Then
                    'Debug.Print "new LABEL control!"
                    CaptionINIT = "Label"
                    If .IsReportMode = True Then
                        'Debug.Print "new control in REPORT MODE!"
                        IsReportMode = True
                        BackStyle = vbBFTransparent
                    End If
                    'AutoSize = True     ' for new controls, this should be True, as per VB   NOT VALID
                End If
                IsDesignMode = .IsDesignMode
            End With
        
            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InitData.InternalSectionId = InternalSectionId + 1
            InitData.Flags = RequiresWindowlessPaintingWithEvents Or _
                                ForwardEnsureEnabled Or _
                                ManualMouseCapture Or _
                                ForwardButtonClick Or _
                                ForwardDoubleClick Or _
                                ForwardMouseDown Or _
                                ForwardMouseUp Or _
                                ForwardMouseMove Or _
                                ForwardDragOver Or _
                                If(Angle <> 0, IsAngledControl, 0&)
            
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
            
            With CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX)
                .Name = Me.NameINIT
                .ToolTipText = Me.ToolTipTextINIT
                .MousePointer = Me.MousePointerINIT
                .WindowlessEnabled = Me.EnabledINIT
            End With
            
            InitOleDragDropHelper()
            
            Me.InternalCaption = CaptionINIT
            
            CommonLoadPictureInit(CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MouseIcon, Me.MouseIconINIT)
        End Sub
        
        Private Sub InitOleDragDropHelper()
            _BaseOLEDragDropHelper.OLEDragDropInit(Me, ControlContext, RootWindowElement, True, False, True)
        End Sub
                
        Private Sub HandleCreate() _
                Handles RootWindowElement.Create
            
            SyncOLEDropMode()
            InitializeOLEFont()
            If Me.AutoSize Then AutoSizeNow()
            
            If IsDesignMode = False Then _DataFieldBinderBase.SetupBindings()
            RaiseEvent Initialize()
        End Sub
        
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy

            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
            
'            Stop
            Dim oldFontHandle As Any = Me.FontHandle
            If oldFontHandle <> 0 Then
                WinNativeFormsBASE.GDI32_DeleteObject(oldFontHandle)
                Me.FontHandle = 0
            End If
            Set Me.Font = Nothing
            ' disconnect anything that causes a circular reference here            
            Me.InternalStateResetDataBinderBase()
            Me.InternalStateResetOLEDragDrop()
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub

        #If LOG_TERMINATE Then
            Private Sub Class_Terminate()
                    Debug.Print CurrentComponentName & "." & CurrentProcedureName
            End Sub
        #End If
                                
        [Serialize(False)]
        [DefaultMember]
        Public Property Get _Default() As String
            Return Me.Caption
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Let _Default(ByVal Value As String)
            Me.Caption = Value
        End Property
        
        Private Sub ColorsChanged() _
                Handles BackColor.OnPropertyLet, _
                        ForeColor.OnPropertyLet, _
                        BackStyle.OnPropertyLet, _
                        UseMnemonic.OnPropertyLet, _
                        Alignment.OnPropertyLet, _
                        Appearance.OnPropertyLet, _
                        BackStyle.OnPropertyLet, _
                        BorderStyle.OnPropertyLet, _
                        Angle.OnPropertyLet
            
            Me.WindowlessRefresh()
        End Sub
        
        Private Sub AngleChanged() _
                Handles Angle.OnPropertyLet
            
            Me.RootWindowElement.AngleChanged(Angle <> 0)
            Me.WindowlessRefresh()
        End Sub
                
        Private Sub AutoSizeNow()
            ' We need to calculate the correct size for this content
            If Me.FontHandle = 0 Then
                InitializeOLEFont()
            End If

            Dim tempHDC As LongPtr
            Dim ownedDC As Boolean = False
            If Me.Parent IsNot Nothing Then tempHDC = CLngPtr(Me.Parent.HDC)
            If tempHDC = 0 Then
            	tempHDC = WinNativeFormsBASE.CreateCompatibleDC(0)
                ownedDC = True
            End If
            Dim oldFont As LongPtr = WinNativeFormsBASE.SelectObject(tempHDC, Me.FontHandle)

            Dim RootWindowElement As Any = Me.RootWindowElement
            Dim currentWidth As Long = RootWindowElement.CurrentWidth
            Dim UnitPixelScale As Any = RootWindowElement.UnitPixelScale
            
            Dim LineSpacing As Any = CLng(RootWindowElement.ScaleY(Me.LineSpacing, vbTwips, vbPixels))
            Dim render As TextRenderPath = New TextRenderPath(tempHDC, Me.InternalCaption, True, Me.Alignment, currentWidth, Me.AutoSize, Me.WordWrap, LineSpacing)
            WinNativeFormsBASE.SelectObject(tempHDC, oldFont)
            
            Dim BorderHSize As Long
            Dim BorderVSize As Long
            If Me.BorderStyle = vbFixedSingleBorder Then
                BorderHSize = 4
                BorderVSize = 4
            ElseIf Me.BorderStyle = ControlBorderStyleConstantsCustom.vbCustomBorder Then
                CalcBorderTotalSizes(Me.InternalBorderCustomOptions, UnitPixelScale, BorderHSize, BorderVSize)
            End If
            Me.Width = (render.TotalWidth + BorderHSize) * Me.ControlContext.GetScaleModePixelsMultiplierX_SELF / UnitPixelScale
            Me.Height = (render.TotalHeight + BorderVSize) * Me.ControlContext.GetScaleModePixelsMultiplierY_SELF / UnitPixelScale
            If ownedDC Then WinNativeFormsBASE.DeleteDC(tempHDC)
        End Sub

        [Serialize(False)]
        Public Property Get Caption() As String
            Return Me.InternalCaption
        End Property
                
        [Serialize(False)]
        Public Property Let Caption(ByVal NewValue As String)
            If Me.InternalCaption <> NewValue Then
                Me.InternalCaption = NewValue
                
                If Me.AutoSize = True Then
                    AutoSizeNow()
                End If
                
                Me.WindowlessRefresh()
                _DataFieldBinderBase.OnDataChanged
                RaiseEvent Change
            End If
        End Property
        
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
                
        Private Sub InitializeOLEFont()
            Dim NewFont As Any = New StdFont
            With NewFont
                .Bold = Me.FontBoldINIT
                .Italic = Me.FontItalicINIT
                .Name = Me.FontNameINIT
                .Size = Me.FontSizeINIT
                .Strikethrough = Me.FontStrikethruINIT
                .Underline = Me.FontUnderlineINIT
            End With
            CommonInitFontRatio(NewFont, Me.RootWindowElement)
            Set Me.Font = NewFont
            SyncFontHandle()
        End Sub
        
        Private Function GetFontMetrics() As WinNativeFormsBASE.TEXTMETRIC
            If Me.Font Is Nothing Then
                InitializeOLEFont
            End If
            
            CommonGetFontMetrics(CType(Of IFont)(Me.Font), Me.RootWindowElement, GetFontMetrics)
        End Function
        
        Private Sub SyncFontProperties()
            If Me.Font Is Nothing Then
                InitializeOLEFont
            End If
            SyncFontHandle()
            Me.WindowlessRefresh()
        End Sub
        
        [UseGetLastError(False), DLLStackCheck(False)]
        Private DeclareWide PtrSafe Function DrawTextW Lib "user32" (ByVal hdc As LongPtr, ByVal lpchText As String, ByVal cchText As Long, ByRef lprc As WinNativeFormsBASE.RECT, ByVal format As Long) As Long
        
        Private Sub HandlePaint(ByRef Handled As Boolean) _
                Handles RootWindowElement.Paint

            'Debug.Print "Label.HandlePaint " & Me.Name
            
            Dim RootWindowElement As Any = Me.RootWindowElement
            Dim UnitPixelScale As Any = RootWindowElement.UnitPixelScale
            
            If Visible = False And Me.IsDesignMode = False Then Exit Sub

            Dim rgbBackColor As Long = TranslateColor(BackColor)
            Dim brush As LongPtr = 0
            
            If Me.BackStyle = vbBFOpaque Then
                brush = WinNativeFormsBASE.CreateSolidBrush(rgbBackColor)
            End If
            
            Dim ps As WinNativeFormsBASE.PAINTSTRUCT
            RootWindowElement.BeginPaint(ps)    ' you MUST use this method, and NOT the BeginPaint API directly
                
            
                Dim ps_hdc As Any = ps.hdc
                Dim rect As WinNativeFormsBASE.RECT
                
                
                
                
                ' Dim TestX As Double = rect.Left
                ' Dim TestY As Double = rect.Top
                ' TranslateXYByAngle(TestX, TestY, Me.Angle)
                ' Debug.Print "Xoff: " TestX - rect.Left
                ' Debug.Print "Yoff: " TestY - rect.Top
                                
                                          
                'xf.eDx = CSng(TestX - rect.Left)
                'xf.eDy = -CSng(TestY - rect.Top)
                                
                
               ' Dim savedDC1 As Any = SaveDC(ps_hdc)    ' preserve clip region
                
               If Me.Angle <> 0 Then
                    rect.Left = 0
                    rect.Top = 0
                    rect.Right = CLng((Me.PixelsWidth * UnitPixelScale))
                    rect.Bottom = CLng((Me.PixelsHeight * UnitPixelScale))
                
                    Dim angleData As WorldTransformAngleData
                    DoWorldTransformAngle(angleData, ps_hdc, Me.Angle, Me.PixelsLeft * UnitPixelScale, Me.PixelsTop * UnitPixelScale)
                    InternalLastPaintWasAngled = True
                Else
                    rect.Left = CLng(Me.PixelsLeft * UnitPixelScale)
                    rect.Top = CLng(Me.PixelsTop * UnitPixelScale)
                    rect.Right = CLng(rect.Left + (Me.PixelsWidth * UnitPixelScale))
                    rect.Bottom = CLng(rect.Top + (Me.PixelsHeight * UnitPixelScale))
                    InternalLastPaintWasAngled = False
                End If
                
                
                If (rect.Right > rect.Left) And (rect.Bottom > rect.Top) Then
                    Dim _width As Long = rect.Right - rect.Left

                    'If BorderStyle = vbNoBorder Then
                        If brush <> 0 Then
                            WinNativeFormsBASE.USER32_FillRectangle(ps_hdc, rect, brush)
                        End If
                    'End If
                    
                    Dim actualForeColor As Long = TranslateColor(If(Me.Enabled, ForeColor, vbGrayText))
                    Dim rbgBackColor As Long = TranslateColor(BackColor)
                    Dim oldTextColor As Long = WinNativeFormsBASE.WindowsAPI.GDI32_SetTextForeColor(ps_hdc, actualForeColor)
                    Dim oldBackColor As Long = WinNativeFormsBASE.WindowsAPI.SetBkColor(ps_hdc, rbgBackColor)
                    Dim oldBkMode As Long = WinNativeFormsBASE.WindowsAPI.GDI32_SetBackMode(ps_hdc, 1)
                    
                    If BorderStyle = vbFixedSingleBorder Then
                        Dim bfStyle As Long
                        Dim bfFlags As Long = BorderFlags.BF_RECT Or BorderFlags.BF_ADJUST
                        
                        If Appearance = vbAppearFlat Then
                            bfFlags += BorderFlags.BF_MONO
                            bfStyle = BorderStyles.BDR_SUNKENOUTER
                        Else
                            bfStyle = BorderStyles.BDR_SUNKENOUTER Or BorderStyles.BDR_SUNKENINNER
                        End If
                        WinNativeFormsBASE.DrawEdge(ps_hdc, rect, bfStyle, bfFlags)
                    ElseIf BorderStyle = ControlBorderStyleConstantsCustom.vbCustomBorder Then
                        DrawBorderOptionsAndReduceRect(Me.InternalBorderCustomOptions, ps_hdc, rect, UnitPixelScale)
                    End If
                                    
                    If Me.FontHandle = 0 Then
                        InitializeOLEFont()
                    End If
                    
                    Dim oldFont As LongPtr = WinNativeFormsBASE.SelectObject(ps_hdc, Me.FontHandle)
                    
                    Dim LineSpacing As Any = CLng(RootWindowElement.ScaleY(Me.LineSpacing, vbTwips, vbPixels))
                    
                    ' FIXME we should cache the render path     
                    Dim Caption As Any = Me.Caption
                    Dim UseMnemonics As Boolean = Me.UseMnemonic
                    If IsDesignMode Then
                        If Left(Me.DataFieldINIT, 1) = "=" Then
                            Caption = Me.DataFieldINIT
                            UseMnemonics = False
                        End If
                    End If
                    Dim render As TextRenderPath = New TextRenderPath(ps_hdc, Caption, UseMnemonics, Me.Alignment, rect.Right - rect.Left, Me.AutoSize, Me.WordWrap, LineSpacing)
                    
                    Dim savedDC As Long
                    If Me.VerticalAlignment <> vbVerticalAlignTop Then
                        savedDC = SaveDC(ps_hdc)    ' preserve clip region
                        IntersectClipRect(ps_hdc, rect.Left, rect.Top, rect.Right, rect.Bottom)
                    
                        If Me.VerticalAlignment = vbVerticalAlignMiddle Then
                            rect.Top += ((rect.Bottom - rect.Top) - render.TotalHeight) \ 2
                        Else
                            rect.Top += ((rect.Bottom - rect.Top) - render.TotalHeight)
                        End If
                    End If
                    
                    If render.HasMnemomnics Then
                        render.RenderWithMnemonics(ps_hdc, rect, 0, 0, GetFontMetrics().TMAscent, UnitPixelScale, Angle <> 0)
                    Else
                        render.Render(ps_hdc, rect, 0, 0, Angle <> 0)
                    End If
                    
                    If Me.VerticalAlignment <> vbVerticalAlignTop Then
                        RestoreDC(ps_hdc, savedDC)
                    End If
                    
                ' Debug.Print "---------------------------------"
                    
                    WinNativeFormsBASE.WindowsAPI.GDI32_SetBackMode(ps_hdc, oldBkMode)
                    WinNativeFormsBASE.WindowsAPI.SetBkColor(ps_hdc, oldBackColor)
                    WinNativeFormsBASE.WindowsAPI.GDI32_SetTextForeColor(ps_hdc, oldTextColor)
                    WinNativeFormsBASE.SelectObject(ps_hdc, oldFont)
                                    
                End If
                
                If angleData.isActive Then
                    UndoWorldTransformAngle(angleData, ps_hdc)
                End If
                
            RootWindowElement.EndPaint(ps)
            Handled = True     ' swallow up the event

            If brush <> 0 Then WinNativeFormsBASE.WindowsAPI.GDI32_DeleteObject(brush)

        End Sub
        
        [Serialize(False)]
        Public Property Get ToolTipText() As String
            Return CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).ToolTipText
        End Property
    
        [Serialize(False)]
        Public Property Let ToolTipText(ByVal Value As String)
            CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).ToolTipText = Value
            Me.RootWindowElementBase.ToolTipChanged()
        End Property
        
        [Serialize(False)]
        Public Property Get MouseIcon() As StdPicture
            Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MouseIcon
        End Property

        [Serialize(False)]
        Public Property Set MouseIcon(Value As StdPicture)
            Set CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MouseIcon = Value
            CommonMousePointerChanged()
        End Property

        [Serialize(False)]
        Public Property Let MouseIcon(Value As StdPicture)
            Set CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MouseIcon = Value
            CommonMousePointerChanged()
        End Property
        
        Private Sub HandleResizeWindowless(ByVal oldLeft As Long, ByVal oldTop As Long, ByVal oldWidth As Long, ByVal oldHeight As Long, _
                                               ByVal newLeft As Long, ByVal newTop As Long, ByVal newWidth As Long, ByVal newHeight As Long) _
                    Handles RootWindowElement.ResizeWindowless
                 
                On Error Resume Next
                Dim containerHwnd As LongPtr = CLngPtr(_BaseControl.Container.hwnd)
                On Error GoTo 0
                
                If containerHwnd = 0 Then
                	' Windowless UC container...  FIXME need to pass on the RECTs to refine the InvalidateRect passed to the UC site
                    CommonRaiseViewChanged(_BaseControl.Container)
                    Exit Sub
                End If
                    
                Dim rect As WinNativeFormsBASE.RECT
                If (Me.Angle <> 0) Or InternalLastPaintWasAngled Then
                    ' For now we just update the whole container, but we could at least refine the rectangle to contain all 4 corner points
                    ' (using translateXY), but we'd need to also get oldAngle and newAngle in order to work out the real bounds
                    WinNativeFormsBASE.WindowsAPI.InvalidateRect(containerHwnd, vbNullPtr, 1)
                    Exit Sub
                End If
                
                If oldWidth <> 0 And oldHeight <> 0 Then
                    rect.Left = oldLeft
                    rect.Top = oldTop
                    rect.Right = oldLeft + oldWidth
                    rect.Bottom = oldTop + oldHeight
                    WinNativeFormsBASE.WindowsAPI.InvalidateRect(containerHwnd, rect, 1)
                End If

                If newWidth <> 0 And newHeight <> 0 Then
                    rect.Left = newLeft
                    rect.Top = newTop
                    rect.Right = newLeft + newWidth
                    rect.Bottom = newTop + newHeight
                    WinNativeFormsBASE.WindowsAPI.InvalidateRect(containerHwnd, rect, 1)
                End If

        End Sub
                        
        Private Sub SyncFontHandle()
        	Dim ifont As Any = CType(Of IFont)(Me.Font)
            Dim LF As WinNativeFormsBASE.LOGFONT
            WinNativeFormsBASE.GetObjectW(ifont.hFont, LenB(LF), LF)
            LF.LFQuality = CByte(WinNativeFormsBASE.CLEARTYPE_QUALITY)
            
            If Me.FontHandle <> 0 Then WinNativeFormsBASE.GDI32_DeleteObject(Me.FontHandle)
            
            'LF.LFEscapement = CLng(Angle * 10)
            'LF.LFOrientation = CLng(Angle * 10)
            
            Me.FontHandle = WinNativeFormsBASE.CreateFontIndirectW(LF)
        End Sub
        
        Private Sub SyncFont(ByVal PropertyName As String) _
                Handles Font.FontChanged

            SyncFontHandle()
            Me.WindowlessRefresh()
        End Sub
        
        Private Sub _DataFieldBinderBase_SetLiveValue(fieldValue As Variant) Handles [_DataFieldBinderBase].SetLiveValue
            Me.Caption = If(IsNull(fieldValue), "", CStr(fieldValue))
        End Sub
        
        Private Sub _DataFieldBinderBase_GetLiveValue(fieldValue As Variant) Handles [_DataFieldBinderBase].GetLiveValue
            fieldValue = Me.Caption
        End Sub
        
        Private Sub _DataFieldBinderBase_GetParent(out As Control) Handles [_DataFieldBinderBase].GetParent
            Set out = CType(Of Control)(Me.Parent)
        End Sub
        
        [Serialize(False)]
        Public Property Get MousePointer() As MousePointerConstants
            Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MousePointer
        End Property
    
        [Serialize(False)]
        Public Property Let MousePointer(ByVal Value As MousePointerConstants)
            CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MousePointer = Value
            CommonMousePointerChanged()
        End Property
        
        [Serialize(False)]
        Public Property Get Enabled() As Boolean
            Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).WindowlessEnabled
        End Property
    
        [Serialize(False)]
        Public Property Let Enabled(ByVal Value As Boolean)
            CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).WindowlessEnabled = Value
        End Property
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
    #End Region

End Class