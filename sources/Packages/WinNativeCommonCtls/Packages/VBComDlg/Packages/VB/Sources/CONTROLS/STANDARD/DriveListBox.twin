Private Module DriveListBoxGlobals
	Public DriveListBoxImages() As OlePicture
End Module

[Description("A Win32 native DriveListBox")]
[WindowsControl("/miscellaneous/ICONS??/DriveListBox??.png")]
[ClassId("33AD4F50-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("6ACFB26B-CDFB-4A9B-8BF7-8D6D185790E6")]  ' FIXME implement {33AD4F51-6699-11CF-B70C-00AA0060D393} for backcompat
[COMCreatable(False)]
[EventsUseDispInterface]
[ComImport(True)]
Class DriveListBox
    
    #Region "INHERITANCE"

        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlFocusable Via _BaseControl = New WinNativeFormsBASE.BaseControlFocusable(ControlTypeConstants.vbDriveListBox)
 
    #End Region
        
    #Region "STATE"
    
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public BackColor As OLE_COLOR = VBRUN.SystemColorConstants.vbWindowBackground
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public ForeColor As OLE_COLOR = VBRUN.SystemColorConstants.vbWindowText
        [Description("VB6 doesn't trigger the Scroll event for mouse-wheel events.  Set this to True to generate Scroll events in response to mouse-wheel notifications")]
            Public WheelScrollEvent As Boolean = True
        [Serialize(False)]
        [Description("")]
            Public NewIndex As Long

        [Description("")]
            Public ReadOnly IntegralHeight As Boolean = True

            Private CachedTopIndex As Long
            Private IsInitializing As Boolean
            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private WithEvents WindowHandleLIST As WindowsControls.WindowElement
            Private OLEDragDropHandler As WinNativeFormsBASE.OLEDragDropHandler
            Private IsRefreshing As Boolean
            Private CachedSelectedIndex As Long
                        
            Public HelpContextID As Long
        
        [CustomDesigner("designer_RestrictedOLEDropMode")]
            Public OLEDropMode As VBRUN.OLEDropConstants
            Public WhatsThisHelpID As Long
            
        [Description("Opacity, given as a percentage, 0 - 100.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
            Public Opacity As Double = 100
        
        [CustomDesigner("designer_SpectrumWindowsOrClear")]
        [Description("A color, when set, that will appear fully transparent in the window.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
            Public TransparencyKey As OLE_COLOR = -1
        
        Public Sub OLEDrag()
            CommonOLEDrag(Me)
        End Sub
                        
        Public Sub ShowWhatsThis()
            HelpSystem.ShowControlHelpManual(Me)
        End Sub
    #End Region

    #Region "EVENTS"
    
        [DefaultDesignerEvent]
        [Description("")]
            Event Change()
        [Description("")]
            Event DropDown()
        [Description("")]
        [DispId(&HEAEA0006)]
            Event GotFocus()
        [Description("")]
        [DispId(&HEAEA0008)]
            Event KeyDown(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0009)]
            Event KeyPress(KeyAscii As Integer)
        [Description("")]
        [DispId(&HEAEA000A)]
            Event KeyUp(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0007)]
            Event LostFocus()
        [Description("")]
            Event Scroll()
        [Description("")]
            Event Initialize()
        [Description("")]
            Event CloseUp()

        [Description("")]
        [DispId(&HEAEA000B)]
            Event DragDrop(Source As Control, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA000C)]
            Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        
        [DispId(&HEAEA000D)]
            Event Validate(Cancel As Boolean)
        Event OLECompleteDrag(Effect As Long)
        Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        Event OLESetData(Data As DataObject, DataFormat As Integer)
        Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)

    #End Region

    #Region "MEMBERS"
        
        #If LOG_TERMINATE Then
            Private Sub Class_Terminate()
                    Debug.Print CurrentComponentName & "." & CurrentProcedureName
            End Sub
        #End If
        
        Private Sub InitImages()
            On Error Resume Next

            ' Here we map a package resource into a constant Variant
            ' so that we can continue to use resources in the package, yet access them just like byte arrays at runtime
            ' This is very efficient.  The resource will not exist as an ordinary resource in the output PE file.
            Const ImageData_DRIVE_UNKNOWN As Variant = LoadResDataInternal("DRIVE_UNKNOWN.gif", "OTHER")
            Const ImageData_DRIVE_FIXED As Variant = LoadResDataInternal("DRIVE_FIXED.gif", "OTHER")
            Const ImageData_DRIVE_RAMDISK As Variant = LoadResDataInternal("DRIVE_RAMDISK.gif", "OTHER")
            Const ImageData_DRIVE_REMOVABLE As Variant = LoadResDataInternal("DRIVE_REMOVABLE.gif", "OTHER")
            Const ImageData_DRIVE_CDROM As Variant = LoadResDataInternal("DRIVE_CDROM.gif", "OTHER")
            Const ImageData_DRIVE_REMOTE As Variant = LoadResDataInternal("DRIVE_REMOTE.gif", "OTHER")

            If IsArrayInitialized(DriveListBoxGlobals.DriveListBoxImages) = False Then
                ReDim DriveListBoxGlobals.DriveListBoxImages(0 To 6) As OlePicture
                Set DriveListBoxGlobals.DriveListBoxImages(WinNativeFormsBASE.DriveType.DRIVE_UNKNOWN) = CType(Of OlePicture)(Global.LoadPicture(ImageData_DRIVE_UNKNOWN))
                Set DriveListBoxGlobals.DriveListBoxImages(WinNativeFormsBASE.DriveType.DRIVE_NO_ROOT_DIR) = CType(Of OlePicture)(DriveListBoxGlobals.DriveListBoxImages(WinNativeFormsBASE.DriveType.DRIVE_UNKNOWN))
                Set DriveListBoxGlobals.DriveListBoxImages(WinNativeFormsBASE.DriveType.DRIVE_REMOVABLE) = CType(Of OlePicture)(Global.LoadPicture(ImageData_DRIVE_REMOVABLE))
                Set DriveListBoxGlobals.DriveListBoxImages(WinNativeFormsBASE.DriveType.DRIVE_FIXED) = CType(Of OlePicture)(Global.LoadPicture(ImageData_DRIVE_FIXED))
                Set DriveListBoxGlobals.DriveListBoxImages(WinNativeFormsBASE.DriveType.DRIVE_REMOTE) = CType(Of OlePicture)(Global.LoadPicture(ImageData_DRIVE_REMOTE))
                Set DriveListBoxGlobals.DriveListBoxImages(WinNativeFormsBASE.DriveType.DRIVE_CDROM) = CType(Of OlePicture)(Global.LoadPicture(ImageData_DRIVE_CDROM))
                Set DriveListBoxGlobals.DriveListBoxImages(WinNativeFormsBASE.DriveType.DRIVE_RAMDISK) = CType(Of OlePicture)(Global.LoadPicture(ImageData_DRIVE_RAMDISK))
            End If
        End Sub
        
        Private Sub HandleLoad() _
                Handles RootWindowElement.Load
            
            Dim Opacity As Any = Me.Opacity
            If ((Opacity >= 0) And (Opacity < 100)) Or (TransparencyKey <> -1) Then
                SyncOpacity
            End If
        End Sub
        
        Private Sub SyncOpacity() _ 
                Handles Opacity.OnPropertyLet, _
                        TransparencyKey.OnPropertyLet
            
            CommonSyncOpacity(Me.TransparencyKey, Me.Opacity, Me.RootWindowElement.Handle)
        End Sub
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
                
            Me.InternalStateReset()     ' resets all the base class state
            Me.NewIndex = -1
            Me.CachedTopIndex = 0
            Me.IsInitializing = True
            Me.IsRefreshing = False
            Me.CachedSelectedIndex = -1
            
            With ControlContext.GetSerializer
                If Not .Deserialize(Me) Then
                    'Caption_INIT = "DriveListBox"
                End If
                'IsDesignMode = .IsDesignMode
            End With
            
            Dim Opacity As Any = Me.Opacity
            If Opacity > 100 Then Me.Opacity = 100
            If Opacity < 0 Then Me.Opacity = 0
            
            InitImages()
                
            Dim styles As Long = ComboBoxStyles.CBS_HASSTRINGS + _
                            ComboBoxStyles.CBS_AUTOHSCROLL + _
                            ComboBoxStyles.CBS_DROPDOWNLIST + _
                            ComboBoxStyles.CBS_OWNERDRAWFIXED + _
                            CLng(WinNativeFormsBASE.WindowStyles.WS_BORDER) + _
                            If(Me.IntegralHeight = False, ComboBoxStyles.CBS_NOINTEGRALHEIGHT, 0&)
            Dim extendedStyles As Long

            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InitData.ClassName = "ThunderComboBox"
            InitData.Caption = ""
            InitData.WindowStyles = styles
            InitData.ExtendedStyles = extendedStyles
            InitData.Flags = NeedsPrePostMessages Or _
                                ForwardGotFocus Or _
                                ForwardLostFocus Or _
                                ForwardKeyDown Or _
                                ForwardKeyUp Or _
                                ForwardKeyPress Or _
                                ForwardDragOver Or _
                                ForwardValidate
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
        End Sub
        
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
                
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
            ' disconnect anything that causes a circular reference here
            Set WindowHandleLIST = Nothing
            Set Me.Font = Nothing
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub
                
        Private Function SendMessageListCtl(ByVal msg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr
            Return WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(WindowHandleLIST, msg, wParam, lParam)
        End Function

        Private Sub PostProcessMessage(ByVal Message As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByRef ReturnValue As LongPtr, ByVal PostMessageCookie As Long) _
                Handles RootWindowElement.PostProcessMessage

            If IsInitializing = True Then Exit Sub
                
            Select Case Message
                Case ComboBoxMessages.CB_ADDSTRING, _
                        ComboBoxMessages.CB_INSERTSTRING, _
                        ComboBoxMessages.CB_DELETESTRING, _
                        ComboBoxMessages.CB_RESETCONTENT
                    SyncScrollBar
                    
                Case WinNativeFormsBASE.WM_SETFONT
                    If Me.WindowHandleLIST IsNot Nothing Then
                        'Debug.Print "COMBO: Got WM_SETFONT"
                        ' We have to send a matching font change to the LIST, otherwise item height does not get reported properly
                        SendMessageListCtl(WinNativeFormsBASE.WM_SETFONT, wParam, lParam)
                        SyncScrollBar
                    End If
            End Select
        End Sub
        
        Private Function GetCustomDrawnHeight() As Long
            Dim TextMetrics As WinNativeFormsBASE.TEXTMETRIC = GetFontMetrics()
            Const FontPadding As Long = 4
            Return TextMetrics.TMHeight + TextMetrics.TMExternalLeading + FontPadding
        End Function
        
        Private Sub MeasureItem(ByRef Info As WinNativeFormsBASE.MEASUREITEMSTRUCT, ByRef Handled As Boolean) _
                Handles RootWindowElement.MeasureItem
 
            ' Careful! This occurs BEFORE the Create event, so the windows font has not yet been set!
            Info.ItemHeight = GetCustomDrawnHeight()
        End Sub
                 
        Private Sub DrawItem(ByRef Info As WinNativeFormsBASE.DRAWITEMSTRUCT, ByRef Handled As Boolean) _
                Handles RootWindowElement.DrawItem
 
            If Info.CtlType = WinNativeFormsBASE.OwnerDrawTypes.ODT_COMBOBOX And Info.ItemID > -1 Then
                
                Dim itemHeight As Long = Info.RCItem.Bottom - Info.RCItem.Top
                
                Dim backColor As OLE_COLOR
                Dim textColor As OLE_COLOR
                If Info.ItemState And WinNativeFormsBASE.OwnerDrawState.ODS_DISABLED Then
                    backColor = Me.BackColor
                    textColor = vbGrayText
                ElseIf Info.ItemState And WinNativeFormsBASE.OwnerDrawState.ODS_SELECTED Then
                    backColor = vbHighlight
                    textColor = vbHighlightText
                Else
                    backColor = Me.BackColor
                    textColor = Me.ForeColor
                End If
                
                Dim InfohDC As Any = Info.hDC
                CommonFillRect(InfohDC, Info.RCItem, backColor)
                
                Const VPADDING_IMAGE As Long = 2
                Const HPADDING_IMAGE As Long = 10
                Const HPADDING_TEXT As Long = 5
                
                Dim driveType As Any = CType(Of WinNativeFormsBASE.DriveType)(Info.ItemData)
                If (driveType >= driveType.DRIVE_UNKNOWN) And (driveType <= driveType.DRIVE_RAMDISK) Then
                    Dim pic As IPicture = DriveListBoxGlobals.DriveListBoxImages(driveType)
                    With pic
                        ' The icon is scaled to the item height
                        Dim horzProportional As Double = .Width / .Height       ' 1.5
                        Dim iconWidth As Long = CLng((itemHeight - (VPADDING_IMAGE * 2)) * horzProportional)
                        
                        'Dim newBmp As LongPtr = RuntimeCreateResampledBitmap(InfohDC, pic.Handle, iconWidth, itemHeight - (VPADDING_IMAGE * 2), vbStretchBicubic - 2)
                        'Dim resampledPic As IPicture = CType(Of IPicture)([_HiddenModule].CreateStdPictureFromHandle(newBmp, vbPicTypeBitmap, True))
                        
                        Dim Info_hDC32 As Long
                        GetMem4(VarPtr(InfohDC), Info_hDC32)
                        .Render(Info_hDC32, HPADDING_IMAGE, VPADDING_IMAGE + Info.RCItem.Top, iconWidth, itemHeight - (VPADDING_IMAGE * 2), 0, .Height, .Width, -.Height, vbNullPtr)
                        'Render.PictureRender(resampledPic, InfohDC, HPADDING_IMAGE, VPADDING_IMAGE + Info.RCItem.Top, iconWidth, itemHeight - (VPADDING_IMAGE * 2), 0, resampledPic.Height, resampledPic.Width, -resampledPic.Height, True)
                    End With
                End If
                
                Info.RCItem.Left += HPADDING_IMAGE + HPADDING_TEXT + iconWidth
                
                CommonTextOut(InfohDC, Me.List(Info.ItemID), textColor, CLng(Info.RCItem.Left + (1 * (RootWindowElement.DPI / 96))), Info.RCItem.Top)
            End If
        End Sub
        
        Private Sub HandleCreate() _
                Handles RootWindowElement.Create
            
            Me.SyncFontProperties()
            Me.InternalSyncHeight()
            
            ' Subclass the OS provided list and edit controls for this combo.
            Dim info As WinNativeFormsBASE.COMBOBOXINFO = WinNativeFormsBASE.WindowsAPI.USER32_GetComboBoxInfo(Me.RootWindowElement)
            Const Flags As Long = ForwardGotFocus Or ForwardLostFocus 'Or ForwardKeyDown Or ForwardKeyUp Or ForwardKeyPress
            If info.hwndList <> 0 Then Set Me.WindowHandleLIST = CType(Of WindowElement)(Me.SubClassWindowElement(info.hwndList, Flags))
            
            If Me.WindowHandleLIST IsNot Nothing Then
                WinNativeFormsBASE.WindowsAPI.USER32_SetStyleFlag(Me.WindowHandleLIST, WinNativeFormsBASE.WS_VSCROLL, True)
            End If
             
            SyncDrives()
            SyncOLEDropMode()
            
            RaiseEvent Initialize()
            IsInitializing = False
        End Sub
    
        Private Sub SyncDrives()
        	
            If IsRefreshing = True Then Exit Sub
            IsRefreshing = True
            
            SendMessageCtl(ComboBoxMessages.CB_RESETCONTENT, 0, 0)
            Dim countOfDrives As Long = CLng(SendMessageCtl(ComboBoxMessages.CB_DIR, ComboBoxConsts.DriveInfo.DDL_EXCLUSIVE Or ComboBoxConsts.DriveInfo.DDL_DRIVES, StrPtr("*.*")))
            
            ' CB_DIR fills the combo with a list of drives in the format of "[-x-]"
            Dim driveBuffer As String = Space$(6)
            Dim volumeNameBuffer As String = Space$(260)

            Dim index As Long
            While index <= countOfDrives
                SendMessageCtl(ComboBoxMessages.CB_GETLBTEXT, index, StrPtr(driveBuffer))
                
                Dim driveLetter As String = Mid$(driveBuffer, 3, 1)
                Dim driveDescription As String = driveLetter & ":"
                
                Dim driveType As WinNativeFormsBASE.DriveType = WinNativeFormsBASE.WindowsAPI.KERNEL32_GetDriveTypeW(driveDescription)
                
                Mid(volumeNameBuffer, 1, 1) = ""
                Dim volumeNameLen As Long = 260
                    
                Select Case driveType
                    
                    Case driveType.DRIVE_REMOTE
                        If WinNativeFormsBASE.WindowsAPI.MPR_WNetGetConnectionW(driveDescription, volumeNameBuffer, volumeNameLen) = 0 Then
                            Dim networkName As String = WinNativeFormsBASE.WindowsAPI.OLEAUT32_SysAllocString(StrPtr(volumeNameBuffer))
                            If Len(networkName) > 0 Then
                                driveDescription += " [" & networkName & "]"
                            End If
                        End If
                        
                    Case Else
                        WinNativeFormsBASE.WindowsAPI.KERNEL32_GetVolumeInformationW(driveDescription & "\", volumeNameBuffer, volumeNameLen, 0, 0, 0, vbNullString, 0)
                        Dim volumeName As String = WinNativeFormsBASE.WindowsAPI.OLEAUT32_SysAllocString(StrPtr(volumeNameBuffer))
                        If Len(volumeName) > 0 Then
                            driveDescription += " [" & volumeName & "]"
                        End If
                    
                End Select
                
                List(index) = driveDescription
                ItemData(index) = driveType
                index += 1
            Wend
            
            If countOfDrives > 0 Then ListIndex = 0
            IsRefreshing = False

        End Sub
        
        Private Sub HandleWheel(ByVal Delta As Integer, ByVal Horizontal As Boolean) _
                Handles WindowHandleLIST.MouseWheel

            If Horizontal = False Then
                CheckTopIndexChanged(WheelScrollEvent)
            End If
        End Sub
        
        Private Function CheckTopIndexChanged(Optional ByVal RaiseScrollEvent As Boolean = True) As Boolean
            Dim topIndex As Long = Me.TopIndex
            If CachedTopIndex <> topIndex Then
                CachedTopIndex = topIndex
                ' Sync the scrollbar
                WinNativeFormsBASE.WindowsAPI.USER32_SetScrollValue(WindowHandleLIST, Me.TopIndex, WinNativeFormsBASE.SB_VERT)
                If RaiseScrollEvent Then RaiseEvent Scroll
                Return True
            End If
            Return False
        End Function
        
        Private Sub HandleScroll(ByVal ScrollType As WinNativeFormsBASE.SCROLLNOTIFY, ByVal IsHorizontal As Boolean) _
                Handles WindowHandleLIST.Scroll
                
            If CommonHandleVerticalScroll(Me.WindowHandleLIST, ScrollType, Me.ListCount) Then
                RaiseEvent Scroll
            End If
        End Sub
        
        Private Sub CheckIfChanged()
            If (Me.IsRefreshing = False) And (Me.CachedSelectedIndex <> Me.ListIndex) Then
                RaiseEvent Change()
            End If
            Me.CachedSelectedIndex = Me.ListIndex
        End Sub
        Private Sub HandleCommand(ByVal NotificationCode As ComboBoxNotifications, _
                                    ByVal Identifier As Integer) _
                Handles RootWindowElement.Command
                
            Select Case NotificationCode
                Case CBN_SELCHANGE
                    CheckTopIndexChanged()
                    CheckIfChanged()
                Case CBN_DROPDOWN
                    SyncScrollBar
                    RaiseEvent DropDown()
                Case CBN_CLOSEUP
                    RaiseEvent CloseUp()
            End Select
        End Sub
                
        [Hidden]
        Public Sub AddItem(ByVal Value As String, Optional ByVal Index As Variant)
            Err.Raise 438
        End Sub
        
        [Hidden]
        Public Sub RemoveItem(ByVal Index As Variant)
            Err.Raise 438
        End Sub
        
        [Hidden]
        Public Sub Clear()
            Err.Raise 438
        End Sub
        
        Private Sub SyncScrollBar()
            CommonSyncScrollBarV(Me.WindowHandleLIST, Me.ListCount - 1)
        End Sub
                
        [Serialize(False)]
        Private Property Get ItemData(ByVal Index As Long) As LongPtr
            ' FIXME error if out of range
            ' Note Index is limited to 32767 due to Win95/98/ME support (see docs for CB_GETTEXT)
            ' FIXME In the official matching _ListBox interface, we need to change Index to Integer
            Return SendMessageCtl(ComboBoxMessages.CB_GETITEMDATA, Index, 0)
        End Property
        
        [Serialize(False)]
        Private Property Let ItemData(ByVal Index As Long, ByVal Value As LongPtr)
            ' FIXME error if out of range
            SendMessageCtl(ComboBoxMessages.CB_SETITEMDATA, Index, Value)
        End Property
        
        [Serialize(False)]
        Public Property Get List(ByVal Index As Long) As String
        	Return CommonGetComboBoxStringByIndex(RootWindowElement, Index)
        End Property
        
        [Serialize(False)]
        Private Property Let List(ByVal Index As Long, ByVal Value As String)
            ' FIXME error if out of range
            SendMessageCtl(ComboBoxMessages.CB_DELETESTRING, Index, 0)
            CommonComboboxAddOrInsert(RootWindowElement, Value, Index)
        End Property
        
        [Serialize(False)]
        Public Property Get ListCount() As Long
            Return CLng(SendMessageCtl(ComboBoxMessages.CB_GETCOUNT, 0, 0))
        End Property
        
        [Serialize(False)]
        Public Property Get TopIndex() As Long
            Return CLng(SendMessageCtl(ComboBoxMessages.CB_GETTOPINDEX, 0, 0))
        End Property
        
        [Serialize(False)]
        Public Property Let TopIndex(ByVal Value As Long)
            SendMessageCtl(ComboBoxMessages.CB_SETTOPINDEX, Value, 0)
        End Property
        
        [Serialize(False)]
        Public Property Get ListIndex() As Long
            Return CLng(SendMessageCtl(ComboBoxMessages.CB_GETCURSEL, 0, 0))
        End Property
        
        [Serialize(False)]
        Public Property Let ListIndex(ByVal Value As Long)
            If Me.ListIndex <> Value Then
                SendMessageCtl(ComboBoxMessages.CB_SETCURSEL, Value, 0)
                CheckIfChanged()
            End If
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Get _Default() As String
            Return Drive
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Let _Default(Value As String)
            Drive = Value
        End Property

        [Serialize(False)]
        Public Property Get Drive() As String
        	Return GetWindowTextCtl()
        End Property
        
        [Serialize(False)]
        Public Property Let Drive(ByVal Value As String)
            Value = Left$(Value, 1)  ' we only look at the first character passed in
            
            Dim index As Long = CLng(SendMessageCtl(ComboBoxMessages.CB_FINDSTRING, -1, StrPtrSafe(Value)))
            If index <> -1 Then
                Me.ListIndex = index
            End If
        End Property
        
        Private Sub ColorsChanged() _
                Handles BackColor.OnPropertyLet, _
                        ForeColor.OnPropertyLet
            
            Me.Refresh
        End Sub

        Public Sub Refresh()
            Me.SyncDrives()
            CommonRedrawEraseInvalidate(RootWindowElement)
        End Sub

        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
        
        Private Sub SyncOLEDropMode() _
                Handles OLEDropMode.OnPropertyLet
                
            BaseSyncOLEDropMode(Me, Me.OLEDropMode, Me.OLEDragDropHandler, False, False)
        End Sub
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub

    #End Region
    
End Class