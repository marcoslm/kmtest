[Description("A Win32 native TextBox")]
[WindowsControl("/miscellaneous/ICONS??/TextBox??.png")]
[ClassId("33AD4EE0-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("A69E94C6-BD03-45A0-92F5-05CDD19D5D6E")]    ' FIXME implement {33AD4EE1-6699-11CF-B70C-00AA0060D393} for backcompat
[COMCreatable(False)]
[EventsUseDispInterface]
[ComImport(True)]
Class TextBox
    
    #Region "INHERITANCE"

        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlFocusable Via _BaseControl = New WinNativeFormsBASE.BaseControlFocusable(ControlTypeConstants.vbTextBox)
        [ImplementsViaPrivateFriendlies] Implements DataFieldBinderBase Via _DataFieldBinderBase = New DataFieldBinderBase
        
    #End Region
        
    #Region "STATE"
    
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public BackColor As OLE_COLOR = VBRUN.SystemColorConstants.vbWindowBackground
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public ForeColor As OLE_COLOR = VBRUN.SystemColorConstants.vbWindowText
        [Description("")]
            Public MultiLine As Boolean = False
        [Description("")]
            Public HideSelection As Boolean = True
        [Description("")]
            Public ScrollBars As VBRUN.ScrollBarConstants = VBRUN.ScrollBarConstants.vbSBNone
        [Description("")]
            Public BorderStyle As VBRUN.ControlBorderStyleConstants = VBRUN.ControlBorderStyleConstants.vbFixedSingleBorder
        [Description("")]
            Public MaxLength As Long = 0        ' FIXME this should be direct prop-get/let to EM_GETLIMITTEXT
        [Description("")]
            Public PasswordChar As String = vbNullString    ' FIXME this should be a direct prop-get/let to EM_SETPASSWORDCHAR
        [Serialize(True, "Alignment")]
        [Description("")]
            Private AlignmentINIT As VBRUN.AlignmentConstants
        [Description("If set to True, TextBox content will be auto-selected when TAB key is used to focus their controls.  This property is ignored if the Form.TabFocusAutoSelect is set to False.")]
        [Serialize(True, "TabFocusAutoSelect")]
            Private TabFocusAutoSelectINIT As Boolean = True
        [Description("")]
            Public NumbersOnly As Boolean = False
        [Description("Set this to True to generate Scroll events in response to mouse-wheel notifications")]
            Public WheelScrollEvent As Boolean = True
        [Description("Get/Sets the Cue Banner string that is displayed when the text value is empty")]
            Public TextHint As String
        [Description("Get/Sets whether the TextHint string is also displayed when the empty control is focused")]
            Public TextHintAlways As Boolean = False
                
        [Serialize(True, "Locked")]
        [Description("")]
            Private LockedINIT As Boolean = False
        [Serialize(True, "Text")]
            Private Text_INIT As String
                        
            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private OLEDragDropHandler As WinNativeFormsBASE.OLEDragDropHandler
            Private IsInitialized As Boolean
            Private isPointerOverSelection As Boolean
            Private MouseDownNeedsManualRelease As Boolean
            Private IsDesignMode As Boolean = False
                        
        [Description("Opacity, given as a percentage, 0 - 100.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
        Public Opacity As Double = 100
        
        [CustomDesigner("designer_SpectrumWindowsOrClear")]
        [Description("A color, when set, that will appear fully transparent in the window.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
        Public TransparencyKey As OLE_COLOR = -1
                
            Public HelpContextID As Long
        [Unimplemented]
            Public LinkItem As String
        [Unimplemented]
            Public LinkMode As VBRUN.LinkModeConstants
        [Unimplemented]
            Public LinkTopic As String
        [Unimplemented]
            Public LinkTimeout As Long = 50

        Public OLEDragMode As VBRUN.OLEDragConstants
        Public OLEDropMode As VBRUN.OLEDropConstants
        
        [Unimplemented]
            Public RightToLeft As Boolean

            Public WhatsThisHelpID As Long
        
        [Unimplemented]
            Public Sub LinkExecute(ByVal Command As String)
            End Sub

        [Unimplemented]
            Public Sub LinkPoke()
            End Sub
            
        [Unimplemented]
            Public Sub LinkRequest()
            End Sub

        [Unimplemented]
            Public Sub LinkSend()
            End Sub

        Public Sub OLEDrag()
            CommonOLEDrag(Me)
        End Sub
                    
        Public Sub ShowWhatsThis()
            HelpSystem.ShowControlHelpManual(Me)
        End Sub
    #End Region

    #Region "EVENTS"

        [DefaultDesignerEvent]
        [Description("")]
            Event Change()
        [Description("")]
        [DispId(&HEAEA0004)]
            Event Click()
        [Description("")]
        [DispId(&HEAEA0005)]
            Event DblClick()
        [Description("")]
        [DispId(&HEAEA0006)]
            Event GotFocus()
        [Description("")]
        [DispId(&HEAEA0008)]
            Event KeyDown(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0009)]
            Event KeyPress(KeyAscii As Integer)
        [Description("")]
        [DispId(&HEAEA000A)]
            Event KeyUp(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0007)]
            Event LostFocus()
        [Description("")]
        [DispId(&HEAEA0001)]
            Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0002)]
            Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0003)]
            Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
            Event Initialize()
        [Description("")]
        [DispId(&HEAEA000B)]
            Event DragDrop(Source As Control, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA000C)]
            Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
            
        [Unimplemented] Event LinkClose()
        [Unimplemented] Event LinkError(LinkErr As Integer)
        [Unimplemented] Event LinkNotify()
        [Unimplemented] Event LinkOpen(Cancel As Integer)
        Event OLECompleteDrag(Effect As Long)
        Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        Event OLESetData(Data As DataObject, DataFormat As Integer)
        Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)
        [DispId(&HEAEA000D)]
            Event Validate(Cancel As Boolean)

        Event Scroll()      ' new to tB

    #End Region
               
    #Region "MEMBERS"
                    
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
                        
            Me.InternalStateReset()     ' resets all the base class state
            Me.InternalStateResetDataBinderBase()
             
            Me.IsInitialized = False
            Me.isPointerOverSelection = False
            Me.MouseDownNeedsManualRelease = False
            
            With ControlContext.GetSerializer()
                If Not .Deserialize(Me) Then
                    Text_INIT = "TextBox"
                End If
                IsDesignMode = .IsDesignMode
            End With
            
            Dim Opacity As Any = Me.Opacity
            If Opacity > 100 Then Me.Opacity = 100
            If Opacity < 0 Then Me.Opacity = 0
            
            Dim extendedStyles As Long = If(ControlContext.IsPlacedOnUserControl, 0&, WinNativeFormsBASE.GeneralConsts.WindowExtendedStyles.WS_EX_NOPARENTNOTIFY)
                
                If Me.BorderStyle = ControlBorderStyleConstants.vbFixedSingleBorder Then
                    If _BaseControl.Appearance = AppearanceConstants.vbAppear3d Then
                        extendedStyles += WinNativeFormsBASE.GeneralConsts.WindowExtendedStyles.WS_EX_CLIENTEDGE
                    End If
                End If
                
                'extendedStyles += If(Me.RightToLeft, WinNativeFormsBASE.WS_EX_LAYOUTRTL, 0)
            
            With CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX)
                .TabFocusAutoSelect = TabFocusAutoSelectINIT
            End With
            
            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InitData.ClassName = "ThunderTextBox"
            InitData.Caption = Me.Text_INIT
            InitData.WindowStyles = GetStyles()
            InitData.ExtendedStyles = extendedStyles
            InitData.Flags = ForwardGotFocus Or _
                                ForwardLostFocus Or _
                                ForwardKeyDown Or _
                                ForwardKeyUp Or _
                                ForwardKeyPress Or _
                                ForwardValidate Or _
                                ForwardDoubleClick Or _
                                ForwardDragOver
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
        End Sub
        
        Private Function GetStyles() As Long
        	
            Dim ScrollBars As Any = Me.ScrollBars
            Dim MultiLine As Any = Me.MultiLine
            Dim styles As Long = If(MultiLine And ((ScrollBars = ScrollBarConstants.vbVertical) Or (ScrollBars = ScrollBarConstants.vbSBNone)), 0&, EditStyles.ES_AUTOHSCROLL) + _ 
                                    If(MultiLine, EditStyles.ES_MULTILINE Or EditStyles.ES_WANTRETURN Or EditStyles.ES_AUTOVSCROLL, 0&) + _
                                    If(Me.HideSelection = False, EditStyles.ES_NOHIDESEL, 0&) + _
                                    If(Me.NumbersOnly, EditStyles.ES_NUMBER, 0&)
            
            Dim scrollStyles As Long
            If MultiLine Then
                Select Case ScrollBars
                    Case ScrollBarConstants.vbHorizontal: scrollStyles = WinNativeFormsBASE.GeneralConsts.WindowStyles.WS_HSCROLL
                    Case ScrollBarConstants.vbVertical: scrollStyles = WinNativeFormsBASE.GeneralConsts.WindowStyles.WS_VSCROLL
                    Case ScrollBarConstants.vbBoth: scrollStyles = WinNativeFormsBASE.GeneralConsts.WindowStyles.WS_HSCROLL Or WinNativeFormsBASE.GeneralConsts.WindowStyles.WS_VSCROLL
                End Select
            End If
                            
            Dim borderStyles As Long
            If Me.BorderStyle = ControlBorderStyleConstants.vbFixedSingleBorder Then
                If _BaseControl.Appearance = AppearanceConstants.vbAppear3d Then
                Else
                     borderStyles = WinNativeFormsBASE.GeneralConsts.WindowStyles.WS_BORDER
                End If
            End If
            
            Dim alignStyles As Long
            Select Case Me.AlignmentINIT
                Case vbLeftJustify: alignStyles = EditStyles.ES_LEFT
                Case vbRightJustify: alignStyles = EditStyles.ES_RIGHT
                Case vbCenter: alignStyles = EditStyles.ES_CENTER
            End Select
            
            Return styles + scrollStyles + borderStyles + alignStyles
            
        End Function
        
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If

            ' disconnect anything that causes a circular reference here
            Dim OLEDragDropHandler As Any = Me.OLEDragDropHandler
            If OLEDragDropHandler IsNot Nothing Then OLEDragDropHandler.Disconnect()
            
            Set Me.Font = Nothing
            Me.InternalStateResetDataBinderBase()
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub

        #If LOG_TERMINATE Then
            Private Sub Class_Terminate()
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            End Sub
        #End If
        
        Private Sub HandleCreate() _
            Handles RootWindowElement.Create
            
            Me.Locked = Me.LockedINIT
            SyncMaxLength()
            If Len(Me.TextHint) > 0 Then SyncTextHint()
            If Len(Me.PasswordChar) > 0 Then SyncPasswordChar()
            IsInitialized = True
                        
            SyncOLEDropMode()
            If IsDesignMode = False Then _DataFieldBinderBase.SetupBindings()
            RaiseEvent Initialize()
        End Sub
        
        Private Sub SyncRecreate() _
                Handles MultiLine.OnPropertyLet, _
                        HideSelection.OnPropertyLet, _
                        ScrollBars.OnPropertyLet
                
            Dim Locked As Long = Me.Locked
            Dim MaxLength As Long = Me.MaxLength
            Dim PasswordChar As String = Me.PasswordChar
            Dim Text As String = Me.Text
            
            RecreateWindow(GetStyles())
                
            Me.Locked = Locked
            Me.MaxLength = MaxLength
            Me.PasswordChar = PasswordChar
            Me.Text = Text
        End Sub
        
        Private Sub HandleGetColors(ByVal hdc As LongPtr, ByRef BackBrushOut As LongPtr, ByVal ControlType As ControlTypeConstants) _
                Handles RootWindowElement.GetColors
                
            WinNativeFormsBASE.WindowsAPI.GDI32_SetTextForeColor(hdc, WinNativeFormsBASE.GDI32_TranslateColorFromHDC(Me.ForeColor, hdc))
            WinNativeFormsBASE.WindowsAPI.GDI32_SetBackColor(hdc, WinNativeFormsBASE.GDI32_TranslateColorFromHDC(Me.BackColor, hdc))
            BackBrushOut = Me.CreateBackBrush(Me.BackColor)
        End Sub
        
        Private Sub HandleCommand(ByVal NotificationCode As EditNotifications, ByVal Identifier As Integer) _
                Handles RootWindowElement.Command
                
            Select Case NotificationCode
                Case EN_CHANGE
                    _DataFieldBinderBase.OnDataChanged()
                    If IsInitialized Then RaiseEvent Change()
                Case EN_HSCROLL, EN_VSCROLL
                    If WheelScrollEvent = True OrElse RootWindowElement.IsProcessingMouseWheelMessage = False Then
                        RaiseEvent Scroll
                    End If
            End Select
        End Sub
                
        Private Sub HandlePreMouseDown(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single, _
                                        ByRef SwallowMessage As Boolean) _
                Handles RootWindowElement.PreMouseDown
                
            Dim itemIndex As Long
            If OLEDragMode = vbOLEDragAutomatic Then
            	If Me.isPointerOverSelection Then
                    If CommonDragDetect(RootWindowElement) Then
                        If CommonOLEDrag(Me, Me.SelText, False, True) = vbDropEffectMove Then
                            Me.SelText = ""
                        End If
                        SwallowMessage = True
                    Else
                        MouseDownNeedsManualRelease = True
                    End If
            	End If
            End If
        End Sub
        
        Private Sub HandleMouseDown(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseDown
                
            RaiseEvent MouseDown(CInt(Button), CInt(ShiftState), X, Y)
            
            If MouseDownNeedsManualRelease = True Then
                MouseDownNeedsManualRelease = False
                WinNativeFormsBASE.ReleaseCapture()
                RaiseEvent MouseUp(CInt(Button), CInt(ShiftState), X, Y)
            End If
        End Sub
        
        [UseGetLastError(False), DLLStackCheck(False)]
        Private DeclareWide PtrSafe Function USER32_GetCursorPos Lib "user32" Alias "GetCursorPos" (ByRef lpPoint As WinNativeFormsBASE.POINT) As Long
    
        Private Sub HandleMouseMove(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseMove
                
            If Me.OLEDragMode = vbOLEDragAutomatic Then
            	Dim RootWindowElement As Any = Me.RootWindowElement
            	' If the pointer is over a selected area of text, then that becomes the OLE drop source
                '  (i.e. the pointer changes from IBeam to pointer, and dragging works)
                ' Shamelessly looted from VBCCR
                Dim P1 As POINT
                Dim SelStart As Long
                Dim SelEnd As Long
                USER32_GetCursorPos(P1)
                WinNativeFormsBASE.ScreenToClient(RootWindowElement.Handle, P1)
                Dim pointerCharPos As Long = CLng(SendMessageCtl(EM_CHARFROMPOS, 0, P1.x + (P1.y << 16)) And &HFFFF&)
                Dim pointerPos As Long = CLng(SendMessageCtl(EM_POSFROMCHAR, pointerCharPos, 0))
                SendMessageCtl(EM_GETSEL, VarPtr(SelStart), VarPtr(SelEnd))
                isPointerOverSelection = ((pointerCharPos >= SelStart) And (pointerCharPos <= SelEnd) And (pointerPos > -1) And ((SelEnd - SelStart) > 0))
                RootWindowElement.OverrideCursor(If(isPointerOverSelection, vbArrow, vbDefault))
            End If
            RaiseEvent MouseMove(CInt(Button), CInt(ShiftState), X, Y)
        End Sub
        
        Private InternalMouseUpWasCaptured As Boolean
        Private InternalNextMouseUpIsFromDblClick As Boolean
        
        Private Sub HandlePreMouseUp(ByVal Button As VBRUN.MouseButtonConstants, _
                                    ByVal ShiftState As VBRUN.ShiftConstants, _
                                    ByVal X As Single, ByVal Y As Single, ByRef SwallowMessage As Boolean) _
                Handles RootWindowElement.PreMouseUp
                
            InternalMouseUpWasCaptured = (WinNativeFormsBASE.GetCapture() = Me.hWnd)
        End Sub
        
        Private Sub HandleMouseDoubleClick(ByVal Button As VBRUN.MouseButtonConstants, _
                                    ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseDoubleClick
                
            InternalNextMouseUpIsFromDblClick = True
        End Sub
        
        Private Sub HandleMouseUp(ByVal Button As VBRUN.MouseButtonConstants, _
                                    ByVal ShiftState As VBRUN.ShiftConstants, _
                                    ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseUp
                
            RaiseEvent MouseUp(CInt(Button), CInt(ShiftState), X, Y)
            If (InternalMouseUpWasCaptured = True) And (InternalNextMouseUpIsFromDblClick = False) Then RaiseEvent Click
            InternalNextMouseUpIsFromDblClick = False
        End Sub
        
        [Serialize(False)]
        Public Property Get SelStart() As Long
            Dim startPos As Long
            SendMessageCtl(EM_GETSEL, VarPtr(startPos), 0)
            Return startPos
        End Property
        
        [Serialize(False)]
        Public Property Let SelStart(Value As Long)
            SendMessageCtl(EM_SETSEL, Value, Value)
            SendMessageCtl(EM_SCROLLCARET, 0, 0)
        End Property
        
        Private Sub SyncTextHint() _
        	    Handles TextHint.OnPropertyLet, _
                        TextHintAlways.OnPropertyLet
                
            SendMessageCtl(EM_SETCUEBANNER, If(Me.TextHintAlways, 1, 0), StrPtr(Me.TextHint))
        End Sub
        
        [Serialize(False)]
        Public Property Get SelLength() As Long
            Dim startPos As Long
            Dim endPos As Long
            SendMessageCtl(EM_GETSEL, VarPtr(startPos), VarPtr(endPos))
            Return endPos - startPos
        End Property
        
        [Serialize(False)]
        Public Property Let SelLength(Value As Long)
            Dim startPos As Long = Me.SelStart
            SendMessageCtl(EM_SETSEL, startPos, startPos + Value)
            SendMessageCtl(EM_SCROLLCARET, 0, 0)
        End Property
        
        [Serialize(False)]
        Public Property Get SelText() As String
            Dim startPos As Long
            Dim endPos As Long
            SendMessageCtl(EM_GETSEL, VarPtr(startPos), VarPtr(endPos))
            Return Mid$(Me.Text, startPos + 1, endPos - startPos)
        End Property
        
        [Serialize(False)]
        Public Property Let SelText(Value As String)
            Dim startPos As Long
            Dim endPos As Long
            SendMessageCtl(EM_GETSEL, VarPtr(startPos), VarPtr(endPos))
            Dim text As String = Me.Text
            Me.Text = VBA.Left$(text, startPos) & Value & VBA.Mid$(text, endPos + 1)
            Me.SelStart = startPos + Len(Value)
        End Property
        
        [Serialize(False)]
        Public Property Get Text() As String
            Return GetWindowTextCtl()
        End Property
        
        [Serialize(False)]
        Public Property Let Text(ByVal Value As String)
            If Me.Text <> Value Then
                SendMessageCtl(WinNativeFormsBASE.WM_SETTEXT, 0, StrPtrSafe(Value))
                Me.Refresh
                RaiseEvent Change()
            End If
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Get _Default() As String
            Return Me.Text
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Let _Default(ByVal Value As String)
            Me.Text = Value
        End Property
                
        Private Sub SyncMaxLength() _
                Handles MaxLength.OnPropertyLet
                
            SendMessageCtl(EditMessages.EM_SETLIMITTEXT, Me.MaxLength, 0)
        End Sub
        
        Private Sub SyncPasswordChar() _
                Handles PasswordChar.OnPropertyLet
                
            Dim passwordCharLen As Long = Len(Me.PasswordChar)
            SendMessageCtl(EditMessages.EM_SETPASSWORDCHAR, If(passwordCharLen > 0, AscW(Me.PasswordChar), 0), 0)
        End Sub
        
        [Serialize(False)]
        [Description("")]
        Property Get Locked() As Boolean
            Return GetStyleFlagCtl(ES_READONLY)
        End Property
        
        [Serialize(False)]
        [Description("")]
        Property Let Locked(Value As Boolean)
            SendMessageCtl(EditMessages.EM_SETREADONLY, If(Value, 1, 0), 0)
        End Property
        
        Private Sub ColorsChanged() _
                Handles BackColor.OnPropertyLet, _
                        ForeColor.OnPropertyLet
            
            Me.Refresh
        End Sub
        
        Private Sub BorderStyleChanged() _  
        	    Handles BorderStyle.OnPropertyLet
                
            SyncBorderStyle(Me)
        End Sub
        
        [Serialize(False)]
        [Description("")]
        Property Get Alignment() As VBRUN.AlignmentConstants
            Dim styles As Long = GetWindowLongCtl(WinNativeFormsBASE.WindowProperties.GWL_STYLE)
            If styles And ES_CENTER Then
                Return VBRUN.AlignmentConstants.vbCenter
            ElseIf styles And ES_RIGHT Then
                Return VBRUN.AlignmentConstants.vbRightJustify
            Else
                Return VBRUN.AlignmentConstants.vbLeftJustify
            End If
        End Property
        
        [Serialize(False)]
        [Description("")]
        Property Let Alignment(Value As VBRUN.AlignmentConstants)
            Dim styles As Long = GetWindowLongCtl(WinNativeFormsBASE.WindowProperties.GWL_STYLE)
            styles = styles And Not (ES_CENTER Or ES_RIGHT)
            
            Select Case Value
                Case vbLeftJustify: styles += EditStyles.ES_LEFT
                Case vbRightJustify: styles += EditStyles.ES_RIGHT
                Case vbCenter: styles += EditStyles.ES_CENTER
            End Select
            
            SetWindowLongCtl(WinNativeFormsBASE.WindowProperties.GWL_STYLE, styles)
            Me.Refresh
        End Property
        
        Private Sub SyncProperties() _
        	    Handles NumbersOnly.OnPropertyLet
            
            Dim styles As Long = GetWindowLongCtl(WinNativeFormsBASE.WindowProperties.GWL_STYLE)
            styles = styles And Not (ES_NUMBER)
            
            styles += If(Me.NumbersOnly, EditStyles.ES_NUMBER, 0&)
            
            SetWindowLongCtl(WinNativeFormsBASE.WindowProperties.GWL_STYLE, styles)
        End Sub
        
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
                
        Private Sub SyncOLEDropMode() _
                Handles OLEDropMode.OnPropertyLet
                
            BaseSyncOLEDropMode(Me, Me.OLEDropMode, Me.OLEDragDropHandler, False, True)
        End Sub
        
        Private Sub HandleScroll(ByVal ScrollType As WinNativeFormsBASE.SCROLLNOTIFY, ByVal IsHorizontal As Boolean) _
                Handles RootWindowElement.Scroll
                
            ' EN_VSCROLL / EN_HSCROLL isn't generated when dragging the thumb track for some reason
            If ScrollType = WinNativeFormsBASE.SCROLLNOTIFY.SB_THUMBTRACK Then
            	RaiseEvent Scroll
            End If
        End Sub
        
        Private Sub _DataFieldBinderBase_SetLiveValue(fieldValue As Variant) Handles [_DataFieldBinderBase].SetLiveValue
            Me.Text = If(IsNull(fieldValue), "", CStr(fieldValue))
        End Sub
        
        Private Sub _DataFieldBinderBase_GetLiveValue(fieldValue As Variant) Handles [_DataFieldBinderBase].GetLiveValue
            fieldValue = Me.Text
        End Sub
        
        Private Sub _DataFieldBinderBase_GetParent(out As Control) Handles [_DataFieldBinderBase].GetParent
            Set out = CType(Of Control)(Me.Parent)
        End Sub
        
        Private Sub RootWindowElement_Load()
            
            Dim Opacity As Any = Me.Opacity
            If ((Opacity >= 0) And (Opacity < 100)) Or (TransparencyKey <> -1) Then
                SyncOpacity
            End If
        
        End Sub
        
        Private Sub SyncOpacity() _ 
                Handles Opacity.OnPropertyLet, _
                        TransparencyKey.OnPropertyLet
            
            CommonSyncOpacity(Me.TransparencyKey, Me.Opacity, Me.hWnd)
        End Sub
            
        [Serialize(False)]
        Public Property Get TabFocusAutoSelect() As Boolean
            Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).TabFocusAutoSelect
        End Property
        
        [Serialize(False)]
        Public Property Let TabFocusAutoSelect(ByVal Value As Boolean)
            CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).TabFocusAutoSelect = Value
        End Property
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
        
    #End Region
    
End Class