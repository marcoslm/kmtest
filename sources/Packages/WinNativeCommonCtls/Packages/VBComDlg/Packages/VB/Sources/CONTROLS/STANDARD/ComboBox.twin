[Description("A Win32 native ComboBox")]
[WindowsControl("/miscellaneous/ICONS??/ComboBox??.png")]
[ClassId("33AD4F08-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("56190F3A-14CF-4B74-A98D-69F805BB4825")] ' FIXME implement {33AD4F09-6699-11CF-B70C-00AA0060D393} for backcompat
[COMCreatable(False)]
[EventsUseDispInterface]
[ComImport(True)]
Class ComboBox
     
    #Region "INHERITANCE"

        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlFocusable Via _BaseControl = New WinNativeFormsBASE.BaseControlFocusable(ControlTypeConstants.vbComboBox)
        [ImplementsViaPrivateFriendlies] Implements DataFieldBinderBase Via _DataFieldBinderBase = New DataFieldBinderBase
 
    #End Region
        
    #Region "STATE"
    
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public BackColor As OLE_COLOR = VBRUN.SystemColorConstants.vbWindowBackground
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public ForeColor As OLE_COLOR = VBRUN.SystemColorConstants.vbWindowText
        [Description("")]
            Public Style As VBRUN.ComboBoxConstants = VBRUN.ComboBoxConstants.vbComboDropdown   ' this is correct for import purposes.
        [Description("")]
            Public BorderStyle As VBRUN.ControlBorderStyleConstants = VBRUN.ControlBorderStyleConstants.vbFixedSingleBorder
        [Description("")]
            Public Sorted As Boolean = False
        [Description("")]
            Public IntegralHeight As Boolean = True
        [Serialize(False)]
        [Description("")]
            Public NewIndex As Long
        [Description("VB6 doesn't trigger the Scroll event for mouse-wheel events.  Set this to True to generate Scroll events in response to mouse-wheel notifications")]
            Public WheelScrollEvent As Boolean = True

        [Serialize(True, "Locked")]
        [Description("")]
            Private LockedINIT As Boolean = False
        [Serialize(True, "ItemData")]
        ' This field is purposely declared as a Long not LongPtr, since item data stored in the form designer needs to be platform agnostic
            Private ItemData_INIT() As Long
        [Serialize(True, "List")]
            Private List_INIT() As String
        [Serialize(True, "Text")]
            Private Text_INIT As String
            
            Private CachedTopIndex As Long
            Private IsInitializing As Boolean
            Private IsDesignMode As Boolean = False
            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private WithEvents WindowHandleEDIT As WindowsControls.WindowElement
            Private WithEvents WindowHandleLIST As WindowsControls.WindowElement
            Private OLEDragDropHandler As WinNativeFormsBASE.OLEDragDropHandler
            Private isPointerOverSelection As Boolean
            Private MouseDownNeedsManualRelease As Boolean
                                
        Public HelpContextID As Long
        Public OLEDragMode As VBRUN.OLEDragConstants
        
        [CustomDesigner("designer_RestrictedOLEDropMode")]
            Public OLEDropMode As VBRUN.OLEDropConstants
        [Unimplemented]
            Public RightToLeft As Boolean

            Public WhatsThisHelpID As Long
            
        [Description("Opacity, given as a percentage, 0 - 100.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
            Public Opacity As Double = 100
        
        [CustomDesigner("designer_SpectrumWindowsOrClear")]
        [Description("A color, when set, that will appear fully transparent in the window.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
            Public TransparencyKey As OLE_COLOR = -1
            
            Private InternalMuteChangeEvent As Boolean
        
        Public Sub OLEDrag()
            CommonOLEDrag(Me)
        End Sub
                        
        Public Sub ShowWhatsThis()
            HelpSystem.ShowControlHelpManual(Me)
        End Sub
            
    #End Region

    #Region "EVENTS"
    
        [DefaultDesignerEvent]
        [Description("")]
            Event Change()
        [Description("")]
        [DispId(&HEAEA0004)]
            Event Click()
        [Description("")]
        [DispId(&HEAEA0005)]
            Event DblClick()
        [Description("")]
            Event DropDown()
        [Description("")]
        [DispId(&HEAEA0006)]
            Event GotFocus()
        [Description("")]
        [DispId(&HEAEA0008)]
            Event KeyDown(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0009)]
            Event KeyPress(KeyAscii As Integer)
        [Description("")]
        [DispId(&HEAEA000A)]
            Event KeyUp(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0007)]
            Event LostFocus()
        [Description("")]
            Event Scroll()
        [Description("")]
            Event Initialize()
        [Description("")]
            Event CloseUp()
        [Description("")]
        [DispId(&HEAEA000B)]
            Event DragDrop(Source As Control, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA000C)]
            Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        
        Event OLECompleteDrag(Effect As Long)
        Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        Event OLESetData(Data As DataObject, DataFormat As Integer)
        Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)
        [DispId(&HEAEA000D)]
            Event Validate(Cancel As Boolean)

    #End Region

    #Region "MEMBERS"

        #If LOG_TERMINATE Then
            Private Sub Class_Terminate()
                    Debug.Print CurrentComponentName & "." & CurrentProcedureName
            End Sub
        #End If
    
        Private Sub HandleLoad() _
                Handles RootWindowElement.Load
            
            Dim Opacity As Any = Me.Opacity
            If ((Opacity >= 0) And (Opacity < 100)) Or (TransparencyKey <> -1) Then
                SyncOpacity
            End If
        End Sub
        
        Private Sub SyncOpacity() _ 
                Handles Opacity.OnPropertyLet, _
                        TransparencyKey.OnPropertyLet
            
            CommonSyncOpacity(Me.TransparencyKey, Me.Opacity, Me.RootWindowElement.Handle)
        End Sub
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
                                           
            Me.InternalStateReset()     ' resets all the base class state
            Me.InternalStateResetDataBinderBase()
            
            Me.NewIndex = -1
            Me.CachedTopIndex = 0
            Me.IsInitializing = True
            Me.isPointerOverSelection = False
            Me.MouseDownNeedsManualRelease = False
            
            With ControlContext.GetSerializer
                If Not .Deserialize(Me) Then
                    'Caption_INIT = "ComboBox"
                End If
                IsDesignMode = .IsDesignMode
            End With
            
            Dim Opacity As Any = Me.Opacity
            If Opacity > 100 Then Me.Opacity = 100
            If Opacity < 0 Then Me.Opacity = 0
            
            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InitData.ClassName = "ThunderComboBox"
            InitData.Caption = Me.Text_INIT
            InitData.WindowStyles = GetStyles()
            InitData.Flags = NeedsPrePostMessages Or _
                                ForwardGotFocus Or _
                                ForwardLostFocus Or _
                                ForwardKeyDown Or _
                                ForwardKeyUp Or _
                                ForwardKeyPress Or _
                                ForwardDragOver Or _
                                ForwardValidate
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
        End Sub
        
        Private Function GetStyles() As Long
            Dim styles As Long = CLng(ComboBoxStyles.CBS_HASSTRINGS) + ComboBoxStyles.CBS_AUTOHSCROLL + _
                        If(Me.BorderStyle = ControlBorderStyleConstants.vbFixedSingleBorder, WinNativeFormsBASE.GeneralConsts.WindowStyles.WS_BORDER, 0&) + _
                        If(Me.Sorted, ComboBoxStyles.CBS_SORT, 0&) + _
                        If(Me.IntegralHeight = False, ComboBoxStyles.CBS_NOINTEGRALHEIGHT, 0&)
            
            Dim cbStyles As Long
            Select Case Me.Style
                Case vbComboDropdown: cbStyles = ComboBoxStyles.CBS_DROPDOWN
                Case vbComboSimple: cbStyles = ComboBoxStyles.CBS_SIMPLE
                Case vbComboDropdownList: cbStyles = ComboBoxStyles.CBS_DROPDOWNLIST
            End Select
            
            Return styles + cbStyles
        End Function
        
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
                
            ' disconnect anything that causes a circular reference here
            Dim OLEDragDropHandler As Any = Me.OLEDragDropHandler
            If OLEDragDropHandler IsNot Nothing Then OLEDragDropHandler.Disconnect()
            
            Me.InternalStateResetDataBinderBase()
            Set Me.Font = Nothing
            Set Me.WindowHandleLIST = Nothing
            Set Me.WindowHandleEDIT = Nothing
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub

        Private Sub PostProcessMessage(ByVal Message As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByRef ReturnValue As LongPtr, ByVal PostMessageCookie As Long) _
                Handles RootWindowElement.PostProcessMessage

            If IsInitializing = True Then Exit Sub
                
            Select Case Message
                Case ComboBoxMessages.CB_ADDSTRING, _
                        ComboBoxMessages.CB_INSERTSTRING, _
                        ComboBoxMessages.CB_DELETESTRING, _
                        ComboBoxMessages.CB_RESETCONTENT
                    SyncScrollBar
                    
                Case WinNativeFormsBASE.WM_SETFONT
                    Dim WindowHandleLIST As Any = Me.WindowHandleLIST
                    If WindowHandleLIST IsNot Nothing Then
                        'Debug.Print "COMBO: Got WM_SETFONT"
                        ' We have to send a matching font change to the LIST, otherwise item height does not get reported properly
                        WinNativeFormsBASE.SendMessageW(WindowHandleLIST.Handle, WinNativeFormsBASE.WM_SETFONT, wParam, lParam)
                        SyncScrollBar
                    End If
            End Select
        End Sub

        Private Sub HandleCreate() _
                Handles RootWindowElement.Create
            
            ' Set the font into the control first.  If IntegralHeight is active, then the control will adjust accordingly.
            SyncFontProperties()
            Dim style As Any = Me.Style
            If style <> vbComboSimple Then
                Me.InternalSyncHeight()
            End If
            
            ' Subclass the OS provided list and edit controls for this combo.
            Dim info As Any = WinNativeFormsBASE.WindowsAPI.USER32_GetComboBoxInfo(Me.RootWindowElement)
            Dim FlagsList As Long
            Dim FlagsEdit As Long
            
            If style = vbComboDropdownList Then
                FlagsList = ForwardGotFocus Or ForwardLostFocus
                FlagsEdit = ForwardGotFocus Or ForwardLostFocus
            Else
                FlagsList = ForwardGotFocus Or ForwardLostFocus
                FlagsEdit = ForwardGotFocus Or ForwardLostFocus Or ForwardKeyDown Or ForwardKeyUp Or ForwardKeyPress
            End If
            
            If info.hwndList <> 0 Then Set Me.WindowHandleLIST = CType(Of WindowElement)(Me.SubClassWindowElement(info.hwndList, FlagsList))
            If info.hwndItem <> 0 Then Set Me.WindowHandleEDIT = CType(Of WindowElement)(Me.SubClassWindowElement(info.hwndItem, FlagsEdit Or MuteSpecialKeyBeeps))
                
            Dim WindowHandleLIST As Any = Me.WindowHandleLIST
            If WindowHandleLIST IsNot Nothing Then
                WinNativeFormsBASE.WindowsAPI.USER32_SetStyleFlag(WindowHandleLIST, WinNativeFormsBASE.WS_VSCROLL, True)
            End If
            
            Me.Locked = Me.LockedINIT
            
            If (Me.IsDesignMode = False) OrElse (style <> vbComboDropdownList) Then
                ' FIXME could send CB_INITSTORAGE to pre-allocate the storage here
                Dim Item As String
                For Each Item In Me.List_INIT
                    AddItem(Item)
                Next

                ' FIXME handle ItemData list is longer than List
                Dim ItemData As Long
                Dim ItemDataIndex As Long
                For Each ItemData In Me.ItemData_INIT
                    Me.ItemData(ItemDataIndex) = CLngPtr(ItemData)
                    ItemDataIndex += 1
                Next

                Me.Text = Me.Text_INIT
            Else
            	' Match VBx behaviour here - use the control name as a fake Text
                AddItem(Me.Name)
                Me.ListIndex = 0
            End If
            
            SyncOLEDropMode()
            
            If IsDesignMode = False Then _DataFieldBinderBase.SetupBindings()
            
            RaiseEvent Initialize()
            IsInitializing = False
        End Sub
        
        Private Sub SyncRecreate() _
                Handles Style.OnPropertyLet, _
                        Sorted.OnPropertyLet, _
                        IntegralHeight.OnPropertyLet
                
            Dim Locked As Any = Me.Locked
            Dim Text As Any = Me.Text
            Dim ListIndex As Any = Me.ListIndex
            Dim ListCount As Any = Me.ListCount

            Dim List() As String
            Dim ItemData() As LongPtr
            ReDim List(ListCount)
            ReDim ItemData(ListCount)
            
            Dim index As Long
            While index < ListCount
            	List(index) = Me.List(index)
            	ItemData(index) = Me.ItemData(index)
                index += 1
            Wend
            
            Erase List_INIT ' prevent auto repopulation from the initialization data
            Erase ItemData_INIT
            
            RecreateWindow(GetStyles())
            
            index = 0
            While index < ListCount
                AddItem(List(index))
            	Me.ItemData(index) = ItemData(index)
                index += 1
            Wend
            
            Me.Locked = Locked
            Me.Text = Text
            If ListIndex <> -1 Then Me.ListIndex = ListIndex
        End Sub
        
        Private Sub EnforceSimpleListIntegralHeight()
            If (Me.Style = vbComboSimple) And (Me.IntegralHeight) Then
                If Me.WindowHandleLIST IsNot Nothing Then
                    Dim rectOuter As WinNativeFormsBASE.RECT
                    Dim rectList As WinNativeFormsBASE.RECT
                    WinNativeFormsBASE.GetWindowRect(Me.hWnd, rectOuter)
                    WinNativeFormsBASE.GetWindowRect(Me.WindowHandleLIST.Handle, rectList)
                    'Debug.Print Me.Name & ", list-top: " & Abs(rectList.Top) & ", list-bottom: " & Abs(rectList.Bottom)
                    'Debug.Print Me.Name & ", list size diff: " & (Abs(rectOuter.Bottom) - Abs(rectList.Bottom))
                    rectOuter.Bottom = rectList.Bottom
                    With CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX)
                        .PixelsHeight = Me.RootWindowElementBase.ScaleY(rectOuter.Bottom - rectOuter.Top, vbPixels, vbScaledPixels)
                    '    Debug.Print Me.Name & ", integral height (before): " & PixelsHeightINIT
                    '    Debug.Print Me.Name & ", integral height (after): " & .PixelsHeight
                        If .PixelsHeight > Int(.PixelsHeight) Then
                            .PixelsHeight = CLng(Int(.PixelsHeight)) + 1
                        End If
                    End With
                    Me.InternalSyncDesignerDimensions()
                End If
            End If
        End Sub
        
        Private Sub HandleEraseBackground(ByVal hdc As LongPtr, ByRef Handled As Boolean) _
                Handles WindowHandleLIST.EraseBackground
                
            Dim rect As WinNativeFormsBASE.RECT = WinNativeFormsBASE.USER32_GetClientRect(Me.WindowHandleLIST)
            Dim bkColorBrush As LongPtr = WinNativeFormsBASE.USER32_GetSysColorBrush(5) ' COLOR_WINDOW
            WinNativeFormsBASE.USER32_FillRectangle(hdc, rect, bkColorBrush)
            Handled = True     ' swallow up the event
        End Sub
        
        Private Sub HandleWheel(ByVal Delta As Integer, ByVal Horizontal As Boolean) _
                Handles WindowHandleLIST.MouseWheel

            If Horizontal = False Then
                CheckTopIndexChanged(WheelScrollEvent)
            End If
        End Sub
        
        Private Function CheckTopIndexChanged(Optional ByVal RaiseScrollEvent As Boolean = True) As Boolean
            Dim topIndex As Long = Me.TopIndex
            If CachedTopIndex <> topIndex Then
                CachedTopIndex = topIndex
                WinNativeFormsBASE.WindowsAPI.USER32_SetScrollValue(WindowHandleLIST, Me.TopIndex, WinNativeFormsBASE.SB_VERT)
                If RaiseScrollEvent Then RaiseEvent Scroll
                Return True
            End If
            Return False
        End Function
        
        Private Sub HandleScroll(ByVal ScrollType As WinNativeFormsBASE.SCROLLNOTIFY, ByVal IsHorizontal As Boolean) _
                Handles WindowHandleLIST.Scroll
                
            If CommonHandleVerticalScroll(Me.WindowHandleLIST, ScrollType, Me.ListCount) Then
                RaiseEvent Scroll
            End If
        End Sub
        
        Private Sub HandleGetColors(ByVal hdc As LongPtr, ByRef BackBrushOut As LongPtr, ByVal ControlType As ControlTypeConstants) _
                Handles RootWindowElement.GetColors
                
            HandleGetColorsCommon(hdc, BackBrushOut, Me)
        End Sub

        Private Sub HandleCommand(ByVal NotificationCode As ComboBoxNotifications, _
                                    ByVal Identifier As Integer) _
                Handles RootWindowElement.Command
                
            Select Case NotificationCode
                Case CBN_SELCHANGE
                    Dim SelIndex As Long = Me.ListIndex
                    If (Me.Style <> vbComboDropdownList) And (Me.WindowHandleEDIT IsNot Nothing) Then
                        Me.InternalMuteChangeEvent = True
                        Me.Text = Me.List(SelIndex)
                        Me.InternalMuteChangeEvent = False
                    End If
                    Call CheckTopIndexChanged
                    RaiseEvent Click
                Case CBN_EDITCHANGE
                    _DataFieldBinderBase.OnDataChanged()
                    RaiseEvent Change()
                Case CBN_DBLCLK
                    RaiseEvent DblClick()
                Case CBN_DROPDOWN
                    SyncScrollBar
                    RaiseEvent DropDown()
                Case CBN_CLOSEUP
                    RaiseEvent CloseUp()
            End Select
        End Sub
                
        Private Function SendMessageEditCtl(ByVal msg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr
            Return WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(WindowHandleEDIT, msg, wParam, lParam)
        End Function
        
        Public Sub AddItem(ByVal Value As String, Optional ByVal Index As Variant)
            Dim RootWindowElement As Any = Me.RootWindowElement
            Dim strPointer As Any = StrPtrSafe(Value)
            If IsMissing(Index) Then
                Me.NewIndex = CLng(SendMessageCtl(ComboBoxMessages.CB_ADDSTRING, 0, strPointer))
            Else
                ' FIXME error when Index is out of range
                Me.NewIndex = CLng(SendMessageCtl(ComboBoxMessages.CB_INSERTSTRING, CLng(Index), strPointer))
            End If
        End Sub
        
        Public Sub RemoveItem(ByVal Index As Variant)
            SendMessageCtl(ComboBoxMessages.CB_DELETESTRING, CLng(Index), 0)
        End Sub
        
        Public Sub Clear()
            SendMessageCtl(ComboBoxMessages.CB_RESETCONTENT, 0, 0)
        End Sub
        
        Private Sub SyncScrollBar()
        	CommonSyncScrollBarV(Me.WindowHandleLIST, Me.ListCount - 1)
        End Sub
                
        [Serialize(False)]
        Public Property Get ItemData(ByVal Index As Long) As LongPtr
            ' FIXME error if out of range
            ' Note Index is limited to 32767 due to Win95/98/ME support (see docs for CB_GETTEXT)
            ' FIXME In the official matching _ListBox interface, we need to change Index to Integer
            Return SendMessageCtl(ComboBoxMessages.CB_GETITEMDATA, Index, 0)
        End Property
        
        [Serialize(False)]
        Public Property Let ItemData(ByVal Index As Long, ByVal Value As LongPtr)
            ' FIXME error if out of range
            SendMessageCtl(ComboBoxMessages.CB_SETITEMDATA, Index, Value)
        End Property
        
        [Serialize(False)]
        Public Property Get List(ByVal Index As Long) As String
        	Return CommonGetComboBoxStringByIndex(RootWindowElement, Index)
        End Property
        
        [Serialize(False)]
        Public Property Let List(ByVal Index As Long, ByVal Value As String)
            ' FIXME error if out of range
            RemoveItem(Index)
            AddItem(Value, Index)
        End Property
        
        [Serialize(False)]
        Public Property Get ListCount() As Long
            Return CLng(SendMessageCtl(ComboBoxMessages.CB_GETCOUNT, 0, 0))
        End Property
        
        [Serialize(False)]
        Public Property Get TopIndex() As Long
            Return CLng(SendMessageCtl(ComboBoxMessages.CB_GETTOPINDEX, 0, 0))
        End Property
        
        [Serialize(False)]
        Public Property Let TopIndex(ByVal Value As Long)
            SendMessageCtl(ComboBoxMessages.CB_SETTOPINDEX, Value, 0)
            Me.Refresh
        End Property
        
        [Serialize(False)]
        Public Property Get ListIndex() As Long
            Return CLng(SendMessageCtl(ComboBoxMessages.CB_GETCURSEL, 0, 0))
        End Property
        
        [Serialize(False)]
        Public Property Let ListIndex(ByVal Value As Long)
            If Me.ListIndex <> Value Then
                SendMessageCtl(ComboBoxMessages.CB_SETCURSEL, Value, 0)
                Me.Refresh
                RaiseEvent Click()
            End If
        End Property

        [Serialize(False)]
        Public Property Get Text() As String
            Return GetWindowTextCtl()
        End Property
        
        [Serialize(False)]
        Public Property Let Text(ByVal Value As String)
            If Style = ComboBoxConstants.vbComboDropdownList Then
                Dim index As Long = CLng(SendMessageCtl(CB_FINDSTRINGEXACT, -1, StrPtrSafe(Value)))
                If index <> -1 Then
                    Me.ListIndex = index
                End If
            Else
                If Me.Text <> Value Then
                    SendMessageCtl(WinNativeFormsBASE.WM_SETTEXT, 0, StrPtrSafe(Value))
                    Me.Refresh
                    If Not InternalMuteChangeEvent Then
                        RaiseEvent Change()
                    End If
                End If
            End If
            
            _DataFieldBinderBase.OnDataChanged()
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Get _Default() As String
            Return Me.Text
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Let _Default(ByVal Value As String)
            Me.Text = Value
        End Property
        
        [Serialize(False)]
        [Description("")]
        Property Get Locked() As Boolean
            ' FIXME
            If Me.WindowHandleEDIT IsNot Nothing Then
                Return WinNativeFormsBASE.WindowsAPI.USER32_GetStyleFlag(Me.WindowHandleEDIT, ES_READONLY)
            End If
        End Property
        
        [Serialize(False)]
        [Description("")]
        Property Let Locked(Value As Boolean)
            ' FIXME
            If Me.WindowHandleEDIT IsNot Nothing Then
                SendMessageEditCtl(EditMessages.EM_SETREADONLY, If(Value, 1, 0), 0)
                Me.Refresh
            End If
        End Property
        
        Private Sub ColorsChanged() _
                Handles BackColor.OnPropertyLet, _
                        ForeColor.OnPropertyLet
            
            Me.Refresh
        End Sub
        
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
        
        Private Sub BorderStyleChanged() _  
        	    Handles BorderStyle.OnPropertyLet
                
            SyncBorderStyle(Me)
        End Sub
        
        Private Function HasEditCtl() As Boolean
            Return (Me.WindowHandleEDIT IsNot Nothing) And (Me.Style <> vbComboDropdownList)
        End Function
        
        [Serialize(False)]
        Public Property Get SelStart() As Long
            If HasEditCtl() Then
                Dim startPos As Long
                SendMessageEditCtl(EM_GETSEL, VarPtr(startPos), 0)
                Return startPos
            Else
                Err.Raise 380
            End If
        End Property
        
        [Serialize(False)]
        Public Property Let SelStart(Value As Long)
            If HasEditCtl() Then
                SendMessageEditCtl(EM_SETSEL, Value, Value)
                Me.Refresh
            Else
                Err.Raise 380
            End If
        End Property
        
        [Serialize(False)]
        Public Property Get SelLength() As Long
            If HasEditCtl() Then
                Dim startPos As Long
                Dim endPos As Long
                SendMessageEditCtl(EM_GETSEL, VarPtr(startPos), VarPtr(endPos))
                Return endPos - startPos
            Else
                Err.Raise 380
            End If
        End Property
        
        [Serialize(False)]
        Public Property Let SelLength(Value As Long)
            If HasEditCtl() Then
                Dim startPos As Long = Me.SelStart
                SendMessageEditCtl(EM_SETSEL, startPos, startPos + Value)
                Me.Refresh
            Else
                Err.Raise 380
            End If
        End Property
        
        [Serialize(False)]
        Public Property Get SelText() As String
            If HasEditCtl() Then
                Dim startPos As Long
                Dim endPos As Long
                SendMessageEditCtl(EM_GETSEL, VarPtr(startPos), VarPtr(endPos))
                Return Mid$(Me.Text, startPos + 1, endPos - startPos)
            Else
                Err.Raise 380
            End If
        End Property
        
        [Serialize(False)]
        Public Property Let SelText(Value As String)
            If HasEditCtl() Then
                Dim startPos As Long
                Dim endPos As Long
                SendMessageEditCtl(EM_GETSEL, VarPtr(startPos), VarPtr(endPos))
                Dim text As String = Me.Text
                Me.Text = VBA.Left$(text, startPos) & Value & VBA.Mid$(text, endPos + 1)
                Me.SelStart = startPos + Len(Value)
            Else
                Err.Raise 380
            End If
        End Property
                
        Private Sub SyncOLEDropMode() _
                Handles OLEDropMode.OnPropertyLet
                
            BaseSyncOLEDropMode(Me, Me.OLEDropMode, Me.OLEDragDropHandler, False, False)
        End Sub
        
        Private Sub HandleMouseMove(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles WindowHandleEDIT.MouseMove
                
            If Me.OLEDragMode = vbOLEDragAutomatic Then
            	' If the pointer is over a selected area of text, then that becomes the OLE drop source
                '  (i.e. the pointer changes from IBeam to pointer, and dragging works)
                ' Shamelessly looted from VBCCR
                Dim WindowHandleEDIT As Any = Me.WindowHandleEDIT
                Dim P1 As POINT
                CommonCursorPosRelativeToWindow(WindowHandleEDIT.Handle, P1)
                
                Dim SelStart As Long
                Dim SelEnd As Long
                Dim pointerCharPos As Long = CLng(SendMessageEditCtl(EM_CHARFROMPOS, 0, P1.x + (P1.y << 16)) And &HFFFF&)
                Dim pointerPos As Long = CLng(SendMessageEditCtl(EM_POSFROMCHAR, pointerCharPos, 0))
                SendMessageEditCtl(EM_GETSEL, VarPtr(SelStart), VarPtr(SelEnd))
                isPointerOverSelection = ((pointerCharPos >= SelStart) And (pointerCharPos <= SelEnd) And (pointerPos > -1) And ((SelEnd - SelStart) > 0))
                WindowHandleEDIT.OverrideCursor(If(isPointerOverSelection, vbArrow, vbDefault))
            End If
        End Sub
        
        Private Sub HandlePreMouseDown(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single, _
                                        ByRef SwallowMessage As Boolean) _
                Handles WindowHandleEDIT.PreMouseDown
                
            Dim itemIndex As Long
            If OLEDragMode = vbOLEDragAutomatic And Me.isPointerOverSelection Then
                If CommonDragDetect(WindowHandleEDIT) Then
                    If CommonOLEDrag(Me, Me.SelText, False, True) = vbDropEffectMove Then
                        Me.SelText = ""
                    End If
                Else
                    MouseDownNeedsManualRelease = True
                End If
            End If
        End Sub
        
        Private Sub HandleMouseDown(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles WindowHandleEDIT.MouseDown
                
            If MouseDownNeedsManualRelease = True Then
                MouseDownNeedsManualRelease = False
                WinNativeFormsBASE.ReleaseCapture()
            End If
        End Sub
        
        Private Sub _DataFieldBinderBase_SetLiveValue(fieldValue As Variant) Handles [_DataFieldBinderBase].SetLiveValue
            Me.Text = If(IsNull(fieldValue), "", CStr(fieldValue))
        End Sub
        
        Private Sub _DataFieldBinderBase_GetLiveValue(fieldValue As Variant) Handles [_DataFieldBinderBase].GetLiveValue
            fieldValue = Me.Text
        End Sub
        
        Private Sub _DataFieldBinderBase_GetParent(out As Control) Handles [_DataFieldBinderBase].GetParent
            Set out = CType(Of Control)(Me.Parent)
        End Sub
        
        Private Sub WindowHandleEDIT_Paint(Handled As Boolean)
            EnforceSimpleListIntegralHeight()
        End Sub
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
        
    #End Region
    
End Class