[Description("A Win32 native Image")]
[WindowsControl("/miscellaneous/ICONS??/Image??.png")]
[ClassId("33AD4F90-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("42D5A8E1-CA7E-4A5F-B9A0-B7564740A0A5")]    ' FIXME implement {33AD4F91-6699-11CF-B70C-00AA0060D393} for backcompat
[COMCreatable(False)]
[EventsUseDispInterface]
[ComImport(True)]
Class Image
             
    #Region "INHERITANCE"
    
        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlWindowlessNoFocus Via _BaseControl = New WinNativeFormsBASE.BaseControlWindowlessNoFocus(ControlTypeConstants.vbImage)
        [ImplementsViaPrivateFriendlies] Implements DataFieldBinderBase Via _DataFieldBinderBase = New DataFieldBinderBase
        [ImplementsViaPrivateFriendlies] Implements OLEDragDropHelper Via _BaseOLEDragDropHelper = New OLEDragDropHelper
        Implements IUnsupportedInterface ' must be LAST interface

    #End Region
        
    #Region "STATE"

        [Description("")]
            Public BorderStyle As VBRUN.ControlBorderStyleConstants = ControlBorderStyleConstants.vbNoBorder
        [Description("")]
            Public Stretch As Boolean = False
        [Description("")]
            Public Appearance As VBRUN.AppearanceConstants = VBRUN.AppearanceConstants.vbAppear3d

        [Description("Angle at which the control is rendered.  0 is the natural angle, 90 is a quarter anti-clockwise turn.  Control is turned relative to the top-left position.")]
            Public Angle As Double
            
        Enum StretchModeConstants
            vbStretchHalftone = 0
            vbStretchColorOnColor = 1
            vbStretchLanczos8 = 2
            vbStretchLanczos3 = 3
            vbStretchBicubic = 4
            vbStretchBilinear = 5
        End Enum
            
            Public StretchMode As StretchModeConstants = StretchModeConstants.vbStretchHalftone
            
        [CustomDesigner("designer_MultiLineText")]
        [Serialize(True, "ToolTipText")]
            Private ToolTipTextINIT As String
        
        [Serialize(True, "Enabled")]
            Private EnabledINIT As Boolean = True

            'Public RenderPictureAsIcon As Boolean = False
            
        [Serialize(False)]
            Private InternalPicture As StdPicture
            Private InternalLastPaintWasAngled As Boolean
                    
        [Serialize(True, "Picture")]
        [CustomDesigner("designer_PictureBytes")]
            Private ReadOnly PictureINIT() As Byte
            
            Public PictureDpiScaling As Boolean = True
            
            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private IsDesignMode As Boolean

        Public OLEDragMode As VBRUN.OLEDragConstants
        Public WhatsThisHelpID As Long
        
        [NonBrowsable]
        [Serialize(True)]
            Private InternalSectionId As Long = -1
            
        [Description("")]
        [Serialize(True, "MousePointer")]
            Private MousePointerINIT As VBRUN.MousePointerConstants = VBRUN.MousePointerConstants.vbDefault
        [Serialize(True, "MouseIcon")]
        [CustomDesigner("designer_IconBytes")]
            Private ReadOnly MouseIconINIT() As Byte

        Public Sub OLEDrag()
            CommonOLEDrag(Me)
        End Sub
                    
        Public Sub ShowWhatsThis()
            HelpSystem.ShowControlHelpManual(Me)
        End Sub
    #End Region

    #Region "EVENTS"
    
        [DefaultDesignerEvent]
        [Description("")]
        [DispId(&HEAEA0004)]
            Event Click()
        [Description("")]
        [DispId(&HEAEA0005)]
            Event DblClick()
        [Description("")]
        [DispId(&HEAEA0001)]
            Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0002)]
            Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0003)]
            Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
            Event Initialize()
        [Description("")]
        [DispId(&HEAEA000B)]
            Event DragDrop(Source As Control, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA000C)]
            Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        
        Event OLECompleteDrag(Effect As Long)
        Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        Event OLESetData(Data As DataObject, DataFormat As Integer)
        Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)

    #End Region
               
    #Region "MEMBERS"

        #If LOG_TERMINATE Then
            Private Sub Class_Terminate()
                    Debug.Print CurrentComponentName & "." & CurrentProcedureName
            End Sub
        #End If
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
            
            Me.InternalStateReset()     ' resets all the base class state
            Me.InternalStateResetDataBinderBase()
            Me.InternalStateResetOLEDragDrop()
        
            Set InternalPicture = Nothing
            InternalLastPaintWasAngled = False
            
            With ControlContext.GetSerializer
                If Not .Deserialize(Me) Then
                    'Caption_INIT = "Image"
                End If
                IsDesignMode = .IsDesignMode
            End With
            
            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InitData.InternalSectionId = InternalSectionId + 1
            InitData.Flags = RequiresWindowlessPaintingWithEvents Or _
                                ForwardEnsureEnabled Or _
                                ForwardButtonClick Or _
                                ForwardDoubleClick Or _
                                ManualMouseCapture Or _
                                ForwardMouseDown Or _
                                ForwardMouseMove Or _
                                ForwardMouseUp Or _
                                ForwardDragOver Or _
                                If(Angle <> 0, IsAngledControl, 0&)
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
                            
            With CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX)
                .ToolTipText = Me.ToolTipTextINIT
                .MousePointer = Me.MousePointerINIT
                .WindowlessEnabled = EnabledINIT
            End With
            
            InitOleDragDropHelper()
            
            CommonLoadPictureInit(Me.InternalPicture, Me.PictureINIT)
            CommonLoadPictureInit(CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MouseIcon, Me.MouseIconINIT)
        End Sub
                
        Private Sub InitOleDragDropHelper()
            _BaseOLEDragDropHelper.OLEDragDropInit(Me, ControlContext, RootWindowElement, True, False, True)
        End Sub
        
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
                
            ' disconnect anything that causes a circular reference here            
            Me.InternalStateResetOLEDragDrop()
            Me.InternalStateResetDataBinderBase()
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub
        
        Private Sub HandleCreate() _
                Handles RootWindowElement.Create
                
            SyncOLEDropMode()
            If IsDesignMode = False Then _DataFieldBinderBase.SetupBindings()
            RaiseEvent Initialize()
        End Sub
        
        [UseGetLastError(False), DLLStackCheck(False)]
        Private DeclareWide PtrSafe Function IntersectClipRect Lib "gdi32" (ByVal hdc As LongPtr, ByVal left As Long, ByVal top As Long, ByVal right As Long, ByVal bottom As Long) As Long
                        
        Private Sub HandlePaint(ByRef Handled As Boolean) _
                Handles RootWindowElement.Paint
                
            If Visible = False And Me.IsDesignMode = False Then Exit Sub
                
            Dim RootWindowElement As Any = Me.RootWindowElement
            Dim UnitPixelScale As Any = RootWindowElement.UnitPixelScale
            Dim ps As WinNativeFormsBASE.PAINTSTRUCT
            RootWindowElement.BeginPaint(ps)    ' you MUST use this method, and NOT the BeginPaint API 
                            
                Dim ps_hdc As Any = ps.hdc
                Dim rect As WinNativeFormsBASE.RECT
                
                If Me.Angle <> 0 Then
                     rect.Left = 0
                     rect.Top = 0
                     rect.Right = CLng((Me.PixelsWidth * UnitPixelScale))
                     rect.Bottom = CLng((Me.PixelsHeight * UnitPixelScale))
                     
                     Dim angleData As WorldTransformAngleData
                     DoWorldTransformAngle(angleData, ps_hdc, Me.Angle, Me.PixelsLeft * UnitPixelScale, Me.PixelsTop * UnitPixelScale)
                     InternalLastPaintWasAngled = True
                 Else
                    rect.Left = CLng(Me.PixelsLeft * UnitPixelScale)
                    rect.Top = CLng(Me.PixelsTop * UnitPixelScale)
                    rect.Right = rect.Left + CLng(Me.PixelsWidth * UnitPixelScale)
                    rect.Bottom = rect.Top + CLng(Me.PixelsHeight * UnitPixelScale)
                    InternalLastPaintWasAngled = False
                End If

                If (rect.Right > rect.Left) And (rect.Bottom > rect.Top) Then
                    Dim oldBkMode As Long = WinNativeFormsBASE.WindowsAPI.GDI32_SetBackMode(ps_hdc, 1)
                    
                    If Me.InternalPicture IsNot Nothing Then
                        
                        Dim Picture As OlePicture = Me.InternalPicture
                        
                        ' If RenderPictureAsIcon = True Then
                        '     Dim picWidth As Long
                        '     Dim picHeight As Long
                        '     VB.ScaleOLEPictureDimensionsToPixels(vbPicTypeNone, Picture.Width, picWidth, Picture.Height, picHeight)
                        '     Set Picture = RuntimeCreateScaledPicture(Picture, picWidth, picHeight, True, True)
                        ' End If
                        
                        Dim PictureType As Any = CType(Of PictureTypeConstants)(Picture.Type)
                        Dim PictureWidth As Any = Picture.Width
                        Dim PictureHeight As Any = Picture.Height
                        
                        Const STRETCH_HALFTONE = 4
                        Const STRETCH_COLORONCOLOR = 3
                        Dim OldStretchMode As Long = WinNativeFormsBASE.WindowsAPI.GDI32_SetBitmapStretchMode(ps_hdc, If(StretchMode <> StretchModeConstants.vbStretchColorOnColor, STRETCH_HALFTONE, STRETCH_COLORONCOLOR))
                        WinNativeFormsBASE.WindowsAPI.GDI32_SetBrushOrigin(ps_hdc, 0, 0, 0)
                        
                        ' SelectClipRgn seems to have some issues when used alongside SetWindowOrgEx/SetViewpointOrgEx
                        ' so instead we now use IntersectClipRect
                       ' Dim hrgn As LongPtr = WinNativeFormsBASE.CreateRectRgn(rect.Left, rect.Top, rect.Right, rect.Bottom)
                        'WinNativeFormsBASE.SelectClipRgn(ps_hdc, hrgn)
                        Dim savedDCInfoIdx As Any = SaveDC(ps.hdc)
                        IntersectClipRect(ps.hdc, rect.Left, rect.Top, rect.Right, rect.Bottom)
        
                        Dim DrawWidth As Long = rect.Right - rect.Left
                        Dim DrawHeight As Long = rect.Bottom - rect.Top
                        
                        Dim picWidthPixels As Long
                        Dim picHeightPixels As Long
                        ScaleOLEPictureDimensionsToPixels(PictureType, PictureWidth, picWidthPixels, PictureHeight, picHeightPixels)
                        
                        If Stretch = False Then
                            If (PictureType = vbPicTypeEMetafile) Or (PictureType = vbPicTypeMetafile) Then
                                ' Picture.Height/Width are not DPI scaled by OLE here.  They are just a guide anyway, so we just use it as an aspect ratio
                                Dim aspectRatio As Double = PictureHeight / PictureWidth
                                DrawHeight = CLng(DrawWidth * aspectRatio)
                            Else
                                DrawWidth = picWidthPixels
                                DrawHeight = picHeightPixels
                                If PictureDpiScaling = True Then
                                    If UnitPixelScale <> 1 Then
                                        DrawWidth = CLng(DrawWidth * UnitPixelScale)
                                        DrawHeight = CLng(DrawHeight * UnitPixelScale)
                                    End If
                                End If
                            End If
                        End If
                        
                        If (PictureType = vbPicTypeBitmap) And _
                                ((DrawWidth <> picWidthPixels) Or (DrawHeight <> picHeightPixels)) And _
                                (StretchMode > StretchModeConstants.vbStretchColorOnColor) Then
                            ' FIXME need to cache this
                            Dim newBmp As LongPtr = RuntimeCreateResampledBitmap(ps_hdc, Picture.Handle, DrawWidth, DrawHeight, StretchMode - 2)
                            Dim resampledPic As IPicture = CType(Of IPicture)([_HiddenModule].CreateStdPictureFromHandle(newBmp, vbPicTypeBitmap, True))
                            PictureRender(resampledPic, ps_hdc, rect.Left, rect.Top, DrawWidth, DrawHeight)
                        Else
                            PictureRender(Picture, ps_hdc, rect.Left, rect.Top, DrawWidth, DrawHeight)
                        End If
                        
                        
                        RestoreDC(ps.hdc, savedDCInfoIdx)
                        
                        'WinNativeFormsBASE.SelectClipRgn(ps_hdc, 0)
                        'WinNativeFormsBASE.DeleteObject(hrgn)
                        WinNativeFormsBASE.WindowsAPI.GDI32_SetBitmapStretchMode(ps_hdc, OldStretchMode)

                    Else
                        
                        If Me.IsDesignMode Then
                            Dim brush As LongPtr = GDI32_CreateHatchBrush(HS_DIAGCROSS, vbRed)
                            Dim invisiblePen As LongPtr = GDI32_CreatePen(PS_NULL, 1, 0)
                            Dim origPen2 As LongPtr = WinNativeFormsBASE.SelectObject(ps_hdc, invisiblePen)
                            Dim oldBrush2 As LongPtr = WinNativeFormsBASE.SelectObject(ps_hdc, If(brush <> 0, brush, GDI32_GetStockObject(NULL_BRUSH)))
                            WinNativeFormsBASE.Rectangle(ps_hdc, rect.Left, rect.Top, rect.Right, rect.Bottom)
                            WinNativeFormsBASE.SelectObject(ps_hdc, oldBrush2)
                            WinNativeFormsBASE.SelectObject(ps_hdc, origPen2)
                            WinNativeFormsBASE.DeleteObject(invisiblePen)
                            WinNativeFormsBASE.DeleteObject(brush)
                        End If
                        
                    End If
                    
                    If BorderStyle = vbFixedSingleBorder Then
                        Dim bfStyle As Long = BorderStyles.BDR_SUNKENOUTER Or BorderStyles.BDR_SUNKENINNER
                        Dim bfFlags As Long = BorderFlags.BF_RECT Or BorderFlags.BF_ADJUST
                        bfFlags += If(Appearance = vbAppearFlat, BorderFlags.BF_MONO, 0&)
                        WinNativeFormsBASE.DrawEdge(ps_hdc, rect, bfStyle, bfFlags)
                    End If
                
                End If
                
                If angleData.isActive Then
                    UndoWorldTransformAngle(angleData, ps_hdc)
                End If
                
            RootWindowElement.EndPaint(ps)
            Handled = True     ' swallow up the event
        End Sub
        
        Private Sub HandleMouseDown(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseDown
                
            ' ForwardMouseDown has already forwarded the message on to the actual control handler
            If Me.OLEDragMode = vbOLEDragAutomatic Then
                If Me.Picture IsNot Nothing Then
                    If CommonDragDetectLightweight(RootWindowElement) Then
                        If CommonOLEDrag(Me, Me.Picture, False, True) = vbDropEffectMove Then
                            Set Me.Picture = Nothing
                        End If
                    End If
                End If
            End If
        End Sub
                        
        Private Sub SignificantChange() _
                Handles Appearance.OnPropertyLet, _
                        BorderStyle.OnPropertyLet, _
                        Stretch.OnPropertyLet, _
                        StretchMode.OnPropertyLet, _
                        PictureDpiScaling.OnPropertyLet, _
                        Angle.OnPropertyLet
            
            Me.Refresh
        End Sub
        
        Private Sub AngleChanged() _
                Handles Angle.OnPropertyLet
            
            Me.RootWindowElement.AngleChanged(Angle <> 0)
            Me.WindowlessRefresh()
        End Sub

        Public Sub Refresh()
            Me.WindowlessRefresh()
            'WinNativeFormsBASE.WindowsAPI.USER32_RedrawWindow(Me.RootWindowElement, 0, 0, WinNativeFormsBASE.RDW_ERASE Or WinNativeFormsBASE.RDW_INVALIDATE)
        End Sub
        
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
        
        [Serialize(False)]
        Public Property Get Picture() As StdPicture
            Return InternalPicture
        End Property

        [Serialize(False)]
        Public Property Set Picture(Value As StdPicture)
            Set InternalPicture = Value
            SignificantChange()
            _DataFieldBinderBase.OnDataChanged()
        End Property

        [Serialize(False)]
        Public Property Let Picture(Value As StdPicture)    ' Weirdly, VBx also implements the Let for this
            Set Me.Picture = Value
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Get _Default() As Variant
            If Me.Picture IsNot Nothing Then
            	Return Me.Picture
            End If
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Let _Default(ByVal Value As Variant)
            Set Me.Picture = CType(Of StdPicture)(Value)
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Set _Default(ByVal Value As Variant)
            Set Me.Picture = CType(Of StdPicture)(Value)
        End Property
    
        [Serialize(False)]
        Public Property Get ToolTipText() As String
            Return CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).ToolTipText
        End Property
    
        [Serialize(False)]
        Public Property Let ToolTipText(ByVal Value As String)
            CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).ToolTipText = Value
            Me.RootWindowElementBase.ToolTipChanged()
        End Property
        
        [Serialize(False)]
        Public Property Get MouseIcon() As StdPicture
            Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MouseIcon
        End Property

        [Serialize(False)]
        Public Property Set MouseIcon(Value As StdPicture)
            Set CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MouseIcon = Value
            CommonMousePointerChanged()
        End Property

        [Serialize(False)]
        Public Property Let MouseIcon(Value As StdPicture)
            Set CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MouseIcon = Value
            CommonMousePointerChanged()
        End Property
        
        Private Sub HandleResizeWindowless(ByVal oldLeft As Long, ByVal oldTop As Long, ByVal oldWidth As Long, ByVal oldHeight As Long, _
                                               ByVal newLeft As Long, ByVal newTop As Long, ByVal newWidth As Long, ByVal newHeight As Long) _
                    Handles RootWindowElement.ResizeWindowless
                    
            On Error Resume Next
            Dim containerHwnd As LongPtr = CLngPtr(_BaseControl.Container.hwnd)
            On Error GoTo 0
            
            If containerHwnd = 0 Then
                ' Windowless UC container...  FIXME need to pass on the RECTs to refine the InvalidateRect passed to the UC site
                CommonRaiseViewChanged(_BaseControl.Container)
                Exit Sub
            End If
            
            Dim rect As WinNativeFormsBASE.RECT
            If (Me.Angle <> 0) Or InternalLastPaintWasAngled Then
                ' For now we just update the whole container, but we could at least refine the rectangle to contain all 4 corner points
                ' (using translateXY), but we'd need to also get oldAngle and newAngle in order to work out the real bounds
                WinNativeFormsBASE.WindowsAPI.InvalidateRect(containerHwnd, vbNullPtr, 1)
                Exit Sub
            End If
            
            CommonResizeWindowless(containerHwnd, 0, oldLeft, oldTop, oldWidth, oldHeight, newLeft, newTop, newWidth, newHeight)
        End Sub
        
        Private Sub IUnsupportedInterface_UnsupportedInterfaceRequested(ByRef iid As WinNativeFormsBASE.GUID2, ByRef out As stdole.IUnknown) Implements IUnsupportedInterface.UnsupportedInterfaceRequested
            CommonHandleRedirectedPictureInterface(iid, out, Me)
        End Sub
        
        Private Sub _DataFieldBinderBase_SetLiveValue(fieldValue As Variant) Handles [_DataFieldBinderBase].SetLiveValue
            If IsNull(fieldValue) OrElse Len(fieldValue) = 0 Then
                Set Me.Picture = Nothing
            Else
                Set Me.Picture = Global.LoadPicture(fieldValue)
            End If
        End Sub
        
        Private Sub _DataFieldBinderBase_GetLiveValue(fieldValue As Variant) Handles [_DataFieldBinderBase].GetLiveValue
            fieldValue = PictureToByteArray(Me.Picture)
        End Sub
        
        Private Sub _DataFieldBinderBase_GetParent(out As Control) Handles [_DataFieldBinderBase].GetParent
            Set out = CType(Of Control)(Me.Parent)
        End Sub
        
        [Serialize(False)]
        Public Property Get MousePointer() As MousePointerConstants
            Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MousePointer
        End Property
    
        [Serialize(False)]
        Public Property Let MousePointer(ByVal Value As MousePointerConstants)
            CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).MousePointer = Value
            CommonMousePointerChanged()
        End Property
        
        [Serialize(False)]
        Public Property Get Enabled() As Boolean
            Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).WindowlessEnabled
        End Property
    
        [Serialize(False)]
        Public Property Let Enabled(ByVal Value As Boolean)
            CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).WindowlessEnabled = Value
        End Property
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
        
    #End Region
    
End Class