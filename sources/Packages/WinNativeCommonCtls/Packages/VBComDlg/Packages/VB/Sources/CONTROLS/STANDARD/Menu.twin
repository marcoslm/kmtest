[ComImport(True)]
[InterfaceId("48E1327F-062C-4D9C-8009-6CCFF31EB158")]
Interface TbMenuPrivate Extends stdole.IUnknown
    Function GetMenuDataPtr() As LongPtr
End Interface

[Description("A Win32 native MENU control")]
[WindowsControl("no_designer")]
[ClassId("33AD4F68-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("79AE735E-3ABB-41DB-B421-922CA19976D3")]    ' FIXME implement {33AD4F69-6699-11CF-B70C-00AA0060D393} for backcompat
[COMCreatable(False)]
[EventsUseDispInterface]
[ComImport(True)]
Class Menu
    
    #Region "INHERITANCE"
    
        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControl Via _BaseControl = New WinNativeFormsBASE.BaseControl(ControlTypeConstants.vbMenuControl)
        Implements TbMenuPrivate
        
    #End Region
        
    #Region "STATE"
    
        [Description("TIP: enter '-' for a seperator bar")]
            Public Caption As String
            Public Checked As Boolean
        [Serialize(True, "Enabled")]
            Private EnabledINIT As Boolean = True
            Public Visible As Boolean = True
            
        [Unimplemented]
            Public HelpContextID As Long

            Public ReadOnly WindowList As Boolean
        [Unimplemented]
            Public NegotiatePosition As VBRUN.NegotiatePositionConstants
        [Unimplemented]
            Public Shortcut As String

        Type MenuInternalData
            InternalCachedContainerMenuHandle As LongPtr
            InternalCachedPopupMenuHandle As LongPtr
            InternalCachedPositionId As Long
            InternalCachedMasterId As Long
        End Type
        Private MenuData As MenuInternalData
            
        [Serialize(False)]
            Private InternalPicture As StdPicture
        
        [Serialize(True, "Picture")]
        [CustomDesigner("designer_PictureBytes")]
            Private ReadOnly PictureINIT() As Byte

        [Description("if Picture is an ICON file with multiple sizes, use this to choose the size you want to use")]
            Public IconSizeX As Long = 0
        [Description("if Picture is an ICON file with multiple sizes, use this to choose the size you want to use")]
            Public IconSizeY As Long = 0
            
    #End Region

    #Region "EVENTS"
    
    [DispId(&HEAEA0004)]
        Event Click()

    #End Region
               
    #Region "MEMBERS"

        [Serialize(True, "Index")]
        Private IndexINIT As Long = -1

        [Serialize(False)]
        Public Property Get Index() As Long
            Dim IndexINIT As Any = CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).ControlArrayIndex
            If IndexINIT = -1 Then
                'Err.Raise 343, , "Object not an array"
                Err.ReturnHResult = &H800A0157
                Return 0
            End If
            Return IndexINIT
        End Property
        
        #If LOG_TERMINATE Then
            Private Sub Class_Terminate()
                    Debug.Print CurrentComponentName & "." & CurrentProcedureName
            End Sub
        #End If
                
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize

            Me.InternalStateReset()     ' resets all the base class state
            Set Me.InternalPicture = Nothing
            MenuData.InternalCachedContainerMenuHandle = 0
            MenuData.InternalCachedMasterId = 0
            MenuData.InternalCachedPopupMenuHandle = 0
            MenuData.InternalCachedPositionId = -1
            
            With ControlContext.GetSerializer
                If Not .Deserialize(Me) Then
                    'Caption_INIT = "Menu"
                End If
                'IsDesignMode = .IsDesignMode
            End With
            
            Set Me.ControlContext = ControlContext
            
            With CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX)
                .WindowlessEnabled = Me.EnabledINIT
                .ControlArrayIndex = Me.IndexINIT
            End With
            
            Dim pictureInit As Variant = Me.PictureINIT
            If ArrayHasData(pictureInit) Then
                ' LoadPicture can now be passed a byte-array containing an in-memory stream
                If IconSizeX = 0 And IconSizeY = 0 Then
                    Set InternalPicture = Global.LoadPicture(pictureInit)
                Else
                    Set InternalPicture = Global.LoadPicture(pictureInit, LoadPictureSizeConstants.vbLPCustom, , IconSizeX, IconSizeY)
                End If
                
                If InternalPicture.Type = vbPicTypeIcon Then
                	Set InternalPicture = CType(Of StdPicture)([_HiddenModule].ConvertIconToBitmap(InternalPicture))
                End If
            End If
            
            Dim InitData As WindowCreationData
            Me.InternalBaseControlBeforeCreateRootWindow(InitData)
            
            Me.ControlContext.SetControlArrayIndex(Me.IndexINIT)
            Me.ControlContext.SetBaseControlInfoPtr(Me.InternalBaseControlInfoPtrX)
        End Sub
                
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
                
            ' disconnect anything that causes a circular reference here
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub
        
        Public Function Container() As Control
             Return CType(Of Control)(Me.ControlContext.GetContainer)
        End Function
        
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
        
        Private Sub UpdateMenus(itemInfo As MENUITEMINFO)
        	itemInfo.cbSize = LenB(itemInfo)
            If MenuData.InternalCachedContainerMenuHandle <> 0 Then
                SetMenuItemInfoW(MenuData.InternalCachedContainerMenuHandle, MenuData.InternalCachedPositionId, 1, itemInfo)
                DrawMenuBar(CLngPtr(Parent.hWnd))
            End If
            If MenuData.InternalCachedPopupMenuHandle <> 0 Then
                SetMenuItemInfoW(MenuData.InternalCachedPopupMenuHandle, MenuData.InternalCachedPositionId, 1, itemInfo)
            End If
        End Sub
        
        Private Sub CaptionChanged() _  
        	        Handles Caption.OnPropertyLet

            Dim itemInfo As MENUITEMINFO
            itemInfo.fMask = MIIM_STRING
            itemInfo.dwTypeData = Me.Caption
            UpdateMenus(itemInfo)
        End Sub
        
        Private Sub CheckedChanged() _  
        	        Handles Checked.OnPropertyLet
                            
            Dim itemInfo As MENUITEMINFO
            itemInfo.fMask = MIIM_STATE
            If Checked = True Then itemInfo.fState += MFS_CHECKED
            If Enabled = False Then itemInfo.fState += MFS_DISABLED
            UpdateMenus(itemInfo)
        End Sub
        
        Private Sub VisibleChanged() _
                Handles Visible.OnPropertyLet
        
            CommonRebuildMenus(Me.Parent)
        End Sub
        
        [Serialize(False)]
        Public Property Get Picture() As StdPicture
            Return InternalPicture
        End Property

        [Serialize(False)]
        Public Property Set Picture(Value As StdPicture)
            Set InternalPicture = Value
            PictureChanged()
        End Property

        [Serialize(False)]
        Public Property Let Picture(Value As StdPicture)    ' Weirdly, VBx also implements the Let for this
            Set InternalPicture = Value
            PictureChanged()
        End Property
        
        Private Sub PictureChanged()
            Dim InternalPicture As Any = Me.InternalPicture
            If InternalPicture.Type = vbPicTypeIcon Then
                Set InternalPicture = CType(Of StdPicture)([_HiddenModule].ConvertIconToBitmap(InternalPicture))
                Set Me.InternalPicture = InternalPicture
            End If
            
            Dim itemInfo As MENUITEMINFO
            itemInfo.fMask = MIIM_BITMAP
            itemInfo.hbmpItem = If((InternalPicture Is Nothing) OrElse (InternalPicture.Type = vbPicTypeIcon), 0&, InternalPicture.Handle)
            UpdateMenus(itemInfo)
        End Sub
                
        [Serialize(False)]
        [DefaultMember]
        Public Property Get _Default() As Boolean
            Return Me.Enabled
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Let _Default(Value As Boolean)
            Me.Enabled = Value
        End Property
        
        [Serialize(False)]
        Public Property Get Enabled() As Boolean
            Return CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).WindowlessEnabled
        End Property
    
        [Serialize(False)]
        Public Property Let Enabled(ByVal Value As Boolean)
            CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX).WindowlessEnabled = Value
            Me.CheckedChanged()
        End Property
        
        Private Function TbMenuPrivate_GetMenuDataPtr() As LongPtr
            Return VarPtr(MenuData)
        End Function
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
        
    #End Region
    
End Class