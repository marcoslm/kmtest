[InterfaceId("BAE0D7DF-237D-41F0-90C5-4DECC483D956")]
Private Class ButtonBase
    [CustomDesigner("designer_SpectrumWindows")]
    [Description("")]
        Public BackColor As OLE_COLOR = VBRUN.SystemColorConstants.vb3DFace   ' FIXME this is linked to Appearance
    [CustomDesigner("designer_SpectrumWindows")]
    [Description("")]
        Public ForeColor As OLE_COLOR = VBRUN.SystemColorConstants.vbButtonText   ' FIXME this is linked to Appearance
    [Description("")]
        Public PictureDpiScaling As Boolean = False
    [Description("Only applicable to Graphical style buttons")]
        Public PictureAlignment As VBRUN.AlignConstants = VBRUN.AlignConstants.vbAlignTop
    [Description("Only applicable to Graphical style buttons.  When PictureAlignment is Left/Right, this affects the padding between the elements.  When PictureAlignment is Top/Bottom, this affects the padding between the text and the corresponding edge")]
        Public Padding As Long = 2      ' the default padding between the text and the bottom edge

    [Description("Opacity, given as a percentage, 0 - 100.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
        Public Opacity As Double = 100
        
    [CustomDesigner("designer_SpectrumWindowsOrClear")]
    [Description("A color, when set, that will appear fully transparent in the window.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
        Public TransparencyKey As OLE_COLOR = -1
        
    [Serialize(True, "DisabledPicture")]
    [CustomDesigner("designer_PictureBytes")]
        Private ReadOnly DisabledPictureINIT() As Byte
    
    [Serialize(False)]
    Private InternalDisabledPicture As StdPicture
    
    [Serialize(False)]
    Public Property Get DisabledPicture() As StdPicture
        Return InternalDisabledPicture
    End Property

    [Serialize(False)]
    Public Property Set DisabledPicture(Value As StdPicture)
        Set InternalDisabledPicture = Value
        'PictureChanged()
    End Property

    [Serialize(False)]
    Public Property Let DisabledPicture(Value As StdPicture)    ' Weirdly, VBx also implements the Let for this
        Set InternalDisabledPicture = Value
        'PictureChanged()
    End Property
    
    [Serialize(True, "DownPicture")]
    [CustomDesigner("designer_PictureBytes")]
        Private ReadOnly DownPictureINIT() As Byte
    
    [Serialize(False)]
    Private InternalDownPicture As StdPicture
    
    [Serialize(False)]
    Public Property Get DownPicture() As StdPicture
    	Return InternalDownPicture
    End Property

    [Serialize(False)]
    Public Property Set DownPicture(Value As StdPicture)
        Set InternalDownPicture = Value
        'PictureChanged()
    End Property

    [Serialize(False)]
    Public Property Let DownPicture(Value As StdPicture)    ' Weirdly, VBx also implements the Let for this
        Set InternalDownPicture = Value
        'PictureChanged()
    End Property

    [Serialize(True, "Picture")]
    [CustomDesigner("designer_PictureBytes")]
       Private ReadOnly PictureINIT() As Byte

    [Serialize(False)]
    Private InternalPicture As StdPicture
    
    [Serialize(False)]
    Public Property Get Picture() As StdPicture
        Return InternalPicture
    End Property

    [Serialize(False)]
    Public Property Set Picture(Value As StdPicture)
        Set InternalPicture = Value
        'PictureChanged()
    End Property

    [Serialize(False)]
    Public Property Let Picture(Value As StdPicture)    ' Weirdly, VBx also implements the Let for this
        Set InternalPicture = Value
        'PictureChanged()
    End Property

        
    [CustomDesigner("designer_SpectrumWindows")]
    [Unimplemented]
        Public MaskColor As OLE_COLOR = &H00C0C0C0
    [Unimplemented]
        Public UseMaskColor As Boolean


        Public Style As VBRUN.ButtonConstants

    Private FontHandle As LongPtr
    Private InternalFont As StdFont

    Private RootWindowElement As WindowsControls.WindowElement
    Private ControlContext As WindowsControls.WindowsControlContext
    Private OuterOwner As Object
    
    Friend Sub InternalStateResetButton()
        If Me.FontHandle <> 0 Then WinNativeFormsBASE.GDI32_DeleteObject(Me.FontHandle)
        FontHandle = 0
        Set InternalFont = Nothing
        Set InternalDisabledPicture = Nothing
        Set InternalDownPicture = Nothing
        Set InternalPicture = Nothing
    End Sub

    Friend Sub InitializeBASE(ByRef RootWindowElement As WindowsControls.WindowElement, _
                                   ByRef ControlContext As WindowsControls.WindowsControlContext, _
                                   ByRef OuterOwner As Object)

    	Set Me.RootWindowElement = RootWindowElement
        Set Me.ControlContext = ControlContext
        Set Me.OuterOwner = OuterOwner

        CommonLoadPictureInit(Me.InternalPicture, Me.PictureINIT)
        CommonLoadPictureInit(Me.InternalDownPicture, Me.DownPictureINIT)
        CommonLoadPictureInit(Me.InternalDisabledPicture, Me.DisabledPictureINIT)
    End Sub
    
    Private Sub SyncOLEFontHandle()
    	Dim OuterOwnerFont As Any = CType(Of StdFont)(Me.OuterOwner.Font)
        If Me.InternalFont IsNot OuterOwnerFont Then
            Set Me.InternalFont = OuterOwnerFont
        
            Dim ifont As Any = CType(Of IFont)(OuterOwnerFont)
            Dim LF As WinNativeFormsBASE.LOGFONT
            WinNativeFormsBASE.GetObjectW(ifont.hFont, LenB(LF), LF)
            LF.LFQuality = CByte(WinNativeFormsBASE.CLEARTYPE_QUALITY)
            
            If Me.FontHandle <> 0 Then WinNativeFormsBASE.GDI32_DeleteObject(Me.FontHandle)
            Me.FontHandle = WinNativeFormsBASE.CreateFontIndirectW(LF)
        End If
    End Sub
    
    Private Function GetFontMetrics() As WinNativeFormsBASE.TEXTMETRIC
        CommonGetFontMetrics(CType(Of IFont)(Me.OuterOwner.Font), Me.RootWindowElement, GetFontMetrics)
    End Function
    
    Friend Sub HandleInitialize()
        Dim Opacity As Any = Me.Opacity
        If Opacity > 100 Then Me.Opacity = 100
        If Opacity < 0 Then Me.Opacity = 0
    End Sub
    
    Friend Sub HandleLoad()
        Dim Opacity As Any = Me.Opacity
        If ((Opacity >= 0) And (Opacity < 100)) Or (TransparencyKey <> -1) Then
            SyncOpacity
        End If
    End Sub
    
    Private Sub SyncOpacity() _ 
            Handles Opacity.OnPropertyLet, _
                    TransparencyKey.OnPropertyLet
            
        CommonSyncOpacity(Me.TransparencyKey, Me.Opacity, Me.RootWindowElement.Handle)
    End Sub

    Friend Sub HandleDrawItem_BASE(ByRef Info As WinNativeFormsBASE.DRAWITEMSTRUCT, Handled As Boolean, _
                                    ByVal IsChecked As Boolean, ByVal IsCommandButton As Boolean)
            
        'Debug.Print Me.Name & ":" & CurrentProcedureName, "Info.ItemState: " & Hex(Info.ItemState)
        
        Dim InfoItemState As Any = Info.ItemState
        Dim InfoHDC As Any = Info.hDC
        Dim RootWindowElement As Any = Me.RootWindowElement
        Dim UnitPixelScale As Any = RootWindowElement.UnitPixelScale
        Dim OuterOwner As Any = Me.OuterOwner
        Dim PictureAlignment As Any = Me.PictureAlignment
        
        Dim backColor As Long = TranslateColor(Me.BackColor)
        Dim brush As LongPtr
                                
            Dim IsSelected As Boolean = InfoItemState And OwnerDrawState.ODS_SELECTED

            If IsChecked Then
                brush = CreateCheckeredPatternBrush(InfoHDC, vbWhite, backColor)
                IsSelected = True
            Else
                brush = WinNativeFormsBASE.CreateSolidBrush(backColor)
            End If
                        
            Dim rect As WinNativeFormsBASE.RECT
            rect.Right = RootWindowElement.CurrentWidth
            rect.Bottom = RootWindowElement.CurrentHeight

            If (rect.Right > rect.Left) And (rect.Bottom > rect.Top) Then
                Dim _width As Long = rect.Right - rect.Left

                Dim actualForeColor As Long = TranslateColor(If(OuterOwner.Enabled, Me.ForeColor, vbGrayText))
                Dim oldTextColor As Long = WinNativeFormsBASE.WindowsAPI.GDI32_SetTextForeColor(InfoHDC, actualForeColor)
                Dim oldBkMode As Long = WinNativeFormsBASE.WindowsAPI.GDI32_SetBackMode(InfoHDC, 1)
                                
                Dim picture As OlePicture = Me.Picture
                If IsSelected Then
                    Dim downPicture	As Any = Me.DownPicture
                    If downPicture IsNot Nothing Then Set picture = CType(Of OlePicture)(downPicture)
                ElseIf InfoItemState And OwnerDrawState.ODS_DISABLED Then
                    Dim disabledPicture As Any = Me.DisabledPicture
                    If disabledPicture IsNot Nothing Then Set picture = CType(Of OlePicture)(disabledPicture)
                End If
                
                Dim extraPadding As Long = CLng(Me.Padding * UnitPixelScale)
                If Len(OuterOwner.Caption) = 0 Or (picture Is Nothing) Or (PictureAlignment = vbAlignNone) Then
                    extraPadding = 0
                End If
                
                If IsCommandButton = True Then
                    If InfoItemState And OwnerDrawState.ODS_FOCUS Then
                        If (rect.Right > 2) And (rect.Bottom > 2) Then
                            Dim pen As LongPtr = GDI32_CreatePen(PS_SOLID, 1, vbBlack)
                            Dim oldPen As LongPtr = WinNativeFormsBASE.SelectObject(InfoHDC, pen)
                            GDI32_Rectangle(InfoHDC, 0, 0, rect.Right, rect.Bottom)
                            WinNativeFormsBASE.SelectObject(InfoHDC, oldPen)
                            
                            rect.Left += 1
                            rect.Top += 1
                            rect.Right -= 1
                            rect.Bottom -= 1
                        End If
                    End If
                End If
                
                Dim bfStyle As Long
                Dim bfFlags As Long = BorderFlags.BF_RECT Or BorderFlags.BF_ADJUST
                                    
                If IsSelected Then
                    bfStyle = BorderStyles.BDR_SUNKENOUTER Or BorderStyles.BDR_SUNKENINNER
                Else
                    bfStyle = BorderStyles.BDR_RAISEDOUTER Or BorderStyles.BDR_RAISEDINNER
                End If
                    
                WinNativeFormsBASE.DrawEdge(InfoHDC, rect, bfStyle, bfFlags)
                                                
                If brush <> 0 Then
                    WinNativeFormsBASE.USER32_FillRectangle(InfoHDC, rect, brush)
                End If

                ' Even if not focused, calculate positions as if we were focused so that if we do become
                ' focused, the aligned position of text is not affected by the outer focus rectangle
                If IsCommandButton = True Then
                    If (InfoItemState And OwnerDrawState.ODS_FOCUS) = 0 Then
                        If (rect.Right - rect.Left) > 2 Then
                            rect.Left += 1
                            rect.Right -= 1
                        End If
                        If (rect.Bottom - rect.Top) > 2 Then
                            rect.Top += 1
                            rect.Bottom -= 1
                        End If
                    End If
                End If
                                                                    
                SyncOLEFontHandle()
                
                Dim oldFont As LongPtr = WinNativeFormsBASE.SelectObject(InfoHDC, Me.FontHandle)
                

                Dim DrawWidth As Long
                Dim DrawHeight As Long
                Dim RecalculatedRenderPath As Boolean = False
            ReCalcRenderPath:
                Dim maxWidth As Long = rect.Right - rect.Left
                Dim offsetTop As Long = 0
                Dim offsetLeft As Long = 0
                Dim remainingHeight As Long = (rect.Bottom - rect.Top)
                
                If (picture IsNot Nothing) Then
                
                    Dim pictureType As Any = CType(Of PictureTypeConstants)(picture.Type)
                    Dim pictureWidth As Any = picture.Width
                    Dim pictureHeight As Any = picture.Height
                    
                    Const PICTYPE_METAFILE As Long = 2
                    Const PICTYPE_ENHMETAFILE As Long = 4
                    If (pictureType = PICTYPE_METAFILE) Or (pictureType = PICTYPE_ENHMETAFILE) Then
                        ' this will size to fit later
                    Else
                        ScaleOLEPictureDimensionsToPixels(pictureType, pictureWidth, DrawWidth, pictureHeight, DrawHeight)
                        If PictureDpiScaling = True Then
                            DrawWidth = CLng(DrawWidth * UnitPixelScale)
                            DrawHeight = CLng(DrawHeight * UnitPixelScale)
                        End If
                    End If
                    
                    If (PictureAlignment = vbAlignLeft) Or (PictureAlignment = vbAlignRight) Then
                        maxWidth -= DrawWidth + extraPadding
                        If maxWidth < 0 Then maxWidth = 0
                    
                        If PictureAlignment = vbAlignLeft Then
                            offsetLeft += DrawWidth + extraPadding
                        End If
                    End If
                End If
                
                ' FIXME we should cache the render path                             
                Dim textRender As TextRenderPath = New TextRenderPath(InfoHDC, CStr(OuterOwner.Caption), True, AlignmentConstants.vbCenter, maxWidth, False, False, 0)
                remainingHeight -= textRender.TotalHeight
                
                If (picture Is Nothing) Or (PictureAlignment = vbAlignNone) _
                        Or (PictureAlignment = vbAlignLeft) _
                        Or (PictureAlignment = vbAlignRight) Then
                    offsetTop = CLng(Int(remainingHeight / 2))
                ElseIf PictureAlignment = vbAlignBottom Then
                    offsetTop = extraPadding
                ElseIf PictureAlignment = vbAlignTop Then
                    offsetTop = ((rect.Bottom - extraPadding) - textRender.TotalHeight) - rect.Top
                End If
                
                remainingHeight -= extraPadding
                
                ' When selected (down), the content is shifted 1x1 pixels
                Dim picOffsetXY As Long
                If IsSelected Then
                    picOffsetXY = 1
                    offsetLeft += 1
                    offsetTop += 1
                End If
                            
                If picture IsNot Nothing Then
                    If (pictureType = PICTYPE_METAFILE) Or (pictureType = PICTYPE_ENHMETAFILE) Then
                        ' size to fit (VBx doesn't do this)
                        If (PictureAlignment = vbAlignLeft) Or (PictureAlignment = vbAlignRight) Then
                            If RecalculatedRenderPath = False Then
                                Dim remainingWidth As Long = (rect.Right - rect.Left) - (textRender.TotalWidth + extraPadding)
                                If remainingWidth > 0 Then
                                    DrawWidth = remainingWidth
                                    DrawHeight = CLng((pictureHeight / pictureWidth) * remainingWidth)
                                    RecalculatedRenderPath = True
                                    GoTo ReCalcRenderPath
                                End If
                            End If
                        Else
                            If remainingHeight > 0 Then
                                If remainingHeight > 6 Then
                                    ' allow for some padding around the picture
                                    remainingHeight -= 6
                                End If
                                DrawWidth = CLng((pictureWidth / pictureHeight) * remainingHeight)
                                DrawHeight = remainingHeight
                            End If
                        End If
                    End If
                    
                    Const STRETCH_HALFTONE = 4
                    Dim OldStretchMode As Long = WinNativeFormsBASE.WindowsAPI.GDI32_SetBitmapStretchMode(InfoHDC, STRETCH_HALFTONE)
                    WinNativeFormsBASE.WindowsAPI.GDI32_SetBrushOrigin(InfoHDC, 0, 0, 0)

                    If (DrawWidth > 0) And (DrawHeight > 0) Then
                                                    
                        ' The text gets drawn OVER the image if necessary, so image must be drawn first
                        ' Calculate the vertical mid-point of the remaining space, after taking into account the text height
                        
                        Dim picX As Long = picOffsetXY + rect.Left
                        Dim picY As Long = picOffsetXY + rect.Top
                        Dim thisWidth As Any = rect.Right - rect.Left
                        Dim thisHeight As Any = rect.Bottom - rect.Top
                        Dim textRenderTotalWidth As Any = textRender.TotalWidth
                        Dim textRenderTotalHeight As Any = textRender.TotalHeight
                        
                        Dim additionX As Long
                        Dim additionY As Long
                        
                        If PictureAlignment = vbAlignLeft Then
                            additionX = CLng(Int(((thisWidth) - (textRenderTotalWidth + DrawWidth) - extraPadding) / 2))
                            additionY = CLng(Int(((thisHeight) - DrawHeight) / 2))
                        ElseIf PictureAlignment = vbAlignRight Then
                            additionX = CLng(Int(((thisWidth) - (textRenderTotalWidth + DrawWidth) - extraPadding) / 2) + extraPadding + textRender.TotalWidth)
                            additionY = CLng(Int(((thisHeight) - DrawHeight) / 2))
                        ElseIf PictureAlignment = vbAlignTop Then
                            additionX = CLng(Int((thisWidth) / 2) - Int(DrawWidth / 2))
                            additionY = CLng(Int(remainingHeight / 2) - Int(DrawHeight / 2))
                        ElseIf PictureAlignment = vbAlignBottom Then
                            additionX = CLng(Int((thisWidth) / 2) - Int(DrawWidth / 2))
                            additionY = CLng(Int(remainingHeight / 2) - Int(DrawHeight / 2) + textRenderTotalHeight + extraPadding)
                        ElseIf PictureAlignment = vbAlignNone Then
                            additionX = CLng(Int((thisWidth) / 2) - Int(DrawWidth / 2))
                            additionY = CLng(Int((thisHeight) / 2) - Int(DrawHeight / 2))
                        End If
                        
                        picX += additionX
                        picY += additionY
                        
                        Dim hrgn As LongPtr = WinNativeFormsBASE.CreateRectRgn(rect.Left, rect.Top, rect.Right, rect.Bottom)
                        Dim oldClipRgn As LongPtr = WinNativeFormsBASE.SelectClipRgn(InfoHDC, hrgn)
                        PictureRender(picture, InfoHDC, picX, picY, DrawWidth, DrawHeight)
                        WinNativeFormsBASE.SelectClipRgn(InfoHDC, oldClipRgn)
                    End If
                    WinNativeFormsBASE.WindowsAPI.GDI32_SetBitmapStretchMode(InfoHDC, OldStretchMode)
                End If
            
                If textRender.HasMnemomnics Then
                    textRender.RenderWithMnemonics(InfoHDC, rect, offsetLeft, offsetTop, GetFontMetrics().TMAscent, UnitPixelScale, False)
                Else
                    textRender.Render(InfoHDC, rect, offsetLeft, offsetTop, False)
                End If
                
                If (InfoItemState And OwnerDrawState.ODS_FOCUS) And ((InfoItemState And OwnerDrawState.ODS_NOFOCUSRECT) = 0) Then

                    Dim focusRectOffset As Long = 1
                    If IsCommandButton = True Then
                        If (rect.Right > 2) And (rect.Bottom > 2) Then
                        	focusRectOffset = 1
                        End If
                    Else
                        If (rect.Right > 4) And (rect.Bottom > 4) Then
                            focusRectOffset = 2
                        End If
                    End If
                    
                    If focusRectOffset <> 0 Then
                        rect.Left += focusRectOffset
                        rect.Top += focusRectOffset
                        rect.Right -= focusRectOffset
                        rect.Bottom -= focusRectOffset
                        WinNativeFormsBASE.DrawFocusRect(InfoHDC, rect)
                    End If
                End If
                
                                            
                
            ' Debug.Print "---------------------------------"
                
                WinNativeFormsBASE.WindowsAPI.GDI32_SetBackMode(InfoHDC, oldBkMode)
                WinNativeFormsBASE.WindowsAPI.GDI32_SetTextForeColor(InfoHDC, oldTextColor)
                WinNativeFormsBASE.SelectObject(InfoHDC, oldFont)
            
            End If
            
        Handled = True     ' swallow up the event

        If brush <> 0 Then WinNativeFormsBASE.WindowsAPI.GDI32_DeleteObject(brush)
        
    End Sub
    
    Private Sub ColorsChanged() _
                Handles BackColor.OnPropertyLet, _
                        ForeColor.OnPropertyLet
        
        Dim OuterOwner As Any = Me.OuterOwner
        OuterOwner.Refresh
    End Sub
    
    Private Sub Class_Terminate()
    	Dim FontHandle As Any = Me.FontHandle
        If FontHandle <> 0 Then WinNativeFormsBASE.GDI32_DeleteObject(FontHandle)
        Me.FontHandle = 0
    End Sub
    
    Private Sub SyncRecreate() _
            Handles Style.OnPropertyLet
            
        Me.OuterOwner.SyncRecreate
    End Sub

End Class