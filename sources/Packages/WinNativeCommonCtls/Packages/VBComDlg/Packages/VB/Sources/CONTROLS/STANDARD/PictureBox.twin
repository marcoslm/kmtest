[Description("A Win32 native PictureBox")]
[WindowsControl("/miscellaneous/ICONS??/PictureBox??.png")]
[ClassId("33AD4ED0-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("04005DD2-51C7-4DC0-94CB-95FC240AC88E")]    ' FIXME implement {33AD4ED1-6699-11CF-B70C-00AA0060D393} for backcompat
[COMCreatable(False)]
[EventsUseDispInterface]
[ComImport(True)]
Class PictureBox
    
    #Region "INHERITANCE"
      
        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlFocusableNoFont Via _BaseControl = New WinNativeFormsBASE.BaseControlFocusableNoFont(ControlTypeConstants.vbPictureBox)
        [ImplementsViaPrivateFriendlies] Implements GraphicsBase Via _BaseGraphics = New GraphicsBase()
        [ImplementsViaPrivateFriendlies] Implements DataFieldBinderBase Via _DataFieldBinderBase = New DataFieldBinderBase
        [ImplementsViaPrivateFriendlies] Implements OLEDragDropHelper Via _BaseOLEDragDropHelper = New OLEDragDropHelper
        Implements TbCommonContainerPrivate
        Implements IUnsupportedInterface            ' MUST be last interface
         
    #End Region
        
    #Region "STATE"

        [Description("")]
            Public BorderStyle As VBRUN.ControlBorderStyleConstants = ControlBorderStyleConstants.vbFixedSingleBorder
        [Description("")]
            Public Appearance As VBRUN.AppearanceConstants = VBRUN.AppearanceConstants.vbAppear3d

        [Serialize(True, "Picture")]
        [CustomDesigner("designer_PictureBytes")]
            Private ReadOnly PictureINIT() As Byte
            
            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private IsDesignMode As Boolean
            
            Public AutoSize As Boolean = False
        
            Public HelpContextID As Long
        [Unimplemented]
            Public LinkItem As String
        [Unimplemented]
            Public LinkMode As VBRUN.LinkModeConstants
        [Unimplemented]
            Public LinkTopic As String
        [Unimplemented]
            Public LinkTimeout As Long = 50

        Public OLEDragMode As VBRUN.OLEDragConstants
        
        [Unimplemented]
            Public RightToLeft As Boolean
        [Unimplemented]
            Public WhatsThisHelpID As Long
        [Unimplemented]
            Public Negotiate As Boolean             ' this appears in the form designer, but not in the class interface??

        [CustomDesigner("designer_MultiLineText")]
        [Serialize(True, "ToolTipText")]
            Private ToolTipTextINIT As String
            
        [Description("Opacity, given as a percentage, 0 - 100.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
            Public Opacity As Double = 100
        
        [CustomDesigner("designer_SpectrumWindowsOrClear")]
        [Description("A color, when set, that will appear fully transparent in the window.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
            Public TransparencyKey As OLE_COLOR = -1
            
        [Serialize(False)]
        [Unimplemented]
            Public Image As IPictureDisp            ' persistent cached bitmap

        [Unimplemented]
            Public Sub LinkExecute(ByVal Command As String)
            End Sub

        [Unimplemented]
            Public Sub LinkPoke()
            End Sub
            
        [Unimplemented]
            Public Sub LinkRequest()
            End Sub

        [Unimplemented]
            Public Sub LinkSend()
            End Sub

        Public Sub OLEDrag()
            CommonOLEDrag(Me)
        End Sub
                        
        [Unimplemented]
            Public Function Point(ByVal X As Single, ByVal Y As Single) As Long
            End Function
            
        Public Sub ShowWhatsThis()
            HelpSystem.ShowControlHelpManual(Me)
        End Sub
            
    #End Region
               
    #Region "EVENTS"
    
        [DefaultDesignerEvent]
        [Description("")]
        [DispId(&HEAEA0004)]
            Event Click()
        [Description("")]
        [DispId(&HEAEA0005)]
            Event DblClick()
        [Description("")]
        [DispId(&HEAEA0001)]
            Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0002)]
            Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0003)]
            Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
            Event Initialize()
        [Description("")]
            Event Paint()
        [Description("")]
            Event Resize()
        [Description("")]
            Event Change()
        [Description("")]
        [DispId(&HEAEA000B)]
            Event DragDrop(Source As Control, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA000C)]
            Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        [Description("")]
        [DispId(&HEAEA0006)]
            Event GotFocus()
        [Description("")]
        [DispId(&HEAEA0007)]
            Event LostFocus()
        [Description("")]
        [DispId(&HEAEA0008)]
            Event KeyDown(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0009)]
            Event KeyPress(KeyAscii As Integer)
        [Description("")]
        [DispId(&HEAEA000A)]
            Event KeyUp(KeyCode As Integer, Shift As Integer)
        [Unimplemented] Event LinkClose()
        [Unimplemented] Event LinkError(LinkErr As Integer)
        [Unimplemented] Event LinkNotify()
        [Unimplemented] Event LinkOpen(Cancel As Integer)
        Event OLECompleteDrag(Effect As Long)
        Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        Event OLESetData(Data As DataObject, DataFormat As Integer)
        Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)
        [DispId(&HEAEA000D)]
            Event Validate(Cancel As Boolean)

    #End Region
               
    #Region "MEMBERS"
        
        #If LOG_TERMINATE Then
            Private Sub Class_Terminate()
                    Debug.Print CurrentComponentName & "." & CurrentProcedureName
            End Sub
        #End If

        Private Sub HandleLoad() _
                Handles RootWindowElement.Load
            
            Dim Opacity As Any = Me.Opacity
            If ((Opacity >= 0) And (Opacity < 100)) Or (TransparencyKey <> -1) Then
                SyncOpacity
            End If
        End Sub
        
        Private Sub SyncOpacity() _ 
                Handles Opacity.OnPropertyLet, _
                        TransparencyKey.OnPropertyLet
            
            CommonSyncOpacity(Me.TransparencyKey, Me.Opacity, Me.RootWindowElement.Handle)
        End Sub
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
                            
            Me.InternalStateReset()     ' resets all the base class state
            Me.InternalStateResetDataBinderBase()
            Me.InternalStateResetOLEDragDrop()
            Me.InternalStateResetGraphics()
                        
            With ControlContext.GetSerializer
                If Not .Deserialize(Me) Then
                    'Me.TabStopINIT = False          ' For new controls this is correct.  Though for imported controls, TabStop = True is the default
                End If
                IsDesignMode = .IsDesignMode
            End With
            
            With CType(Of BaseControlInfo)(Me.InternalBaseControlInfoPtrX)
                .BaseGraphicsInfoPtr = _BaseGraphics.InitBaseGraphicsInfo()
            End With
            
            Dim Opacity As Any = Me.Opacity
            If Opacity > 100 Then Me.Opacity = 100
            If Opacity < 0 Then Me.Opacity = 0
            
            Dim styles As Long = If(_BaseGraphics.ClipControls = True, WinNativeFormsBASE.WS_CLIPCHILDREN, 0&)
            Dim extendedStyles As Long = If(ControlContext.IsPlacedOnUserControl, 0&, WinNativeFormsBASE.GeneralConsts.WindowExtendedStyles.WS_EX_NOPARENTNOTIFY)

            If Me.BorderStyle = ControlBorderStyleConstants.vbFixedSingleBorder Then
                If Me.Appearance = AppearanceConstants.vbAppear3d Then
                    extendedStyles += WinNativeFormsBASE.GeneralConsts.WindowExtendedStyles.WS_EX_CLIENTEDGE
                Else
                    styles += WinNativeFormsBASE.GeneralConsts.WindowStyles.WS_BORDER
                End If
            End If

            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InitData.ClassName = If(_BaseGraphics.HasDC, "ThunderPictureBoxDC", "ThunderPictureBox")
            'InitData.Caption = vbNullString
            InitData.WindowStyles = styles
            InitData.ExtendedStyles = extendedStyles
            InitData.Flags = IsContainer Or _
                                ForwardGotFocus Or _
                                ForwardLostFocus Or _
                                ForwardKeyDown Or _
                                ForwardKeyUp Or _
                                ForwardKeyPress Or _
                                ForwardDragOver Or _
                                ForwardValidate Or _
                                ForwardDoubleClick Or _
                                ForwardMouseDown Or _
                                ForwardMouseUp Or _
                                ForwardMouseMove Or _
                                ManualMouseCapture Or _
                                ForwardButtonClick Or _
                                ScaleAdjustMouseEvents
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
            
            InitGraphics(Me.RootWindowElement)
                        
            With CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX)
                .ToolTipText = Me.ToolTipTextINIT
            End With
            
            InitOleDragDropHelper()
            'Me.[_BaseGraphics].SyncScaleMode(Me, Me.RootWindowElement)
        End Sub
        
        Private Sub InitOleDragDropHelper()
            _BaseOLEDragDropHelper.OLEDragDropInit(Me, ControlContext, RootWindowElement, True, True, False)
        End Sub
                
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
                
            ' disconnect anything that causes a circular reference here
            Me.InternalStateResetOLEDragDrop()
            Me.InternalStateResetDataBinderBase()
            Me.InternalStateResetGraphics()
            Set Me.Font = Nothing
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub
        
        Private Sub AutoSizeChanged() _
        	    Handles AutoSize.OnPropertyLet
                
            AutoSizeNow(Me.Picture)
        End Sub
                
        Private Sub AutoSizeNow(ByRef picture As StdPicture)
            If picture IsNot Nothing Then
                Dim DrawWidth As Long
                Dim DrawHeight As Long

                Dim UnitPixelScale As Any = Me.RootWindowElement.UnitPixelScale
                
                Const PICTYPE_METAFILE As Long = 2
                Const PICTYPE_ENHMETAFILE As Long = 4
                Dim pictureType As Any = CType(Of PictureTypeConstants)(picture.Type)
                
                If (pictureType = PICTYPE_METAFILE) Or (pictureType = PICTYPE_ENHMETAFILE) Then
                Else
                    ScaleOLEPictureDimensionsToPixels(pictureType, picture.Width, DrawWidth, picture.Height, DrawHeight)
                    Dim BorderPixelSize As Long
                    If Me.BorderStyle = vbFixedSingleBorder Then BorderPixelSize = 4
                    DrawWidth += BorderPixelSize
                    DrawHeight += BorderPixelSize
                    If PictureDpiScaling = False Then
                        DrawWidth = CLng(DrawWidth / UnitPixelScale)
                        DrawHeight = CLng(DrawHeight / UnitPixelScale)
                    End If
                End If
                
                Dim newWidth As Double
                Dim newHeight As Double
                If Me.IsDesignMode Then
                    newWidth = DrawWidth * Screen.TwipsPerPixelX * UnitPixelScale
                    newHeight = DrawHeight * Screen.TwipsPerPixelY * UnitPixelScale
                Else
                	Dim ControlContext As Any = Me.ControlContext
                    newWidth = DrawWidth * ControlContext.GetScaleModePixelsMultiplierX
                    newHeight = DrawHeight * ControlContext.GetScaleModePixelsMultiplierY
                End If
                Me.Width = newWidth
                Me.Height = newHeight
            End If
        End Sub
                
        Private Sub HandleCreate() _
                Handles RootWindowElement.Create
            
            Dim Graphics As Any = Me.[_BaseGraphics]
            Dim RootWindowElement As Any = Me.RootWindowElement
            Graphics.SyncScaleMode(Me, RootWindowElement)
            
            Dim Picture As StdPicture
            Dim PictureINIT As Variant = Me.PictureINIT
            If CommonLoadPictureInit(Picture, PictureINIT) Then
            	Set Me.Picture = Picture
                If Me.AutoSize Then
                    AutoSizeNow(Picture)
                End If
            End If
            
            Graphics.ChangeHDC(0, Me.hWnd, RootWindowElement, Picture, Me, False)
                        
            SyncOLEDropMode()
            
            If IsDesignMode = False Then [_DataFieldBinderBase].SetupBindings()
            RaiseEvent Initialize()
            
            InternalIsFirstResizeEventAfterLoad = True
        End Sub
        
        [UseGetLastError(False), DLLStackCheck(False)]
        Private DeclareWide PtrSafe Function UpdateWindow Lib "user32" (ByVal hWnd As LongPtr) As Long
    
        Private Sub HandlePaint(ByRef Handled As Boolean) _
                Handles RootWindowElement.Paint
                
            'Debug.Print Now() & " PictureBox.HandlePaint"
            
            Dim RootWindowElement As Any = Me.RootWindowElement
            Dim ps As WinNativeFormsBASE.PAINTSTRUCT
            RootWindowElement.BeginPaint(ps)    ' you MUST use this method, and NOT the BeginPaint API 
                
                Me.[_BaseGraphics].OnPaint(ps.hdc)
                
                If Me.ClipControls = True And IsDesignMode = False Then
                    CommonRedrawChildren(Me)
                End If

            RootWindowElement.EndPaint(ps)
            Handled = True     ' swallow up the event
        End Sub
                
        Private Sub HandleMouseDown(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseDown
            
            ' ForwardMouseDown has already forwarded the message on to the actual control handler
            If Me.OLEDragMode = vbOLEDragAutomatic Then
                If Me.Picture IsNot Nothing Then
                	If CommonDragDetect(RootWindowElement) Then
                        If CommonOLEDrag(Me, Me.Picture, False, True) = vbDropEffectMove Then
                            Set Me.Picture = Nothing
                        End If
                	End If
                End If
            End If
        End Sub
                    
        Private Sub InternalRaiseResize() _
                Implements TbCommonContainerPrivate.RaiseResize
            
            'Debug.Print "PictureBox InternalRaiseResize"
            'Refresh
        	RaiseEvent Resize()
        End Sub
        
        Private Sub InternalRaiseChange() _
                Implements TbCommonContainerPrivate.RaiseChange
            
            _DataFieldBinderBase.OnDataChanged()
        	RaiseEvent Change()
        End Sub

        Private Sub InternalRaisePaint() _
                Implements TbCommonContainerPrivate.RaisePaint
            
        	RaiseEvent Paint()
        End Sub

        Public Sub Refresh()
            If Me.AutoRedraw = True Then
                Me.CopyBufferToDC(Me.RealHDC)
            Else
            	CommonRedrawEraseInvalidate(Me.RootWindowElement)
            End If
        End Sub
        
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
                        
        Private Sub BorderStyleChanged() _  
        	    Handles BorderStyle.OnPropertyLet
                
            SyncBorderStyle(Me)
        End Sub
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Get _Default() As Variant
        	Dim Picture As Any = Me.Picture
            If Picture IsNot Nothing Then
            	Return Picture
            End If
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Let _Default(ByVal Value As Variant)
            Set Me.Picture = CType(Of StdPicture)(Value)
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Set _Default(ByVal Value As Variant)
            Set Me.Picture = CType(Of StdPicture)(Value)
        End Property
        
        [Serialize(False)]
        Public Property Get ToolTipText() As String
            Return CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).ToolTipText
        End Property
    
        [Serialize(False)]
        Public Property Let ToolTipText(ByVal Value As String)
            CType(Of WinNativeFormsBASE.BaseControlInfo)(Me.InternalBaseControlInfoPtrX).ToolTipText = Value
            Me.RootWindowElementBase.ToolTipChanged()
        End Property
        
        Private Sub IUnsupportedInterface_UnsupportedInterfaceRequested(ByRef iid As WinNativeFormsBASE.GUID2, ByRef out As stdole.IUnknown) Implements IUnsupportedInterface.UnsupportedInterfaceRequested
            CommonHandleRedirectedPictureInterface(iid, out, Me)
        End Sub
        
        Private Sub _DataFieldBinderBase_SetLiveValue(fieldValue As Variant) Handles [_DataFieldBinderBase].SetLiveValue
            Dim newPic As StdPicture
            If IsNull(fieldValue) OrElse Len(fieldValue) = 0 Then
            Else
                Set newPic = CType(Of StdPicture)(Global.LoadPicture(fieldValue))
            End If
            Set Me.Picture = newPic
        End Sub
        
        Private Sub _DataFieldBinderBase_GetLiveValue(fieldValue As Variant) Handles [_DataFieldBinderBase].GetLiveValue
            fieldValue = PictureToByteArray(Me.Picture)
        End Sub
        
        Private Sub _DataFieldBinderBase_GetParent(out As Control) Handles [_DataFieldBinderBase].GetParent
            Set out = CType(Of Control)(Me.Parent)
        End Sub
        
        [Serialize(False)]
        [Hidden]
        Public Property Get Align() As VBRUN.AlignConstants
            Return CommonGetAlign(Me)
        End Property
        
        [Serialize(False)]
        [Hidden]
        Public Property Let Align(ByVal Value As VBRUN.AlignConstants)
            CommonLetAlign(Me, Value)
        End Property
        
        Private Sub TbCommonContainerPrivate_RaiseViewChanged()
        End Sub
        
        Private Sub TbCommonContainerPrivate_RebuildMenus()
        End Sub
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
        
    #End Region
    
End Class