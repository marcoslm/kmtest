Private Module DirListBoxGlobals
	Public DirListBoxImages() As OlePicture
End Module

[Description("A Win32 native DirListBox")]
[WindowsControl("/miscellaneous/ICONS??/DirListBox??.png")]
[ClassId("33AD4F58-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("52C476A1-862E-407D-94FF-3BFD93774E4A")]  ' FIXME implement {33AD4F51-6699-11CF-B70C-00AA0060D393} for backcompat
[COMCreatable(False)]
[EventsUseDispInterface]
[ComImport(True)]
Class DirListBox
    
    #Region "INHERITANCE"

        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlFocusable Via _BaseControl = New WinNativeFormsBASE.BaseControlFocusable(ControlTypeConstants.vbDirListBox)
 
    #End Region
        
    #Region "STATE"
    
        [Description("")]
            Public BorderStyle As VBRUN.ControlBorderStyleConstants = ControlBorderStyleConstants.vbFixedSingleBorder
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public BackColor As OLE_COLOR = VBRUN.SystemColorConstants.vbWindowBackground
        [CustomDesigner("designer_SpectrumWindows")]
        [Description("")]
            Public ForeColor As OLE_COLOR = VBRUN.SystemColorConstants.vbWindowText
        [Serialize(False)]
        [Description("")]
            Public NewIndex As Long

            Private CachedTopIndex As Long
            Private IsInitializing As Boolean
            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private OLEDragDropHandler As WinNativeFormsBASE.OLEDragDropHandler
            Private IsRefreshing As Boolean
            Private DirLevel As Long
            Private CachedPath As String
            Private HasSyncedIntegralHeight As Boolean
            
        Public HelpContextID As Long
        Public OLEDragMode As VBRUN.OLEDragConstants            ' Not implemented, but doesn't work in VB6 anyway
        
        [Description("")]
            Public ReadOnly IntegralHeight As Boolean = True

        [CustomDesigner("designer_RestrictedOLEDropMode")]
            Public OLEDropMode As VBRUN.OLEDropConstants

            Public WhatsThisHelpID As Long

        [Description("VB6 doesn't trigger the Scroll event for mouse-wheel events.  Set this to True to generate Scroll events in response to mouse-wheel notifications")]
            Public WheelScrollEvent As Boolean = True
            
        [Description("Opacity, given as a percentage, 0 - 100.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
            Public Opacity As Double = 100
        
        [CustomDesigner("designer_SpectrumWindowsOrClear")]
        [Description("A color, when set, that will appear fully transparent in the window.  REQUIRES TARGET OS 6.2+ FOR CHILD CONTROLS.")]
            Public TransparencyKey As OLE_COLOR = -1
        

        Public Sub OLEDrag()
            CommonOLEDrag(Me)
        End Sub
                        
        Public Sub ShowWhatsThis()
            HelpSystem.ShowControlHelpManual(Me)
        End Sub
                        
    #End Region

    #Region "EVENTS"
    
        [Description("")]
        [DispId(&HEAEA0004)]
            Event Click()
        [DefaultDesignerEvent]
        [Description("")]
            Event Change()
        [Description("")]
        [DispId(&HEAEA0006)]
            Event GotFocus()
        [Description("")]
        [DispId(&HEAEA0008)]
            Event KeyDown(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0009)]
            Event KeyPress(KeyAscii As Integer)
        [Description("")]
        [DispId(&HEAEA000A)]
            Event KeyUp(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0001)]
            Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0002)]
            Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0003)]
            Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0007)]
            Event LostFocus()
        [Description("")]
            Event Initialize()
        [Description("")]
        [DispId(&HEAEA000B)]
            Event DragDrop(Source As Control, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA000C)]
            Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        Event OLECompleteDrag(Effect As Long)
        Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        Event OLESetData(Data As DataObject, DataFormat As Integer)
        Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)
        [DispId(&HEAEA000D)]
            Event Validate(Cancel As Boolean)
        Event Scroll()
        
    #End Region

    #Region "MEMBERS"
        
        #If LOG_TERMINATE Then
            Private Sub Class_Terminate()
                    Debug.Print CurrentComponentName & "." & CurrentProcedureName
            End Sub
        #End If
        
        Private Sub InitImages()
            On Error Resume Next

            ' Here we map a package resource into a constant Variant
            ' so that we can continue to use resources in the package, yet access them just like byte arrays at runtime
            ' This is very efficient.  The resource will not exist as an ordinary resource in the output PE file.
            Const ImageData_FOLDER_CLOSED As Variant = LoadResDataInternal("FOLDER_CLOSED.emf", "OTHER")
            Const ImageData_FOLDER_OPEN As Variant = LoadResDataInternal("FOLDER_OPEN.emf", "OTHER")

            If IsArrayInitialized(DirListBoxGlobals.DirListBoxImages) = False Then
                ReDim DirListBoxGlobals.DirListBoxImages(0 To 2) As OlePicture
                Set DirListBoxGlobals.DirListBoxImages(0) = CType(Of OlePicture)(Global.LoadPicture(ImageData_FOLDER_CLOSED))
                Set DirListBoxGlobals.DirListBoxImages(1) = CType(Of OlePicture)(Global.LoadPicture(ImageData_FOLDER_OPEN))
            End If
        End Sub
        
        Private Sub HandleLoad() _
                Handles RootWindowElement.Load
            
            Dim Opacity As Any = Me.Opacity
            If ((Opacity >= 0) And (Opacity < 100)) Or (TransparencyKey <> -1) Then
                SyncOpacity
            End If
        End Sub
        
        Private Sub SyncOpacity() _ 
                Handles Opacity.OnPropertyLet, _
                        TransparencyKey.OnPropertyLet
            
            CommonSyncOpacity(Me.TransparencyKey, Me.Opacity, Me.RootWindowElement.Handle)
        End Sub
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
                
            Me.InternalStateReset()     ' resets all the base class state
            Me.NewIndex = -1
            Me.CachedTopIndex = 0
            Me.IsInitializing = True
            Me.IsRefreshing = False
            Me.DirLevel = 0
            Me.CachedPath = vbNullString
            Me.HasSyncedIntegralHeight = False
            
            With ControlContext.GetSerializer
                If Not .Deserialize(Me) Then
                    'Caption_INIT = "DirListBox"
                End If
                'IsDesignMode = .IsDesignMode
            End With
            
            Dim Opacity As Any = Me.Opacity
            If Opacity > 100 Then Me.Opacity = 100
            If Opacity < 0 Then Me.Opacity = 0
            
            InitImages()
            
            Dim styles2 As Long = ListBoxStyles.LBS_NOTIFY + CLng(WinNativeFormsBASE.WindowStyles.WS_VSCROLL)
            
            Dim styles As Long = ListBoxStyles.LBS_NOTIFY + _
                            CLng(WinNativeFormsBASE.WindowStyles.WS_VSCROLL) + _
                            ListBoxStyles.LBS_OWNERDRAWFIXED + _
                            ListBoxStyles.LBS_HASSTRINGS + _
                             If(Me.IntegralHeight = False, ListBoxStyles.LBS_NOINTEGRALHEIGHT, 0&)
            Dim extendedStyles As Long = If(ControlContext.IsPlacedOnUserControl, 0&, WinNativeFormsBASE.GeneralConsts.WindowExtendedStyles.WS_EX_NOPARENTNOTIFY)
                            
                If Me.BorderStyle = ControlBorderStyleConstants.vbFixedSingleBorder Then
                    If _BaseControl.Appearance = AppearanceConstants.vbAppear3d Then
                        extendedStyles += WinNativeFormsBASE.WS_EX_CLIENTEDGE
                    Else
                        styles += WinNativeFormsBASE.GeneralConsts.WindowStyles.WS_BORDER
                    End If
                End If
                
            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InitData.ClassName = "ThunderListBox"
            InitData.Caption = ""
            InitData.WindowStyles = styles
            InitData.ExtendedStyles = extendedStyles
            InitData.Flags = NeedsPrePostMessages Or _
                                ForwardGotFocus Or _
                                ForwardLostFocus Or _
                                ForwardKeyDown Or _
                                ForwardKeyUp Or _
                                ForwardKeyPress Or _
                                ForwardMouseDown Or _
                                ForwardMouseMove Or _
                                ForwardMouseUp Or _
                                ForwardDragOver Or _
                                ForwardValidate
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
        End Sub
        
        Private Sub HandleGetColors(ByVal hdc As LongPtr, ByRef BackBrushOut As LongPtr, ByVal ControlType As ControlTypeConstants) _
                Handles RootWindowElement.GetColors
                
            HandleGetColorsCommon(hdc, BackBrushOut, Me)
        End Sub
        
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
                
            ' disconnect anything that causes a circular reference here
            Set Me.Font = Nothing
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub
        
        Private Function GetCustomDrawnHeight() As Long
            Dim TextMetrics As WinNativeFormsBASE.TEXTMETRIC = GetFontMetrics()
            Const FontPadding As Long = 4
            'Debug.Print Me.Name & ": " & (TextMetrics.TMHeight + TextMetrics.TMExternalLeading + FontPadding)
            Return TextMetrics.TMHeight + TextMetrics.TMExternalLeading + FontPadding
        End Function
        
        Private Sub MeasureItem(ByRef Info As WinNativeFormsBASE.MEASUREITEMSTRUCT, ByRef Handled As Boolean) _
                Handles RootWindowElement.MeasureItem
 
            'Debug.Print Me.Name & ": " & "MeasureItem"
            ' Careful! This occurs BEFORE the Create event, so the windows font has not yet been set!
            Info.ItemHeight = GetCustomDrawnHeight()
        End Sub
                 
        Private Sub DrawItem(ByRef Info As WinNativeFormsBASE.DRAWITEMSTRUCT, ByRef Handled As Boolean) _
                Handles RootWindowElement.DrawItem
 
            If Info.CtlType = WinNativeFormsBASE.OwnerDrawTypes.ODT_LISTBOX And Info.ItemID > -1 Then
                
                'MsgBox "DrawItem" & List(0)
                
                Dim itemHeight As Long = Info.RCItem.Bottom - Info.RCItem.Top
                
                Dim backColor As OLE_COLOR
                Dim textColor As OLE_COLOR
                
                Dim InfoItemState As Any = Info.ItemState
                If InfoItemState And WinNativeFormsBASE.OwnerDrawState.ODS_DISABLED Then
                    backColor = Me.BackColor
                    textColor = vbGrayText
                ElseIf InfoItemState And WinNativeFormsBASE.OwnerDrawState.ODS_SELECTED Then
                    backColor = vbHighlight
                    textColor = vbHighlightText
                Else
                    backColor = Me.BackColor
                    textColor = Me.ForeColor
                End If
                
                Dim Info_hDC As Any = Info.hDC
                CommonFillRect(Info_hDC, Info.RCItem, backColor)
                
                Const VPADDING_IMAGE As Long = 2
                Const HPADDING_IMAGE As Long = 5
                Const HPADDING_TEXT As Long = 5
                
                Dim dirLevel As Long = CLng(Info.ItemData)
                Dim pic As IPicture = DirListBoxGlobals.DirListBoxImages(If(dirLevel = Me.DirLevel, 0, 1))
                With pic
                    ' The icon is scaled to the item height
                    Dim horzProportional As Double = .Width / .Height
                    Dim iconWidth As Long = CLng((itemHeight - (VPADDING_IMAGE * 2)) * horzProportional)
                    Dim HPADDING_LEVEL As Long = CLng(iconWidth / 2)

                    'Dim newBmp As LongPtr = RuntimeCreateResampledBitmap(Info_hDC, pic.Handle, iconWidth, itemHeight - (VPADDING_IMAGE * 2), vbStretchBicubic - 2)
                    'Dim resampledPic As IPicture = CType(Of IPicture)([_HiddenModule].CreateStdPictureFromHandle(newBmp, vbPicTypeBitmap, True))
                    
                    Dim Info_hDC32 As Long
                    GetMem4(VarPtr(Info_hDC), Info_hDC32)
                    .Render(Info_hDC32, HPADDING_IMAGE + (HPADDING_LEVEL * dirLevel), VPADDING_IMAGE + Info.RCItem.Top, iconWidth, itemHeight - (VPADDING_IMAGE * 2), 0, .Height, .Width, -.Height, vbNullPtr)
                    'Render.PictureRender(resampledPic, Info_hDC, HPADDING_IMAGE + (HPADDING_LEVEL * dirLevel), VPADDING_IMAGE + Info.RCItem.Top, iconWidth, itemHeight - (VPADDING_IMAGE * 2), 0, resampledPic.Height, resampledPic.Width, -resampledPic.Height, True)
                End With
                
                Info.RCItem.Left += HPADDING_IMAGE + HPADDING_TEXT + (HPADDING_LEVEL * dirLevel) + iconWidth
                  
                CommonTextOut(Info_hDC, Me.ListRaw(Info.ItemID), textColor, CLng(Info.RCItem.Left + (1 * (RootWindowElement.DPI / 96))), Info.RCItem.Top)
            End If
            
        End Sub
        
        Private Sub HandleCreate() _
                Handles RootWindowElement.Create
            
            'Stop
            ' Set the font into the control first.  If IntegralHeight is active, then the control will adjust accordingly.
            SyncFontProperties()
            If Me.IntegralHeight Then
                Me.InternalSyncHeight()
            End If
            
            SyncDirs(App.Path, True, False)
               
            SyncOLEDropMode()
            
            RaiseEvent Initialize()
            IsInitializing = False
        End Sub
    
        Sub SyncDirs(Path As String, ForceRefresh As Boolean, ChangeSelected As Boolean)
        	            
            Dim RootWindowElement As Any = Me.RootWindowElement
            If IsRefreshing = True Then Exit Sub
            If Left(Path, 4) = "\\?\" Then Path = Right$(Path, Len(Path) - 4)
                                   
            ' Handle the cases of `c: [whatever]`, being passed directly from the DriveListBox
            If (Mid(Path, 2, 3) = ": [") And (Right(Path, 1) = "]") Then
            	Path = Left$(Path, 2)
            End If
            
            If Right(Path, 1) <> "\" Then Path += "\"

            If ForceRefresh = False AndAlso Path = CachedPath Then Exit Sub
            IsRefreshing = True

            On Error GoTo InvalidPath
            
                ' Before emptying the list, first check the path is valid...
                If (GetAttr(Path) And vbDirectory) = 0 Then Err.Raise 76
                
                SendMessageCtl(ListBoxMessages.LB_RESETCONTENT, 0, 0)
                CachedPath = Path

                Dim pathArray As Variant = Split(Path, "\")
                Dim pathIndex As Long = 0
                
                If Len(pathArray(0)) = 0 Then
                    If Len(pathArray(1)) = 0 Then
                        ' a network path.  combine the first and second parts, e.g. '\\localhost\z', as that is how VB displays it
                        pathArray(3) = "\\" & pathArray(2) & "\" & pathArray(3)
                        pathIndex = 3
                    End If
                End If
                
                Me.DirLevel = 0
                While pathIndex < UBound(pathArray)
                    Dim pathPart As String = CStr(pathArray(pathIndex))
                    If Len(pathPart) = 0 Then
                        Err.Raise 76
                    ElseIf pathPart = "." Then
                        ' refers to the current directory, VB ignores this for display purposes.
                    ElseIf pathPart = ".." Then
                        ' refers to the parent directory
                        SendMessageCtl(ListBoxMessages.LB_DELETESTRING, Me.ListCountRaw - 1, 0)        ' remove the last item
                        Me.DirLevel -= 1
                    Else
                        If pathIndex = 0 And Right(pathPart, 1) = ":" Then pathPart += "\"
                        Me.NewIndex = CommonListboxAddOrInsert(RootWindowElement, pathPart)
                        ItemData(Me.ListCountRaw - 1) = Me.DirLevel
                        Me.DirLevel += 1
                    End If
                    pathIndex += 1
                Wend
 
                On Error Resume Next
                Dim currentItem As String = Dir(Path & "*.*", vbDirectory)
                While Len(currentItem) > 0
                    If (currentItem <> ".") And (currentItem <> "..") Then
                        If GetAttr(Path & currentItem) And vbDirectory Then
                            Me.NewIndex = CommonListboxAddOrInsert(RootWindowElement, currentItem)
                            ItemData(Me.ListCountRaw - 1) = Me.DirLevel
                        End If
                    End If
                    currentItem = Dir()
                Wend
                
                If ChangeSelected Then
                    If Me.DirLevel > 0 Then
                        Me.ListIndex = -1 ' -1 represents the current folder, 0 represents the first child
                    End If
                End If
                
                If IsInitializing = False Then
                    RaiseEvent Change()
                End If
                
        ExitCleanup:
            IsRefreshing = False
            Exit Sub
            
        InvalidPath:
            Err.Raise 76, , "Path not found"
            Resume ExitCleanup

        End Sub
        
        Private Sub HandleCommand(ByVal NotificationCode As ListBoxNotifications, _
                                    ByVal Identifier As Integer) _
                Handles RootWindowElement.Command
                
            Select Case NotificationCode
                Case ListBoxNotifications.LBN_SELCHANGE
                    CheckTopIndexChanged()
                    RaiseEvent Click()
                Case ListBoxNotifications.LBN_SELCANCEL
                    RaiseEvent Click()
                Case ListBoxNotifications.LBN_DBLCLK
                    'Debug.Print "DirListBox DblClick: " & Me.PathSelected
                    SyncDirs(Me.PathSelected, False, True)
            End Select
        End Sub
                
        [Hidden]
        Public Sub AddItem(ByVal Value As String, Optional ByVal Index As Variant)
            Err.Raise 438
        End Sub
        
        [Hidden]
        Public Sub RemoveItem(ByVal Index As Variant)
            Err.Raise 438
        End Sub
        
        [Hidden]
        Public Sub Clear()
            Err.Raise 438
        End Sub
                
        [Serialize(False)]
        Private Property Get ItemData(ByVal Index As Long) As LongPtr
            ' FIXME error if out of range
            ' Note Index is limited to 32767 due to Win95/98/ME support (see docs for LB_GETTEXT)
            ' FIXME In the official matching _ListBox interface, we need to change Index to Integer
            Return SendMessageCtl(ListBoxMessages.LB_GETITEMDATA, Index, 0)
        End Property
        
        [Serialize(False)]
        Private Property Let ItemData(ByVal Index As Long, ByVal Value As LongPtr)
            ' FIXME error if out of range
            SendMessageCtl(ListBoxMessages.LB_SETITEMDATA, Index, Value)
        End Property
        
        [Serialize(False)]
        Public Property Get List(ByVal Index As Long) As String
            ' FIXME error if out of range
            ' Note Index is limited to 32767 due to Win95/98/ME support (see docs for LB_GETTEXT)
            ' FIXME In the official matching _ListBox interface, we need to change Index to Integer
            Index += Me.DirLevel
            Return ListRaw(Index)
        End Property

        [Serialize(False)]
        Private Property Get ListRaw(ByVal Index As Long) As String
            Return CommonGetListBoxStringByIndex(Me.RootWindowElement, Index)
        End Property
        
        [Serialize(False)]
        Public Property Get ListCount() As Long
            Return ListCountRaw - Me.DirLevel
        End Property
        
        [Serialize(False)]
        Private Property Get ListCountRaw() As Long
            Return CLng(SendMessageCtl(ListBoxMessages.LB_GETCOUNT, 0, 0))
        End Property
        
        [Serialize(False)]
        Public Property Get TopIndex() As Long
            Return CLng(SendMessageCtl(ListBoxMessages.LB_GETTOPINDEX, 0, 0)) - Me.DirLevel
        End Property
        
        [Serialize(False)]
        Public Property Let TopIndex(ByVal Value As Long)
            Value += Me.DirLevel
            SendMessageCtl(ListBoxMessages.LB_SETTOPINDEX, Value, 0)
        End Property
        
        [Serialize(False)]
        Public Property Get ListIndex() As Long
            Return CLng(SendMessageCtl(ListBoxMessages.LB_GETCURSEL, 0, 0)) - Me.DirLevel
        End Property
        
        [Serialize(False)]
        Public Property Let ListIndex(ByVal Value As Long)
        	Value += Me.DirLevel
            If Me.ListIndex <> Value Then
            SendMessageCtl(ListBoxMessages.LB_SETCURSEL, Value, 0)
            End If
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Get _Default() As String
            Return Path
        End Property
        
        [Serialize(False)]
        [DefaultMember]
        Public Property Let _Default(Value As String)
            Path = Value
        End Property
        
        [Serialize(False)]
        Public Property Get Path() As String
            Dim fullPath As String
            Dim dirLevel As Long
            While dirLevel < Me.DirLevel
                Dim pathPart As String = ListRaw(dirLevel)
                fullPath += pathPart & If(Right(pathPart, 1) <> "\", "\", "")
                dirLevel += 1
            Wend
            If dirLevel > 1 Then
                fullPath = Left$(fullPath, Len(fullPath) - 1)
            End If
            Return fullPath
        End Property
        
        [Serialize(False)]
        Public Property Get PathSelected() As String
            Dim fullPath As String
            Dim listIndex As Any = Me.ListIndex
            
            If listIndex < 0 Then
                listIndex += Me.DirLevel
                While listIndex >= 0
                    Dim pathPart2 As String = ListRaw(listIndex)
                    fullPath = pathPart2 & If(Right(pathPart2, 1) <> "\", "\", "") & fullPath
                    listIndex -= 1
                Wend
                Return fullPath
            End If
            
            Dim dirLevel As Long = CLng(ItemData(listIndex + Me.DirLevel))
            While dirLevel > 0
                dirLevel -= 1
                Dim pathPart As String = ListRaw(dirLevel)
                fullPath = pathPart & If(Right(pathPart, 1) <> "\", "\", "") & fullPath
            Wend
            Return fullPath & List(listIndex)
        End Property
        
        [Serialize(False)]
        Public Property Let Path(ByVal Value As String)
            SyncDirs(Value, False, False)
        End Property
        
        Private Sub ColorsChanged() _
                Handles BackColor.OnPropertyLet, _
                        ForeColor.OnPropertyLet
            
            Me.Refresh
        End Sub
        
        Private Sub BorderStyleChanged() _  
        	    Handles BorderStyle.OnPropertyLet
                
            SyncBorderStyle(Me)
        End Sub
        
        Public Sub Refresh()
            Me.SyncDirs(CachedPath, True, False)
            CommonRedrawEraseInvalidate(RootWindowElement)
        End Sub
        
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
        
        Private Function CheckTopIndexChanged() As Boolean
            Dim topIndex As Long = Me.TopIndex
            If CachedTopIndex <> topIndex Then
                CachedTopIndex = topIndex
                RaiseEvent Scroll
                Return True
            End If
            Return False
        End Function

        Private Sub PostProcessMessage(ByVal Message As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByRef ReturnValue As LongPtr, ByVal PostMessageCookie As Long) _
                Handles RootWindowElement.PostProcessMessage

            Select Case Message
                Case ListBoxMessages.LB_SETTOPINDEX
                    CheckTopIndexChanged()
            End Select
        End Sub
        
        Private Sub HandleScroll(ByVal ScrollType As WinNativeFormsBASE.SCROLLNOTIFY, ByVal IsHorizontal As Boolean) _
                Handles RootWindowElement.Scroll
             
            If IsHorizontal = False Then
                If CommonHandleVerticalScroll(Me.RootWindowElement, ScrollType, Me.ListCount) = True Then
                    Dim Value As Long = WinNativeFormsBASE.WindowsAPI.USER32_GetScrollValue(Me.RootWindowElement, WinNativeFormsBASE.SB_VERT)
                    SendMessageCtl(ListBoxMessages.LB_SETTOPINDEX, Value, 0)
                End If
            End If
            
            'CheckTopIndexChanged()
        End Sub
        
        Private Sub HandleWheel(ByVal Delta As Integer, ByVal Horizontal As Boolean) _
                Handles RootWindowElement.MouseWheel
                
            If Horizontal = False Then
                If WheelScrollEvent Then CheckTopIndexChanged()
            End If
        End Sub
                
        Private Sub SyncOLEDropMode() _
                Handles OLEDropMode.OnPropertyLet
                
            BaseSyncOLEDropMode(Me, Me.OLEDropMode, Me.OLEDragDropHandler, False, False)
        End Sub
        
        Private Sub RootWindowElement_Paint(Handled As Boolean)
            If HasSyncedIntegralHeight = False Then
                If Me.IntegralHeight Then
                    Me.InternalSyncHeight()
                End If
                HasSyncedIntegralHeight = True
            End If
        End Sub
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
                
    #End Region
    
End Class