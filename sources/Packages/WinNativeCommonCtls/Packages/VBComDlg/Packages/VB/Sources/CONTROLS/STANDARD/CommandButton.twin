[Description("A Win32 native CommandButton")]
[WindowsControl("/miscellaneous/ICONS??/CommandButton??.png")]
[ClassId("33AD4EF0-6699-11CF-B70C-00AA0060D393")]
[InterfaceId("671DD54E-4636-4003-B584-1692B5C8A706")]    ' FIXME implement {33AD4EF1-6699-11CF-B70C-00AA0060D393} for backcompat
[COMCreatable(False)]
[EventsUseDispInterface]
[ComImport(True)]
Class CommandButton
     
    #Region "INHERITANCE"

        [WithDispatchForwarding] Implements Control
        Implements WindowsControls.IWindowsControl
        [ImplementsViaPrivateFriendlies] Implements WinNativeFormsBASE.BaseControlFocusable Via _BaseControl = New WinNativeFormsBASE.BaseControlFocusable(ControlTypeConstants.vbCommandButton)
        [ImplementsViaPrivateFriendlies] Implements ButtonBase Via _ButtonBase = New ButtonBase

    #End Region
            
    #Region "STATE"
            
        [CustomDesigner("designer_MultiLineText")]
        [Serialize(True, "Caption")]
            Private Caption_INIT As String

            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private OLEDragDropHandler As WinNativeFormsBASE.OLEDragDropHandler

        [CustomDesigner("designer_RestrictedOLEDropMode")]
            Public OLEDropMode As VBRUN.OLEDropConstants
            
        Public Cancel As Boolean
        
        Public Default As Boolean

            Public HelpContextID As Long
        [Unimplemented]
            Public RightToLeft As Boolean

            Public WhatsThisHelpID As Long
            
        [Serialize(False)]
            Public Value As Boolean

        Public Sub OLEDrag()
            CommonOLEDrag(Me)
        End Sub
        
        Public Sub ShowWhatsThis()
            HelpSystem.ShowControlHelpManual(Me)
        End Sub
            
    #End Region

    #Region "EVENTS"
    
        [DefaultDesignerEvent]
        [Description("")]
        [DispId(&HEAEA0004)]
            Event Click()
        [Description("")]
        [DispId(&HEAEA0006)]
            Event GotFocus()
        [Description("")]
        [DispId(&HEAEA0008)]
            Event KeyDown(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0009)]
            Event KeyPress(KeyAscii As Integer)
        [Description("")]
        [DispId(&HEAEA000A)]
            Event KeyUp(KeyCode As Integer, Shift As Integer)
        [Description("")]
        [DispId(&HEAEA0007)]
            Event LostFocus()
        [Description("")]
        [DispId(&HEAEA0001)]
            Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0002)]
            Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA0003)]
            Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [Description("")]
            Event Initialize()
        [Description("")]
        [DispId(&HEAEA000B)]
            Event DragDrop(Source As Control, X As Single, Y As Single)
        [Description("")]
        [DispId(&HEAEA000C)]
            Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        
        Event OLECompleteDrag(Effect As Long)
        Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        Event OLESetData(Data As DataObject, DataFormat As Integer)
        Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)

    #End Region
               
    #Region "MEMBERS"
            
        #If LOG_TERMINATE Then
            Private Sub Class_Terminate()
                    Debug.Print CurrentComponentName & "." & CurrentProcedureName
            End Sub
        #End If
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
        
            Me.InternalStateReset()     ' resets all the base class state
            Me.InternalStateResetButton()

            Me.Value = False
            
            With ControlContext.GetSerializer
                If Not .Deserialize(Me) Then
                    Caption_INIT = "Button"
                End If
                'Me.IsDesignMode = .IsDesignMode
            End With
            
            _ButtonBase.HandleInitialize()
            
            Dim InitData As WinNativeFormsBASE.WindowCreationData
            InitData.ClassName = "ThunderCommandButton"
            InitData.Caption = Me.Caption_INIT
            InitData.WindowStyles = GetStyles()
            InitData.ExtendedStyles = If(ControlContext.IsPlacedOnUserControl, 0&, WinNativeFormsBASE.GeneralConsts.WindowExtendedStyles.WS_EX_NOPARENTNOTIFY)
            InitData.Flags = ForwardGotFocus Or _
                            ForwardLostFocus Or _
                            ForwardKeyDown Or _
                            ForwardKeyUp Or _
                            ForwardKeyPress Or _
                            ForwardMouseMove Or _
                            ForwardMouseDown Or _
                            ForwardMouseUp Or _
                            ForwardDragOver Or _
                            HasExclusiveCancelProp Or _
                            HasExclusiveDefaultProp
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, InitData)
            
        End Sub
        
        Private Function GetStyles() As Long
            Dim styles As Long
            Dim bsStyles As Long
        	If _ButtonBase.Style = ButtonConstants.vbButtonGraphical Then
                bsStyles = ButtonStyles.BS_OWNERDRAW
            Else
                bsStyles = ButtonStyles.BS_MULTILINE
            End If
            Return styles + bsStyles
        End Function
        
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
                
            ' disconnect anything that causes a circular reference here
            'Debug.Print "CommandButton::Destroy"
            If OLEDragDropHandler IsNot Nothing Then OLEDragDropHandler.Disconnect()
            Set Me.Font = Nothing
            [_HiddenModule].ResetFirstMethodAccessFlag(Me)
        End Sub
        
        Private Sub HandleCreate() _
                Handles RootWindowElement.Create
            
            Me.InitializeBASE(Me.RootWindowElement, Me.ControlContext, Me)
            
            If Cancel = True Then CancelChanged()
            If Default = True Then DefaultChanged()

            SyncOLEDropMode()
            
            RaiseEvent Initialize()
        End Sub
        
        Private Sub SyncRecreate()
            Dim Caption As String = Me.Caption
            RecreateWindow(GetStyles())
            Me.Caption = Caption
        End Sub
        
        Private Sub HandleGetColors(ByVal hdc As LongPtr, ByRef BackBrushOut As LongPtr, ByVal ControlType As ControlTypeConstants) _
                Handles RootWindowElement.GetColors
                
            If _ButtonBase.Style <> vbButtonGraphical Then
                WinNativeFormsBASE.WindowsAPI.GDI32_SetBackMode(hdc, WinNativeFormsBASE.BackgroundModes.TRANSPARENT)
                BackBrushOut = Me.CreateBackBrush(_ButtonBase.BackColor)
            End If
        End Sub
                            
        [Serialize(False)]
        Public Property Get Caption() As String
            Return GetWindowTextCtl()
        End Property
        
        [Serialize(False)]
        Public Property Let Caption(ByVal Value As String)
            SendMessageCtl(WinNativeFormsBASE.WM_SETTEXT, 0, StrPtrSafe(Value))
        End Property
                
        [Serialize(False)]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
        
        Private Sub HandleDrawItem(ByRef Info As WinNativeFormsBASE.DRAWITEMSTRUCT, Handled As Boolean) _
                Handles RootWindowElement.DrawItem
            
            HandleDrawItem_BASE(Info, Handled, False, True)
        End Sub
        
        Private Sub SyncOLEDropMode() _
                Handles OLEDropMode.OnPropertyLet
                
            BaseSyncOLEDropMode(Me, Me.OLEDropMode, Me.OLEDragDropHandler, False, False)
        End Sub
        
        Private Sub ValueChanged() _
                Handles Value.OnPropertyLet
            If Value = True Then RaiseClickEvent()
        End Sub
                
        Private Sub RaiseClickEvent()
            Me.Value = True
            RaiseEvent Click()
            Me.Value = False
         End Sub
         
         Private Sub RootWindowElement_Command(ByVal NotificationCode As Long, ByVal Identifier As Integer)
            If NotificationCode = ButtonConsts.BN_CLICKED Then RaiseClickEvent()
         End Sub
         
         Private Sub RootWindowElement_Load()
             _ButtonBase.HandleLoad()
         End Sub
         
         Private Sub CancelChanged() _
                Handles Cancel.OnPropertyLet
             
             RootWindowElement.SetCancelControl(Cancel)
         End Sub
        
         Private Sub DefaultChanged() _
                Handles Default.OnPropertyLet

             RootWindowElement.SetDefaultControl(Default)
             WinNativeFormsBASE.USER32_SetStyleFlag(RootWindowElement, BS_DEFPUSHBUTTON, Default)
         End Sub
         
         Private Sub InvokeCancel() _
                Handles RootWindowElement.InvokeCancel

             RaiseEvent Click()
         End Sub
         
         Private Sub InvokeDefault() _
                Handles RootWindowElement.InvokeDefault

             If WinNativeFormsBASE.USER32_GetStyleFlag(RootWindowElement, BS_DEFPUSHBUTTON) Then
                RaiseEvent Click()
             End If
         End Sub
         
         Private Sub RootWindowElement_RevokeCancel()
            Cancel = False
         End Sub
         
        Private Sub RootWindowElement_RevokeDefault()
            Default = False
            WinNativeFormsBASE.USER32_SetStyleFlag(RootWindowElement, BS_DEFPUSHBUTTON, False)
        End Sub
        
        [DefaultMember]
        Public Property Get _Default() As Boolean
            Return Value
        End Property
            
        [DefaultMember]
        Public Property Let _Default(ByVal Value As Boolean)
            Me.Value = Value
            ValueChanged()
        End Property
        
        Private Sub Class_BeforeFirstMethodAccess()
            'Debug.Print CurrentComponentName & "." & CurrentProcedureName
            [_HiddenModule].EnsureContainerIsLoaded(Me)
        End Sub
         
    #End Region
    
End Class