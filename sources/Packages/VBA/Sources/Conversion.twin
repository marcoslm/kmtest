Module Conversion
 
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Replaces a Null value with the specified replacement value.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = Nz(Value, [ValueIfNull])`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Value` (Variant): The value to check for Null.  " & vbCrLf & _
                    "`ValueIfNull` (Variant): [Optional] The value to return if `Value` is Null. If omitted, the function returns `Empty`).  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "The non-Null value of the `Value` parameter or the `ValueIfNull` parameter if `Value` is Null.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example: Using Nz with a database recordset field that could be Null" & vbCrLf & _
                    "Dim customerName As Variant" & vbCrLf & _
                    "customerName = recordset.Fields(""Name"").Value" & vbCrLf & _
                    "MsgBox ""Customer Name: "" & Nz(customerName, ""Unknown"")" & vbCrLf & _
                    "```")]
    Public DeclareWide PtrSafe Function Nz Lib "<conversion>" Alias "#1" (ByRef Value As Variant, Optional ByRef ValueIfNull As Variant) As Variant

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("")]
    Public DeclareWide PtrSafe Function MacID Lib "<conversion>" Alias "#2" (ByVal Constant As String) As Long

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns a string that corresponds to an error number.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`errorMsg = Error$([ErrorNumber])`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`ErrorNumber` (Variant): [Optional] The error number you want to get the error message for. If omitted, the function returns `vbNullString`.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A string that describes the error number.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example: Retrieve the error message for a specific error number" & vbCrLf & _
                    "MsgBox Error$(1004)" & vbCrLf & _
                    "```")]
    Public DeclareWide PtrSafe Function [Error$] Lib "<conversion>" Alias "#3" (Optional ByRef ErrorNumber As Variant) As String

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns a Variant (sub type String) that corresponds to an error number.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`errorMsg = Error([ErrorNumber])`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`ErrorNumber` (Variant): [Optional] The error number you want to get the error message for. If omitted, the function returns `vbNullString`.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Variant (sub type String) that describes the error number.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example: Retrieve the error message for a specific error number" & vbCrLf & _
                    "MsgBox Error(1004)" & vbCrLf & _
                    "```")]
    Public DeclareWide PtrSafe Function Error Lib "<conversion>" Alias "#4" (Optional ByRef ErrorNumber As Variant) As Variant

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldableNumericsOnly]
    [Description("Converts a user-defined value into a Variant of subtype Error." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = CVErr(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Variant): The numeric expression representing the error you want to generate." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a Variant of subtype Error containing an error number specified by the user." & vbCrLf & _
                    "### Remarks" & vbCrLf & _
                    "Useful for creating custom error conditions." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example: Generating a custom error" & vbCrLf & _
                    "Dim customError As Variant" & vbCrLf & _
                    "customError = CVErr(2015)" & vbCrLf & _
                    "MsgBox ""The generated error value is: "" & customError" & vbCrLf & _
                    "```")]
    Public DeclareWide PtrSafe Function CVErr Lib "<conversion>" Alias "#5" (ByRef Expression As Variant) As Variant

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldableNumericsOnly]
    [Description("Returns the integer portion of a number.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = Fix(Number)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Number` (Variant): The numeric expression to evaluate.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Variant containing an integer that represents the integer portion of the number.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example: Using Fix to obtain the integer portion of a number" & vbCrLf & _
                    "Dim someNumber As Double" & vbCrLf & _
                    "someNumber = 99.56" & vbCrLf & _
                    "MsgBox ""Integer portion of "" & someNumber & "" is "" & Fix(someNumber)" & vbCrLf & _
                    "```")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function Fix Lib "<conversion>" Alias "#-28" (ByRef Number As Variant) As Variant

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldableNumericsOnly]
    [Description("Returns the integer portion of a number, always rounding down towards the more negative value.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = Int(Number)`  " & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Number` (Variant): The numeric expression to round down to an integer.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Variant containing an integer that is the integer portion of the number, rounded down towards the more negative value.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example 1: Using Int with a positive number" & vbCrLf & _
                    "Dim someNumber As Double" & vbCrLf & _
                    "someNumber = 99.56" & vbCrLf & _
                    "MsgBox ""Integer portion of "" & someNumber & "" is "" & Int(someNumber)" & vbCrLf & _
                    "  " & vbCrLf & _
                    "' Example 2: Using Int with a negative number" & vbCrLf & _
                    "Dim someNegativeNumber As Double" & vbCrLf & _
                    "someNegativeNumber = -99.56" & vbCrLf & _
                    "MsgBox ""Integer portion of "" & someNegativeNumber & "" is "" & Int(someNegativeNumber)" & vbCrLf & _
                    "```")]
                    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function Int Lib "<conversion>" Alias "#-29" (ByRef Number As Variant) As Variant

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldableNumericsOnly]
    [Description("Converts numbers to a String representing their hexadecimal value." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = Hex$(Number)`" & vbCrLf & _
                    "`result = Hex(Number)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Number` (Variant): The numeric expression to be converted. If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A String (`Hex$`) or Variant (`Hex`) containing the hexadecimal representation of the number." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example 1: Using Hex$ with a positive number" & vbCrLf & _
                    "Dim someNumber As Integer" & vbCrLf & _
                    "someNumber = 255" & vbCrLf & _
                    "MsgBox ""Hexadecimal of "" & someNumber & "" is "" & Hex$(someNumber)" & vbCrLf & _
                    "  " & vbCrLf & _
                    "' Example 2: Using Hex with a positive number" & vbCrLf & _
                    "MsgBox ""Hexadecimal of "" & someNumber & "" is "" & Hex(someNumber)" & vbCrLf & _
                    "```")]
    Public DeclareWide PtrSafe Function [Hex$] Lib "<conversion>" Alias "#8" (ByRef Number As Variant) As String

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldableNumericsOnly]
    [Description("Converts numbers to a String representing their hexadecimal value." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = Hex$(Number)`" & vbCrLf & _
                    "`result = Hex(Number)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Number` (Variant): The numeric expression to be converted. If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A String (`Hex$`) or Variant (`Hex`) containing the hexadecimal representation of the number." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example 1: Using Hex$ with a positive number" & vbCrLf & _
                    "Dim someNumber As Integer" & vbCrLf & _
                    "someNumber = 255" & vbCrLf & _
                    "MsgBox ""Hexadecimal of "" & someNumber & "" is "" & Hex$(someNumber)" & vbCrLf & _
                    "  " & vbCrLf & _
                    "' Example 2: Using Hex with a positive number" & vbCrLf & _
                    "MsgBox ""Hexadecimal of "" & someNumber & "" is "" & Hex(someNumber)" & vbCrLf & _
                    "```")]
    Public DeclareWide PtrSafe Function Hex Lib "<conversion>" Alias "#9" (ByRef Number As Variant) As Variant

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldableNumericsOnly]
    [Description("Converts numbers to a String representing their octal value." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = Oct$(Number)`" & vbCrLf & _
                    "`result = Oct(Number)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Number` (Variant): The numeric expression to be converted. If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A String (`Oct$`) or Variant (`Oct`) containing the octal representation of the number." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example 1: Using Oct$ with a positive number" & vbCrLf & _
                    "Dim someNumber As Integer" & vbCrLf & _
                    "someNumber = 255" & vbCrLf & _
                    "MsgBox ""Octal of "" & someNumber & "" is "" & Oct$(someNumber)" & vbCrLf & _
                    "  " & vbCrLf & _
                    "' Example 2: Using Oct with a positive number" & vbCrLf & _
                    "MsgBox ""Octal of "" & someNumber & "" is "" & Oct(someNumber)" & vbCrLf & _
                    "```")]
    Public DeclareWide PtrSafe Function [Oct$] Lib "<conversion>" Alias "#10" (ByRef Number As Variant) As String

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldableNumericsOnly]
    [Description("Converts numbers to a String representing their octal value." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = Oct$(Number)`" & vbCrLf & _
                    "`result = Oct(Number)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Number` (Variant): The numeric expression to be converted. If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A String (`Oct$`) or Variant (`Oct`) containing the octal representation of the number." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example 1: Using Oct$ with a positive number" & vbCrLf & _
                    "Dim someNumber As Integer" & vbCrLf & _
                    "someNumber = 255" & vbCrLf & _
                    "MsgBox ""Octal of "" & someNumber & "" is "" & Oct$(someNumber)" & vbCrLf & _
                    "  " & vbCrLf & _
                    "' Example 2: Using Oct with a positive number" & vbCrLf & _
                    "MsgBox ""Octal of "" & someNumber & "" is "" & Oct(someNumber)" & vbCrLf & _
                    "```")]
    Public DeclareWide PtrSafe Function Oct Lib "<conversion>" Alias "#11" (ByRef Number As Variant) As Variant

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldableNumericsOnly]
    [Description("Converts a number to its String representation." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = Str$(Number)`" & vbCrLf & _
                    "`result = Str(Number)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Number` (Variant): The numeric expression to be converted into a string." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A String representation of the number with a leading space if the number is positive." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example 1: Using Str$ with a positive number" & vbCrLf & _
                    "Dim someNumber As Double" & vbCrLf & _
                    "someNumber = 123.45" & vbCrLf & _
                    "MsgBox ""String representation of "" & someNumber & "" is '"" & [Str$](someNumber) & ""'""" & vbCrLf & _
                    "  " & vbCrLf & _
                    "' Example 2: Using Str with a negative number" & vbCrLf & _
                    "someNumber = -123.45" & vbCrLf & _
                    "MsgBox ""String representation of "" & someNumber & "" is '"" & Str(someNumber) & ""'""" & vbCrLf & _
                    "```")]
    Public DeclareWide PtrSafe Function [Str$] Lib "<conversion>" Alias "#12" (ByRef Number As Variant) As String

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldableNumericsOnly]
    [Description("Converts a number to its String representation." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = Str$(Number)`" & vbCrLf & _
                    "`result = Str(Number)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Number` (Variant): The numeric expression to be converted into a string." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A String representation of the number with a leading space if the number is positive." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example 1: Using Str$ with a positive number" & vbCrLf & _
                    "Dim someNumber As Double" & vbCrLf & _
                    "someNumber = 123.45" & vbCrLf & _
                    "MsgBox ""String representation of "" & someNumber & "" is '"" & [Str$](someNumber) & ""'""" & vbCrLf & _
                    "  " & vbCrLf & _
                    "' Example 2: Using Str with a negative number" & vbCrLf & _
                    "someNumber = -123.45" & vbCrLf & _
                    "MsgBox ""String representation of "" & someNumber & "" is '"" & Str(someNumber) & ""'""" & vbCrLf & _
                    "```")]
    Public DeclareWide PtrSafe Function Str Lib "<conversion>" Alias "#13" (ByRef Number As Variant) As Variant

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Converts a string to a Double or Decimal." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = Val(String)`" & vbCrLf & _
                    "`result = ValDec(String)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`String` (String): The string expression representing the number to be converted." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "`Val`: A Double representation of the number in the string." & vbCrLf & _
                    "`ValDec`: A Decimal representation of the number in the string." & vbCrLf & _
                    "### Examples" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example 1: Using Val with a string" & vbCrLf & _
                    "Dim numericString As String" & vbCrLf & _
                    "numericString = ""123.45"" " & vbCrLf & _
                    "MsgBox ""Numeric value of "" & numericString & "" is "" & Val(numericString)" & vbCrLf & _
                    "  " & vbCrLf & _
                    "' Example 2: Using ValDec with a string" & vbCrLf & _
                    "numericString = ""678.90"" " & vbCrLf & _
                    "MsgBox ""Decimal value of "" & numericString & "" is "" & ValDec(numericString)" & vbCrLf & _
                    "```")]
    Public DeclareWide PtrSafe Function Val Lib "<conversion>" Alias "#14" (ByVal String As String) As Double

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Converts a string to a Double or Decimal." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = Val(String)`" & vbCrLf & _
                    "`result = ValDec(String)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`String` (String): The string expression representing the number to be converted." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "`Val`: A Double representation of the number in the string." & vbCrLf & _
                    "`ValDec`: A Decimal representation of the number in the string." & vbCrLf & _
                    "### Examples" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example 1: Using Val with a string" & vbCrLf & _
                    "Dim numericString As String" & vbCrLf & _
                    "numericString = ""123.45"" " & vbCrLf & _
                    "MsgBox ""Numeric value of "" & numericString & "" is "" & Val(numericString)" & vbCrLf & _
                    "  " & vbCrLf & _
                    "' Example 2: Using ValDec with a string" & vbCrLf & _
                    "numericString = ""678.90"" " & vbCrLf & _
                    "MsgBox ""Decimal value of "" & numericString & "" is "" & ValDec(numericString)" & vbCrLf & _
                    "```")]
    Public DeclareWide PtrSafe Function ValDec Lib "<conversion>" Alias "#15" (ByVal String As String) As Decimal

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldableNumericsOnly]
    [Description("Converts a valid date and time expression to type Variant (subtype Date)." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = CVDate(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Variant): The expression to be converted to a Date." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a Variant containing a Date. An error occurs if the expression cannot be converted to a date." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim dateString As String" & vbCrLf & _
                    "dateString = ""February 28, 1998"" " & vbCrLf & _
                    "MsgBox ""Date value of "" & dateString & "" is "" & CVDate(dateString)" & vbCrLf & _
                    "```")]
                    
    Public DeclareWide PtrSafe Function CVDate Lib "<conversion>" Alias "#16" (ByRef Expression As Variant) As Variant
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Converts any numeric expression to type Boolean." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = CBool(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Any): The numeric expression to be evaluated and converted to a Boolean." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a Boolean. False if expression is 0, True otherwise." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim num As Integer" & vbCrLf & _
                    "num = 10 " & vbCrLf & _
                    "MsgBox ""Boolean value of "" & num & "" is "" & CBool(num)" & vbCrLf & _
                    "```")]
                    
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function CBool Lib "<conversion>" Alias "#-15" (ByVal Expression As Any) As Boolean

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Converts an expression to type Byte." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = CByte(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Any): The expression to be converted to a Byte." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a Byte. Ranges from 0 to 255. An error occurs if the expression is outside this range." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim val As Integer" & vbCrLf & _
                    "val = 255 " & vbCrLf & _
                    "MsgBox ""Byte value of "" & val & "" is "" & CByte(val)" & vbCrLf & _
                    "```")]
                    
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function CByte Lib "<conversion>" Alias "#-16" (ByVal Expression As Any) As Byte
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Converts an expression to type Currency." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = CCur(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Any): The expression to be converted to Currency." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a Currency. An error occurs if the expression is not a number." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim amount As Double" & vbCrLf & _
                    "amount = 12345.6789" & vbCrLf & _
                    "MsgBox ""Currency value of "" & amount & "" is "" & Format$(CCur(amount), ""Currency"")" & vbCrLf & _
                    "```")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function CCur Lib "<conversion>" Alias "#-17" (ByVal Expression As Any) As Currency

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Converts a valid date and time expression to type Date." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = CDate(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Any): The expression to be converted to a Date." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a Date. An error occurs if the expression cannot be converted to a date." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim datetimeString As String" & vbCrLf & _
                    "datetimeString = ""10/22/2023 5:45 PM"" " & vbCrLf & _
                    "MsgBox ""Date and time value of '"" & datetimeString & ""' is "" & CDate(datetimeString)" & vbCrLf & _
                    "```")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function CDate Lib "<conversion>" Alias "#-18" (ByVal Expression As Any) As Date
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Converts an expression to type Double." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = CDbl(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Any): The expression to be converted to Double." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a Double. An error occurs if the expression is not a number." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim num As Single" & vbCrLf & _
                    "num = 12345.6789!" & vbCrLf & _
                    "MsgBox ""Double value of "" & num & "" is "" & CDbl(num)" & vbCrLf & _
                    "```")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function CDbl Lib "<conversion>" Alias "#-19" (ByVal Expression As Any) As Double
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Converts an expression to type Decimal." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = CDec(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Any): The expression to be converted to Decimal." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a Decimal. An error occurs if the expression cannot be represented as a Decimal." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim num As Double" & vbCrLf & _
                    "num = 1234567890.123456" & vbCrLf & _
                    "MsgBox ""Decimal value of "" & num & "" is "" & CDec(num)" & vbCrLf & _
                    "```")]
                    
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function CDec Lib "<conversion>" Alias "#-20" (ByVal Expression As Any) As Decimal
                
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Converts an expression to type Integer." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = CInt(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Any): The expression to be converted to Integer." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns an Integer. An error occurs if the expression is outside the range of an Integer (-32,768 to 32,767)." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim num As Double" & vbCrLf & _
                    "num = 12345.67" & vbCrLf & _
                    "MsgBox ""Integer value of "" & num & "" is "" & CInt(num)" & vbCrLf & _
                    "```")]
                    
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function CInt Lib "<conversion>" Alias "#-21" (ByVal Expression As Any) As Integer
        
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Converts an expression to a Long data type." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = CLng(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Any): The expression you want to convert to a Long." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Long representation of the expression." & vbCrLf & _
                    "### Remarks" & vbCrLf & _
                    "The `CLng` function is used to convert an expression to a Long data type, " & _
                    "which is a 32-bit signed integer capable of storing values between -2,147,483,648 " & _
                    "and 2,147,483,647." & vbCrLf & _
                    "Attempting to convert a number outside of this range results in an overflow error." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example: Converting an expression to a Long" & vbCrLf & _
                    "Dim someValue As Variant" & vbCrLf & _
                    "someValue = 123456" & vbCrLf & _
                    "Dim longValue As Long" & vbCrLf & _
                    "longValue = CLng(someValue)" & vbCrLf & _
                    "MsgBox ""The Long representation is: "" & longValue" & vbCrLf & _
                    "```")]
                    
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function CLng Lib "<conversion>" Alias "#-22" (ByVal Expression As Any) As Long
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Converts an expression to a LongLong data type." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = CLngLng(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Any): The expression you want to convert to a LongLong." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A LongLong representation of the expression." & vbCrLf & _
                    "### Remarks" & vbCrLf & _
                    "The `CLngLng` function converts an expression to the LongLong data type, " & _
                    "which is a 64-bit signed integer. The range of a LongLong is from " & _
                    "-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807." & vbCrLf & _
                    "Attempting to convert a number outside of this range results in an overflow error." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example: Converting an expression to a LongLong" & vbCrLf & _
                    "Dim someValue As Variant" & vbCrLf & _
                    "someValue = 9223372036854775807" & vbCrLf & _
                    "Dim longLongValue As LongLong" & vbCrLf & _
                    "longLongValue = CLngLng(someValue)" & vbCrLf & _
                    "MsgBox ""The LongLong representation is: "" & longLongValue" & vbCrLf & _
                    "```")]
                    
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function CLngLng Lib "<conversion>" Alias "#-23" (ByVal Expression As Any) As LongLong
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Converts an expression to type LongPtr." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = CLngPtr(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Any): The expression to be converted to LongPtr." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns a LongPtr, which is a long on 32-bit systems and a long-long (64-bit integer) on 64-bit systems. An error occurs if the expression is outside the range of a LongPtr." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim num As Variant" & vbCrLf & _
                    "num = 1234567890" & vbCrLf & _
                    "MsgBox ""LongPtr value of "" & num & "" is "" & CLngPtr(num)" & vbCrLf & _
                    "```")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function CLngPtr Lib "<conversion>" Alias "#-24" (ByVal Expression As Any) As LongPtr
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Converts an expression to a Single data type." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = CSng(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Any): The expression you want to convert to a Single." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Single representation of the expression." & vbCrLf & _
                    "### Remarks" & vbCrLf & _
                    "The CSng function is used to convert an expression to a Single data type, " & _
                    "which is a floating-point number that can represent a wide range of values." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "' Example: Converting an expression to a Single" & vbCrLf & _
                    "Dim someValue As Variant" & vbCrLf & _
                    "someValue = 12345.6789" & vbCrLf & _
                    "Dim singleValue As Single" & vbCrLf & _
                    "singleValue = CSng(someValue)" & vbCrLf & _
                    "MsgBox ""The Single representation is: "" & singleValue" & vbCrLf & _
                    "```")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function CSng Lib "<conversion>" Alias "#-25" (ByVal Expression As Any) As Single
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Converts an expression to a String data type." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = CStr(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Any): The expression to be converted to String." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns the expression as a String data type." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim num As Variant" & vbCrLf & _
                    "num = True" & vbCrLf & _
                    "MsgBox ""String value of "" & num & "" is '"" & CStr(num) & ""'""" & vbCrLf & _
                    "```")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function CStr Lib "<conversion>" Alias "#-26" (ByVal Expression As Any) As String
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Converts an expression to a Variant data type." & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = CVar(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Any): The expression to be converted to Variant." & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "Returns the expression as a Variant data type." & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim num As Integer" & vbCrLf & _
                    "num = 10" & vbCrLf & _
                    "MsgBox ""Variant value of "" & num & "" is "" & CVar(num)" & vbCrLf & _
                    "```")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function CVar Lib "<conversion>" Alias "#-27" (ByVal Expression As Any) As Variant
    
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function CType Lib "<conversion>" Alias "#-59" (ByVal Value As Any) As Variant
    
End Module