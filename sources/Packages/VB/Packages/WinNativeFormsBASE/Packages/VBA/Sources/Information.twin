Module Information
     
    [PreserveSig(True), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns the line number of the last executed statement where an error occurred during program execution.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = Erl()`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "None.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Long representing the line number where an error occurred.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim errorLine As Long" & vbCrLf & _
                    "On Error Resume Next ' Enable error handling" & vbCrLf & _
                    "123: MsgBox 1/0 ' will throw a div-by-zero error" & vbCrLf & _
                    "errorLine = Erl ' Get the line where the error occurred" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example demonstrates how to capture the line number of an error.")]
    Public DeclareWide PtrSafe Function Erl Lib "<information>" Alias "#1" () As Long
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns the status of the Input Method Editor (IME).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = IMEStatus()`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "None.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A VbIMEStatus enumeration value indicating the state of the IME.")]
    Public DeclareWide PtrSafe Function IMEStatus Lib "<information>" Alias "#2" () As VbIMEStatus
    
    [PreserveSig(True), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Determines if an optional argument was provided in a procedure call.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = IsMissing(ArgName)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`ArgName` (Variant): The name of the parameter to check for its presence.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Boolean value where True indicates the argument is missing, and False indicates it is present.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Function DoSomething(Optional Arg As Variant) As Boolean" & vbCrLf & _
                    "    If IsMissing(Arg) Then" & vbCrLf & _
                    "    ' handle the missing arg here" & vbCrLf & _
                    "    End If" & vbCrLf & _
                    "End Function" & vbCrLf & _
                    "```")]
    Public DeclareWide PtrSafe Function IsMissing Lib "<information>" Alias "#3" (ByRef ArgName As Variant) As Boolean
    
    [PreserveSig(True), UseGetLastError(False), DLLStackCheck(False), ConstantFoldableNumericsOnly]
    [Description("Determines if an expression is recognized as a date.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = IsDate(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Variant): The expression to evaluate as a potential date.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Boolean value where True indicates the expression is a date, and False indicates otherwise.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myResult As Boolean" & vbCrLf & _
                    "myResult = IsDate(""1/1/2000"") ' Returns True" & vbCrLf & _
                    "myResult = IsDate(""Hello"") ' Returns False" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example checks if the given expressions are dates.")]
    Public DeclareWide PtrSafe Function IsDate Lib "<information>" Alias "#4" (ByRef Expression As Variant) As Boolean
    
    [PreserveSig(True), UseGetLastError(False), DLLStackCheck(False), ConstantFoldableNumericsOnly]
    [Description("Determines if an expression can be evaluated as a number.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = IsNumeric(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Variant): The expression to evaluate as a potential number.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Boolean value where True indicates the expression is numeric, and False indicates otherwise.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myResult As Boolean" & vbCrLf & _
                    "myResult = IsNumeric(""123.45"") ' Returns True" & vbCrLf & _
                    "myResult = IsNumeric(""ABC"") ' Returns False" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example checks if the given expressions are numeric.")]
                    
    Public DeclareWide PtrSafe Function IsNumeric Lib "<information>" Alias "#5" (ByRef Expression As Variant) As Boolean
    
    [PreserveSig(True), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Determines if an expression is an error type.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = IsError(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Variant): The expression to check for an error type.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Boolean value where True indicates the expression is an error, and False indicates otherwise.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myResult As Boolean" & vbCrLf & _
                    "myResult = IsError(CVErr(11)) ' Returns True because CVErr populates a Variant with an error subtype" & vbCrLf & _
                    "myResult = IsError(123) ' Returns False" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example checks if the given expressions result in an error.")]
                    
    Public DeclareWide PtrSafe Function IsError Lib "<information>" Alias "#6" (ByRef Expression As Variant) As Boolean
        
    [PreserveSig(True), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Determines if a variable is an array type.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = IsArray(VarName)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`VarName` (Variant): The variable to check if it's an array.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Boolean value where True indicates the variable is an array, and False indicates otherwise.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myArray() As Integer" & vbCrLf & _
                    "Dim myResult As Boolean" & vbCrLf & _
                    "myResult = IsArray(myArray) ' Returns True" & vbCrLf & _
                    "myResult = IsArray(123) ' Returns False" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example checks if `myArray` is an array and `123` is not.")]
    Public DeclareWide PtrSafe Function IsArray Lib "<information>" Alias "#7" (ByRef VarName As Variant) As Boolean
            
    [PreserveSig(True), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Determines if an array has been initialized (dimensioned).  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = IsArrayInitialized(VarName)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`VarName` (Variant): The array variable to check for initialization.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Boolean value where True indicates the array has been initialized, and False indicates otherwise.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myArray() As Integer" & vbCrLf & _
                    "Dim myResult As Boolean" & vbCrLf & _
                    "myResult = IsArrayInitialized(myArray) ' Returns False" & vbCrLf & _
                    "ReDim myArray(5) ' Initialize the array" & vbCrLf & _
                    "myResult = IsArrayInitialized(myArray) ' Returns True" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example demonstrates checking for array initialization before and after using `ReDim`.")]
    Public DeclareWide PtrSafe Function IsArrayInitialized Lib "<information>" Alias "#8" (ByRef VarName As Variant) As Boolean
    
    [PreserveSig(True), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Determines if a variable has been initialized.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = IsEmpty(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Variant): The variable to test for initialization.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Boolean value where True indicates the variable is uninitialized, and False indicates it has been initialized.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myVar As Variant" & vbCrLf & _
                    "Dim myResult As Boolean" & vbCrLf & _
                    "myResult = IsEmpty(myVar) ' Returns True since myVar is not initialized" & vbCrLf & _
                    "myVar = 10" & vbCrLf & _
                    "myResult = IsEmpty(myVar) ' Returns False since myVar now has a value" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example checks whether a variable `myVar` has been initialized.")]
    Public DeclareWide PtrSafe Function IsEmpty Lib "<information>" Alias "#9" (ByRef Expression As Variant) As Boolean
    
    [PreserveSig(True), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Determines if a variable contains a Null value.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = IsNull(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Variant): The variable to test for Null.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Boolean value where True indicates the variable contains a Null value, and False indicates otherwise.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myVar As Variant" & vbCrLf & _
                    "Dim myResult As Boolean" & vbCrLf & _
                    "myVar = Null" & vbCrLf & _
                    "myResult = IsNull(myVar) ' Returns True since myVar is set to Null" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example checks if the variable `myVar` is set to Null.")]
    Public DeclareWide PtrSafe Function IsNull Lib "<information>" Alias "#10" (ByRef Expression As Variant) As Boolean
    
    [PreserveSig(True), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Determines if a variable is a reference to an object.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = IsObject(Expression)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Expression` (Variant): The variable to test for an object reference.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Boolean value where True indicates the variable is an object reference, and False indicates it is not.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myObj As Object" & vbCrLf & _
                    "Set myObj = New Collection" & vbCrLf & _
                    "Dim myResult As Boolean" & vbCrLf & _
                    "myResult = IsObject(myObj) ' Returns True since myObj is set to an object (Collection)" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example checks if `myObj` is an object.  " & vbCrLf & _
                    "  " & vbCrLf & _
                    "PLEASE NOTE: there is also a generic version of this function available, IsObject(Of T), useful for compile time verification of generic type specifiers.")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function IsObject Lib "<information>" Alias "#-57" (ByRef Expression As Variant) As Boolean
    
    [PreserveSig(True), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns a value indicating the subtype of a variable.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = VarType(VarName)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`VarName` (Variant): The variable to return the subtype of.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A VbVarType enumeration value indicating the subtype of the variable.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myVar As Variant" & vbCrLf & _
                    "Dim myResult As VbVarType" & vbCrLf & _
                    "myVar = 'Hello World'" & vbCrLf & _
                    "myResult = VarType(myVar) ' Returns vbString since myVar contains a string" & vbCrLf & _
                    "myVar = 10" & vbCrLf & _
                    "myResult = VarType(myVar) ' Returns vbInteger since myVar contains an integer" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example demonstrates how to check the variable subtype for different types of values.  " & vbCrLf & _
                    "  " & vbCrLf & _
                    "PLEASE NOTE: there is also a generic version of this function available, VarType(Of T), useful for compile time verification of generic type specifiers.")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function VarType Lib "<information>" Alias "#-56" (ByRef VarName As Variant) As VbVarType

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a string description of the data type of a variable.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = TypeName(VarName)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`VarName` (Variant): The variable to get the type description of.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A String representing the data type of the variable.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myVar As Variant" & vbCrLf & _
                    "Dim myResult As String" & vbCrLf & _
                    "myVar = 10" & vbCrLf & _
                    "myResult = TypeName(myVar) ' Returns ""Integer""" & vbCrLf & _
                    "myVar = ""Hello""" & vbCrLf & _
                    "myResult = TypeName(myVar) ' Returns ""String""" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example determines the data type name of the variable `myVar`.")]
    Public DeclareWide PtrSafe Function TypeName Lib "<information>" Alias "#13" (ByRef VarName As Variant) As String
        
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Translates a color value to a RGB color, considering the system palette if necessary.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = TranslateColor(ColorValue, [hPalettePtr])`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`ColorValue` (Long): The ole color value to be translated.  " & vbCrLf & _
                    "`hPalettePtr` (LongPtr): Optional. A pointer to the palette to use for translation.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Long representing the translated RGB color.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim oleColor As Long" & vbCrLf & _
                    "Dim rgbColor As Long" & vbCrLf & _
                    "oleColor = &H80000012 ' An OLE color value" & vbCrLf & _
                    "rgbColor = TranslateColor(oleColor) ' Translates to an RGB color" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example translates an OLE color value to an RGB color.")]
                    
    Public DeclareWide PtrSafe Function TranslateColor Lib "<information>" Alias "#14" (ByVal ColorValue As Long, Optional ByVal hPalettePtr As LongPtr = 0&) As Long
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a Long representing an RGB color value made up of the red, green, and blue component values specified.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = RGB(Red, Green, Blue)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Red` (Integer): The red component of the color.  " & vbCrLf & _
                    "`Green` (Integer): The green component of the color.  " & vbCrLf & _
                    "`Blue` (Integer): The blue component of the color.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Long representing the RGB color value.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim color As Long" & vbCrLf & _
                    "color = RGB(255, 0, 0) ' Returns the color value for red" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example returns the RGB color value for red.")]
    Public DeclareWide PtrSafe Function RGB Lib "<information>" Alias "#15" (ByVal Red As Integer, ByVal Green As Integer, ByVal Blue As Integer) As Long
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns a Long representing an RGBA color value made up of the red, green, blue, and alpha component values specified.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`result = RGBA(Red, Green, Blue, Alpha)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`Red` (Integer): The red component of the color.  " & vbCrLf & _
                    "`Green` (Integer): The green component of the color.  " & vbCrLf & _
                    "`Blue` (Integer): The blue component of the color.  " & vbCrLf & _
                    "`Alpha` (Integer): The alpha component for transparency of the color.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Long representing the RGBA color value.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim color As Long" & vbCrLf & _
                    "color = RGBA(255, 0, 0, 128) ' Returns the color value for semi-transparent red" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example returns the RGBA color value for a semi-transparent red.")]
    Public DeclareWide PtrSafe Function RGBA Lib "<information>" Alias "#16" (ByVal Red As Integer, ByVal Green As Integer, ByVal Blue As Integer, ByVal Alpha As Integer) As Long
    
    [PreserveSig(True), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns the red component (as an Integer) from a given RGBA color value.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`redComponent = RGB_R(RGBA)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`RGBA` (Long): The RGBA color value.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "An Integer representing the red component of the color.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myColor As Long" & vbCrLf & _
                    "Dim redComponent As Integer" & vbCrLf & _
                    "myColor = RGB(255, 100, 150)" & vbCrLf & _
                    "redComponent = RGB_R(myColor) ' Returns 255" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example retrieves the red component from an RGB color value.")]
    Public DeclareWide PtrSafe Function RGB_R Lib "<information>" Alias "#17" (ByVal RGBA As Long) As Integer
    
    [PreserveSig(True), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns the green component (as an Integer) from a given RGBA color value.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`greenComponent = RGB_G(RGBA)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`RGBA` (Long): The RGBA color value.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "An Integer representing the green component of the color.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myColor As Long" & vbCrLf & _
                    "Dim greenComponent As Integer" & vbCrLf & _
                    "myColor = RGB(75, 125, 255)" & vbCrLf & _
                    "greenComponent = RGB_G(myColor) ' Returns 125" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example retrieves the green component from an RGB color value.")]
    Public DeclareWide PtrSafe Function RGB_G Lib "<information>" Alias "#18" (ByVal RGBA As Long) As Integer
    
    [PreserveSig(True), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns the blue component (as an Integer) from a given RGBA color value.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`blueComponent = RGB_B(RGBA)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`RGBA` (Long): The RGBA color value.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "An Integer representing the blue component of the color.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myColor As Long" & vbCrLf & _
                    "Dim blueComponent As Integer" & vbCrLf & _
                    "myColor = RGB(210, 45, 200)" & vbCrLf & _
                    "blueComponent = RGB_B(myColor) ' Returns 200" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example retrieves the blue component from an RGB color value.")]
    Public DeclareWide PtrSafe Function RGB_B Lib "<information>" Alias "#19" (ByVal RGBA As Long) As Integer
    
    [PreserveSig(True), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns the blue component (as an Integer) from a given RGBA color value.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`blueComponent = RGB_B(RGBA)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`RGBA` (Long): The RGBA color value.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "An Integer representing the blue component of the color.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myColor As Long" & vbCrLf & _
                    "Dim blueComponent As Integer" & vbCrLf & _
                    "myColor = RGB(210, 45, 200)" & vbCrLf & _
                    "blueComponent = RGB_B(myColor) ' Returns 200" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example retrieves the blue component from an RGB color value.")]
    Public DeclareWide PtrSafe Function RGBA_A Lib "<information>" Alias "#20" (ByVal RGBA As Long) As Integer
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False), ConstantFoldable]
    [Description("Returns the RGB Long color code corresponding to the color index used in QBasic/QuickBASIC.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`colorValue = QBColor(index)`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`index` (Integer): The color index (0-15) corresponding to QBasic color constants.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Long representing the RGB color code for the given QBasic color index.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim colorCode As Long" & vbCrLf & _
                    "colorCode = QBColor(1) ' Returns the RGB color code for blue" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example returns the RGB color code for the QBasic color index 1 (blue).")]
    Public DeclareWide PtrSafe Function QBColor Lib "<information>" Alias "#21" (ByVal index As Integer) As Long
        
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns the smallest available subscript for the indicated dimension of an array.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`lowestSubscript = LBound(ArrayName[, Dimension])`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`ArrayName` (Any): The array name.  " & vbCrLf & _
                    "`Dimension` (Long): Optional. The array dimension.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Long representing the lower bound for the specified dimension of the array.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myArray(1 To 10) As Integer" & vbCrLf & _
                    "Dim lowerBound As Long" & vbCrLf & _
                    "lowerBound = LBound(myArray) ' Returns 1" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example retrieves the lower bound of the first dimension of 'myArray'.")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function LBound Lib "<information>" Alias "#-5" (ByRef ArrayName As Any) As Long

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns the smallest available subscript for the indicated dimension of an array.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`lowestSubscript = LBound(ArrayName[, Dimension])`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`ArrayName` (Any): The array name.  " & vbCrLf & _
                    "`Dimension` (Long): Optional. The array dimension.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Long representing the lower bound for the specified dimension of the array.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myArray(1 To 10) As Integer" & vbCrLf & _
                    "Dim lowerBound As Long" & vbCrLf & _
                    "lowerBound = LBound(myArray) ' Returns 1" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example retrieves the lower bound of the first dimension of 'myArray'.")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function LBound Lib "<information>" Alias "#-5" (ByRef ArrayName As Any, ByVal Dimension As Long) As Long
    
    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns the largest available subscript for the indicated dimension of an array.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`highestSubscript = UBound(ArrayName[, Dimension])`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`ArrayName` (Any): The array name.  " & vbCrLf & _
                    "`Dimension` (Long): Optional. The array dimension.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Long representing the upper bound for the specified dimension of the array.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myArray(1 To 10) As Integer" & vbCrLf & _
                    "Dim upperBound As Long" & vbCrLf & _
                    "upperBound = UBound(myArray) ' Returns 10" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example retrieves the upper bound of the first dimension of 'myArray'.")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function UBound Lib "<information>" Alias "#-6" (ByRef ArrayName As Any) As Long

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns the largest available subscript for the indicated dimension of an array.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`highestSubscript = UBound(ArrayName[, Dimension])`" & vbCrLf & _
                    "### Parameters" & vbCrLf & _
                    "`ArrayName` (Any): The array name.  " & vbCrLf & _
                    "`Dimension` (Long): Optional. The array dimension.  " & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "A Long representing the upper bound for the specified dimension of the array.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "Dim myArray(1 To 10) As Integer" & vbCrLf & _
                    "Dim upperBound As Long" & vbCrLf & _
                    "upperBound = UBound(myArray) ' Returns 10" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example retrieves the upper bound of the first dimension of 'myArray'.")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Function UBound Lib "<information>" Alias "#-6" (ByRef ArrayName As Any, ByVal Dimension As Long) As Long

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns a runtime ErrObject that contains information about runtime errors.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`errorObject = Err`" & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "An ErrObject that represents the current runtime error state.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "On Error Resume Next ' Enable error handling" & vbCrLf & _
                    "Dim result As Double" & vbCrLf & _
                    "result = 1 / 0 ' Attempt to divide by zero causes an error" & vbCrLf & _
                    "If Err.Number <> 0 Then" & vbCrLf & _
                    "    MsgBox "" An error occurred: "" & Err.Description" & vbCrLf & _
                    "End If" & vbCrLf & _
                    "On Error GoTo 0 ' Disable error handling" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example attempts to divide by zero, which causes a runtime error. The ErrObject is then accessed to retrieve information about the error, and a message box is displayed with the error description.")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Property Get Err Lib "<information>" Alias "#-7" () As ErrObject

    [PreserveSig(False), UseGetLastError(False), DLLStackCheck(False)]
    [Description("Returns a runtime ErrObject that contains information about runtime errors.  " & vbCrLf & _
                    "### Syntax" & vbCrLf & _
                    "`errorObject = Err`" & vbCrLf & _
                    "### Return value" & vbCrLf & _
                    "An ErrObject that represents the current runtime error state.  " & vbCrLf & _
                    "### Example" & vbCrLf & _
                    "```vb" & vbCrLf & _
                    "On Error Resume Next ' Enable error handling" & vbCrLf & _
                    "Dim result As Double" & vbCrLf & _
                    "result = 1 / 0 ' Attempt to divide by zero causes an error" & vbCrLf & _
                    "If Err.Number <> 0 Then" & vbCrLf & _
                    "    MsgBox "" An error occurred: "" & Err.Description" & vbCrLf & _
                    "End If" & vbCrLf & _
                    "On Error GoTo 0 ' Disable error handling" & vbCrLf & _
                    "```" & vbCrLf & _
                    "This example attempts to divide by zero, which causes a runtime error. The ErrObject is then accessed to retrieve information about the error, and a message box is displayed with the error description.")]
    ' Note, this function uses special internal bindings and so may not behave like a regular function
    Public DeclareWide PtrSafe Property Let Err Lib "<information>" Alias "#-32" (ByVal Number As Long)
    
End Module